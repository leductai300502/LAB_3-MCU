
lab3_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000030b0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080031bc  080031bc  000131bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031dc  080031dc  00020058  2**0
                  CONTENTS
  4 .ARM          00000000  080031dc  080031dc  00020058  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031dc  080031dc  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031dc  080031dc  000131dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031e0  080031e0  000131e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  080031e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  20000058  0800323c  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000010c  0800323c  0002010c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009467  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001aba  00000000  00000000  000294e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a68  00000000  00000000  0002afa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000958  00000000  00000000  0002ba10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cef  00000000  00000000  0002c368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b9c5  00000000  00000000  00043057  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082442  00000000  00000000  0004ea1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d0e5e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000028d8  00000000  00000000  000d0eb4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000058 	.word	0x20000058
 8000128:	00000000 	.word	0x00000000
 800012c:	080031a4 	.word	0x080031a4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000005c 	.word	0x2000005c
 8000148:	080031a4 	.word	0x080031a4

0800014c <is_Button1_Pressed>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int downtime = 100;

int TimeOutForKeyPress =  10;
int is_Button1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_Button1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_Button1_Pressed+0x16>
	{
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_Button1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_Button1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	20000074 	.word	0x20000074

08000170 <is_Button2_Pressed>:
int is_Button2_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_Button2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_Button2_Pressed+0x16>
	{
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_Button2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_Button2_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000078 	.word	0x20000078

08000194 <is_Button3_Pressed>:
int is_Button3_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_Button3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_Button3_Pressed+0x16>
	{
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_Button3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_Button3_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	2000007c 	.word	0x2000007c

080001b8 <subKeyProcess_1>:

void subKeyProcess_1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag=1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess_1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	20000074 	.word	0x20000074

080001d0 <subKeyProcess_2>:
void subKeyProcess_2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag=1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess_2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000078 	.word	0x20000078

080001e8 <subKeyProcess_3>:
void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag=1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	2000007c 	.word	0x2000007c

08000200 <getKeyInput1>:
void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000204:	4b22      	ldr	r3, [pc, #136]	; (8000290 <getKeyInput1+0x90>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <getKeyInput1+0x94>)
 800020a:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <getKeyInput1+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <getKeyInput1+0x90>)
 8000212:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4820      	ldr	r0, [pc, #128]	; (800029c <getKeyInput1+0x9c>)
 800021a:	f001 ff83 	bl	8002124 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <getKeyInput1+0x98>)
 8000224:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <getKeyInput1+0x90>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <getKeyInput1+0x98>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d12b      	bne.n	800028a <getKeyInput1+0x8a>
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <getKeyInput1+0x90>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <getKeyInput1+0x94>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d125      	bne.n	800028a <getKeyInput1+0x8a>
    if (KeyReg2 != KeyReg3){
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput1+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <getKeyInput1+0xa0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput1+0x66>
      KeyReg3 = KeyReg2;
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <getKeyInput1+0x94>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <getKeyInput1+0xa0>)
 8000250:	6013      	str	r3, [r2, #0]

      if (KeyReg2 == PRESSED_STATE){
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <getKeyInput1+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <getKeyInput1+0x8a>
        TimeOutForKeyPress = 100;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <getKeyInput1+0xa4>)
 800025c:	2264      	movs	r2, #100	; 0x64
 800025e:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 8000260:	f7ff ffaa 	bl	80001b8 <subKeyProcess_1>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 8000264:	e011      	b.n	800028a <getKeyInput1+0x8a>
       TimeOutForKeyPress --;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <getKeyInput1+0xa4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <getKeyInput1+0xa4>)
 800026e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <getKeyInput1+0xa4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d108      	bne.n	800028a <getKeyInput1+0x8a>
        	if (KeyReg2 == PRESSED_STATE){
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput1+0x94>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getKeyInput1+0x84>
        		subKeyProcess_1();
 8000280:	f7ff ff9a 	bl	80001b8 <subKeyProcess_1>
        	TimeOutForKeyPress = 100;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <getKeyInput1+0xa4>)
 8000286:	2264      	movs	r2, #100	; 0x64
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000008 	.word	0x20000008
 8000298:	20000000 	.word	0x20000000
 800029c:	40011000 	.word	0x40011000
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	20000030 	.word	0x20000030

080002a8 <getKeyInput3>:
void getKeyInput3(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 80002ac:	4b22      	ldr	r3, [pc, #136]	; (8000338 <getKeyInput3+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <getKeyInput3+0x94>)
 80002b2:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <getKeyInput3+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <getKeyInput3+0x90>)
 80002ba:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80002bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <getKeyInput3+0x9c>)
 80002c2:	f001 ff2f 	bl	8002124 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <getKeyInput3+0x98>)
 80002cc:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <getKeyInput3+0x90>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <getKeyInput3+0x98>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d12b      	bne.n	8000332 <getKeyInput3+0x8a>
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <getKeyInput3+0x90>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <getKeyInput3+0x94>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d125      	bne.n	8000332 <getKeyInput3+0x8a>
    if (KeyReg10 != KeyReg11){
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <getKeyInput3+0x94>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <getKeyInput3+0xa0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d00d      	beq.n	800030e <getKeyInput3+0x66>
      KeyReg11 = KeyReg10;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <getKeyInput3+0x94>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <getKeyInput3+0xa0>)
 80002f8:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <getKeyInput3+0x94>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d117      	bne.n	8000332 <getKeyInput3+0x8a>
        TimeOutForKeyPress = 100;
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <getKeyInput3+0xa4>)
 8000304:	2264      	movs	r2, #100	; 0x64
 8000306:	601a      	str	r2, [r3, #0]
        subKeyProcess_3();
 8000308:	f7ff ff6e 	bl	80001e8 <subKeyProcess_3>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 800030c:	e011      	b.n	8000332 <getKeyInput3+0x8a>
       TimeOutForKeyPress --;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <getKeyInput3+0xa4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <getKeyInput3+0xa4>)
 8000316:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <getKeyInput3+0xa4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d108      	bne.n	8000332 <getKeyInput3+0x8a>
        	if (KeyReg10 == PRESSED_STATE){
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <getKeyInput3+0x94>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <getKeyInput3+0x84>
        		subKeyProcess_3();
 8000328:	f7ff ff5e 	bl	80001e8 <subKeyProcess_3>
        	TimeOutForKeyPress = 100;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <getKeyInput3+0xa4>)
 800032e:	2264      	movs	r2, #100	; 0x64
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000024 	.word	0x20000024
 800033c:	20000028 	.word	0x20000028
 8000340:	20000020 	.word	0x20000020
 8000344:	40011000 	.word	0x40011000
 8000348:	2000002c 	.word	0x2000002c
 800034c:	20000030 	.word	0x20000030

08000350 <getKeyInput2>:
void getKeyInput2(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <getKeyInput2+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <getKeyInput2+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <getKeyInput2+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <getKeyInput2+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <getKeyInput2+0x9c>)
 800036a:	f001 fedb 	bl	8002124 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <getKeyInput2+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <getKeyInput2+0x90>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <getKeyInput2+0x98>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12b      	bne.n	80003da <getKeyInput2+0x8a>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <getKeyInput2+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <getKeyInput2+0x94>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d125      	bne.n	80003da <getKeyInput2+0x8a>
    if (KeyReg6 != KeyReg7){
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <getKeyInput2+0x94>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <getKeyInput2+0xa0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00d      	beq.n	80003b6 <getKeyInput2+0x66>
      KeyReg7 = KeyReg6;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <getKeyInput2+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <getKeyInput2+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]

      if (KeyReg6 == PRESSED_STATE){
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <getKeyInput2+0x94>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d117      	bne.n	80003da <getKeyInput2+0x8a>
        TimeOutForKeyPress = 100;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <getKeyInput2+0xa4>)
 80003ac:	2264      	movs	r2, #100	; 0x64
 80003ae:	601a      	str	r2, [r3, #0]
        subKeyProcess_2();
 80003b0:	f7ff ff0e 	bl	80001d0 <subKeyProcess_2>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 80003b4:	e011      	b.n	80003da <getKeyInput2+0x8a>
       TimeOutForKeyPress --;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <getKeyInput2+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <getKeyInput2+0xa4>)
 80003be:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <getKeyInput2+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <getKeyInput2+0x8a>
        	if (KeyReg6 == PRESSED_STATE){
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <getKeyInput2+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <getKeyInput2+0x84>
        		subKeyProcess_2();
 80003d0:	f7ff fefe 	bl	80001d0 <subKeyProcess_2>
        	TimeOutForKeyPress = 100;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <getKeyInput2+0xa4>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000014 	.word	0x20000014
 80003e4:	20000018 	.word	0x20000018
 80003e8:	20000010 	.word	0x20000010
 80003ec:	40011000 	.word	0x40011000
 80003f0:	2000001c 	.word	0x2000001c
 80003f4:	20000030 	.word	0x20000030

080003f8 <display7SEG>:

#include "display_led.h"
#include "main.h"

void display7SEG(int num)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

	if(num == 0){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d122      	bne.n	800044c <display7SEG+0x54>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	48bd      	ldr	r0, [pc, #756]	; (8000700 <display7SEG+0x308>)
 800040c:	f001 fea1 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	48ba      	ldr	r0, [pc, #744]	; (8000700 <display7SEG+0x308>)
 8000416:	f001 fe9c 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	48b8      	ldr	r0, [pc, #736]	; (8000700 <display7SEG+0x308>)
 8000420:	f001 fe97 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	48b5      	ldr	r0, [pc, #724]	; (8000700 <display7SEG+0x308>)
 800042a:	f001 fe92 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2110      	movs	r1, #16
 8000432:	48b3      	ldr	r0, [pc, #716]	; (8000700 <display7SEG+0x308>)
 8000434:	f001 fe8d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	48b0      	ldr	r0, [pc, #704]	; (8000700 <display7SEG+0x308>)
 800043e:	f001 fe88 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	48ae      	ldr	r0, [pc, #696]	; (8000700 <display7SEG+0x308>)
 8000448:	f001 fe83 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 1){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d122      	bne.n	8000498 <display7SEG+0xa0>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2101      	movs	r1, #1
 8000456:	48aa      	ldr	r0, [pc, #680]	; (8000700 <display7SEG+0x308>)
 8000458:	f001 fe7b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2102      	movs	r1, #2
 8000460:	48a7      	ldr	r0, [pc, #668]	; (8000700 <display7SEG+0x308>)
 8000462:	f001 fe76 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2104      	movs	r1, #4
 800046a:	48a5      	ldr	r0, [pc, #660]	; (8000700 <display7SEG+0x308>)
 800046c:	f001 fe71 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2108      	movs	r1, #8
 8000474:	48a2      	ldr	r0, [pc, #648]	; (8000700 <display7SEG+0x308>)
 8000476:	f001 fe6c 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2110      	movs	r1, #16
 800047e:	48a0      	ldr	r0, [pc, #640]	; (8000700 <display7SEG+0x308>)
 8000480:	f001 fe67 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	489d      	ldr	r0, [pc, #628]	; (8000700 <display7SEG+0x308>)
 800048a:	f001 fe62 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	489b      	ldr	r0, [pc, #620]	; (8000700 <display7SEG+0x308>)
 8000494:	f001 fe5d 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 2){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d122      	bne.n	80004e4 <display7SEG+0xec>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4897      	ldr	r0, [pc, #604]	; (8000700 <display7SEG+0x308>)
 80004a4:	f001 fe55 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2102      	movs	r1, #2
 80004ac:	4894      	ldr	r0, [pc, #592]	; (8000700 <display7SEG+0x308>)
 80004ae:	f001 fe50 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2104      	movs	r1, #4
 80004b6:	4892      	ldr	r0, [pc, #584]	; (8000700 <display7SEG+0x308>)
 80004b8:	f001 fe4b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2108      	movs	r1, #8
 80004c0:	488f      	ldr	r0, [pc, #572]	; (8000700 <display7SEG+0x308>)
 80004c2:	f001 fe46 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2110      	movs	r1, #16
 80004ca:	488d      	ldr	r0, [pc, #564]	; (8000700 <display7SEG+0x308>)
 80004cc:	f001 fe41 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	488a      	ldr	r0, [pc, #552]	; (8000700 <display7SEG+0x308>)
 80004d6:	f001 fe3c 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	4888      	ldr	r0, [pc, #544]	; (8000700 <display7SEG+0x308>)
 80004e0:	f001 fe37 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 3){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d122      	bne.n	8000530 <display7SEG+0x138>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4884      	ldr	r0, [pc, #528]	; (8000700 <display7SEG+0x308>)
 80004f0:	f001 fe2f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	4881      	ldr	r0, [pc, #516]	; (8000700 <display7SEG+0x308>)
 80004fa:	f001 fe2a 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2104      	movs	r1, #4
 8000502:	487f      	ldr	r0, [pc, #508]	; (8000700 <display7SEG+0x308>)
 8000504:	f001 fe25 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	487c      	ldr	r0, [pc, #496]	; (8000700 <display7SEG+0x308>)
 800050e:	f001 fe20 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2110      	movs	r1, #16
 8000516:	487a      	ldr	r0, [pc, #488]	; (8000700 <display7SEG+0x308>)
 8000518:	f001 fe1b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	4877      	ldr	r0, [pc, #476]	; (8000700 <display7SEG+0x308>)
 8000522:	f001 fe16 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	4875      	ldr	r0, [pc, #468]	; (8000700 <display7SEG+0x308>)
 800052c:	f001 fe11 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 4){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d122      	bne.n	800057c <display7SEG+0x184>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2101      	movs	r1, #1
 800053a:	4871      	ldr	r0, [pc, #452]	; (8000700 <display7SEG+0x308>)
 800053c:	f001 fe09 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	486e      	ldr	r0, [pc, #440]	; (8000700 <display7SEG+0x308>)
 8000546:	f001 fe04 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	486c      	ldr	r0, [pc, #432]	; (8000700 <display7SEG+0x308>)
 8000550:	f001 fdff 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	4869      	ldr	r0, [pc, #420]	; (8000700 <display7SEG+0x308>)
 800055a:	f001 fdfa 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	4867      	ldr	r0, [pc, #412]	; (8000700 <display7SEG+0x308>)
 8000564:	f001 fdf5 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4864      	ldr	r0, [pc, #400]	; (8000700 <display7SEG+0x308>)
 800056e:	f001 fdf0 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4862      	ldr	r0, [pc, #392]	; (8000700 <display7SEG+0x308>)
 8000578:	f001 fdeb 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 5){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d122      	bne.n	80005c8 <display7SEG+0x1d0>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	485e      	ldr	r0, [pc, #376]	; (8000700 <display7SEG+0x308>)
 8000588:	f001 fde3 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	485b      	ldr	r0, [pc, #364]	; (8000700 <display7SEG+0x308>)
 8000592:	f001 fdde 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2104      	movs	r1, #4
 800059a:	4859      	ldr	r0, [pc, #356]	; (8000700 <display7SEG+0x308>)
 800059c:	f001 fdd9 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	4856      	ldr	r0, [pc, #344]	; (8000700 <display7SEG+0x308>)
 80005a6:	f001 fdd4 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	4854      	ldr	r0, [pc, #336]	; (8000700 <display7SEG+0x308>)
 80005b0:	f001 fdcf 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4851      	ldr	r0, [pc, #324]	; (8000700 <display7SEG+0x308>)
 80005ba:	f001 fdca 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	484f      	ldr	r0, [pc, #316]	; (8000700 <display7SEG+0x308>)
 80005c4:	f001 fdc5 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 6){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b06      	cmp	r3, #6
 80005cc:	d122      	bne.n	8000614 <display7SEG+0x21c>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	484b      	ldr	r0, [pc, #300]	; (8000700 <display7SEG+0x308>)
 80005d4:	f001 fdbd 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	4848      	ldr	r0, [pc, #288]	; (8000700 <display7SEG+0x308>)
 80005de:	f001 fdb8 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4846      	ldr	r0, [pc, #280]	; (8000700 <display7SEG+0x308>)
 80005e8:	f001 fdb3 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2108      	movs	r1, #8
 80005f0:	4843      	ldr	r0, [pc, #268]	; (8000700 <display7SEG+0x308>)
 80005f2:	f001 fdae 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <display7SEG+0x308>)
 80005fc:	f001 fda9 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2120      	movs	r1, #32
 8000604:	483e      	ldr	r0, [pc, #248]	; (8000700 <display7SEG+0x308>)
 8000606:	f001 fda4 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	483c      	ldr	r0, [pc, #240]	; (8000700 <display7SEG+0x308>)
 8000610:	f001 fd9f 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d122      	bne.n	8000660 <display7SEG+0x268>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4838      	ldr	r0, [pc, #224]	; (8000700 <display7SEG+0x308>)
 8000620:	f001 fd97 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4835      	ldr	r0, [pc, #212]	; (8000700 <display7SEG+0x308>)
 800062a:	f001 fd92 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2104      	movs	r1, #4
 8000632:	4833      	ldr	r0, [pc, #204]	; (8000700 <display7SEG+0x308>)
 8000634:	f001 fd8d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	4830      	ldr	r0, [pc, #192]	; (8000700 <display7SEG+0x308>)
 800063e:	f001 fd88 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2110      	movs	r1, #16
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <display7SEG+0x308>)
 8000648:	f001 fd83 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2120      	movs	r1, #32
 8000650:	482b      	ldr	r0, [pc, #172]	; (8000700 <display7SEG+0x308>)
 8000652:	f001 fd7e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4829      	ldr	r0, [pc, #164]	; (8000700 <display7SEG+0x308>)
 800065c:	f001 fd79 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 8){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b08      	cmp	r3, #8
 8000664:	d122      	bne.n	80006ac <display7SEG+0x2b4>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <display7SEG+0x308>)
 800066c:	f001 fd71 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2102      	movs	r1, #2
 8000674:	4822      	ldr	r0, [pc, #136]	; (8000700 <display7SEG+0x308>)
 8000676:	f001 fd6c 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	4820      	ldr	r0, [pc, #128]	; (8000700 <display7SEG+0x308>)
 8000680:	f001 fd67 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	481d      	ldr	r0, [pc, #116]	; (8000700 <display7SEG+0x308>)
 800068a:	f001 fd62 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2110      	movs	r1, #16
 8000692:	481b      	ldr	r0, [pc, #108]	; (8000700 <display7SEG+0x308>)
 8000694:	f001 fd5d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <display7SEG+0x308>)
 800069e:	f001 fd58 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <display7SEG+0x308>)
 80006a8:	f001 fd53 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 9){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b09      	cmp	r3, #9
 80006b0:	d122      	bne.n	80006f8 <display7SEG+0x300>
		HAL_GPIO_WritePin(SEGA0_GPIO_Port, SEGA0_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <display7SEG+0x308>)
 80006b8:	f001 fd4b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <display7SEG+0x308>)
 80006c2:	f001 fd46 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <display7SEG+0x308>)
 80006cc:	f001 fd41 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <display7SEG+0x308>)
 80006d6:	f001 fd3c 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <display7SEG+0x308>)
 80006e0:	f001 fd37 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <display7SEG+0x308>)
 80006ea:	f001 fd32 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <display7SEG+0x308>)
 80006f4:	f001 fd2d 	bl	8002152 <HAL_GPIO_WritePin>
	}
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010c00 	.word	0x40010c00

08000704 <display7SEG_2>:
void display7SEG_2(int num)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	if(num == 0){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d128      	bne.n	8000764 <display7SEG_2+0x60>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	48d2      	ldr	r0, [pc, #840]	; (8000a60 <display7SEG_2+0x35c>)
 8000718:	f001 fd1b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	48cf      	ldr	r0, [pc, #828]	; (8000a60 <display7SEG_2+0x35c>)
 8000724:	f001 fd15 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	48cc      	ldr	r0, [pc, #816]	; (8000a60 <display7SEG_2+0x35c>)
 8000730:	f001 fd0f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	48c9      	ldr	r0, [pc, #804]	; (8000a60 <display7SEG_2+0x35c>)
 800073c:	f001 fd09 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	48c6      	ldr	r0, [pc, #792]	; (8000a60 <display7SEG_2+0x35c>)
 8000748:	f001 fd03 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	48c3      	ldr	r0, [pc, #780]	; (8000a60 <display7SEG_2+0x35c>)
 8000754:	f001 fcfd 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	48c0      	ldr	r0, [pc, #768]	; (8000a60 <display7SEG_2+0x35c>)
 8000760:	f001 fcf7 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 1){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d128      	bne.n	80007bc <display7SEG_2+0xb8>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	48bc      	ldr	r0, [pc, #752]	; (8000a60 <display7SEG_2+0x35c>)
 8000770:	f001 fcef 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	48b9      	ldr	r0, [pc, #740]	; (8000a60 <display7SEG_2+0x35c>)
 800077c:	f001 fce9 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	48b6      	ldr	r0, [pc, #728]	; (8000a60 <display7SEG_2+0x35c>)
 8000788:	f001 fce3 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	48b3      	ldr	r0, [pc, #716]	; (8000a60 <display7SEG_2+0x35c>)
 8000794:	f001 fcdd 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	48b0      	ldr	r0, [pc, #704]	; (8000a60 <display7SEG_2+0x35c>)
 80007a0:	f001 fcd7 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007aa:	48ad      	ldr	r0, [pc, #692]	; (8000a60 <display7SEG_2+0x35c>)
 80007ac:	f001 fcd1 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b6:	48aa      	ldr	r0, [pc, #680]	; (8000a60 <display7SEG_2+0x35c>)
 80007b8:	f001 fccb 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 2){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d128      	bne.n	8000814 <display7SEG_2+0x110>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	48a6      	ldr	r0, [pc, #664]	; (8000a60 <display7SEG_2+0x35c>)
 80007c8:	f001 fcc3 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	48a3      	ldr	r0, [pc, #652]	; (8000a60 <display7SEG_2+0x35c>)
 80007d4:	f001 fcbd 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	48a0      	ldr	r0, [pc, #640]	; (8000a60 <display7SEG_2+0x35c>)
 80007e0:	f001 fcb7 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	489d      	ldr	r0, [pc, #628]	; (8000a60 <display7SEG_2+0x35c>)
 80007ec:	f001 fcb1 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	489a      	ldr	r0, [pc, #616]	; (8000a60 <display7SEG_2+0x35c>)
 80007f8:	f001 fcab 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	4897      	ldr	r0, [pc, #604]	; (8000a60 <display7SEG_2+0x35c>)
 8000804:	f001 fca5 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4894      	ldr	r0, [pc, #592]	; (8000a60 <display7SEG_2+0x35c>)
 8000810:	f001 fc9f 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 3){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d128      	bne.n	800086c <display7SEG_2+0x168>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	4890      	ldr	r0, [pc, #576]	; (8000a60 <display7SEG_2+0x35c>)
 8000820:	f001 fc97 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	488d      	ldr	r0, [pc, #564]	; (8000a60 <display7SEG_2+0x35c>)
 800082c:	f001 fc91 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	488a      	ldr	r0, [pc, #552]	; (8000a60 <display7SEG_2+0x35c>)
 8000838:	f001 fc8b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	4887      	ldr	r0, [pc, #540]	; (8000a60 <display7SEG_2+0x35c>)
 8000844:	f001 fc85 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084e:	4884      	ldr	r0, [pc, #528]	; (8000a60 <display7SEG_2+0x35c>)
 8000850:	f001 fc7f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	4881      	ldr	r0, [pc, #516]	; (8000a60 <display7SEG_2+0x35c>)
 800085c:	f001 fc79 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	487e      	ldr	r0, [pc, #504]	; (8000a60 <display7SEG_2+0x35c>)
 8000868:	f001 fc73 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 4){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d128      	bne.n	80008c4 <display7SEG_2+0x1c0>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	487a      	ldr	r0, [pc, #488]	; (8000a60 <display7SEG_2+0x35c>)
 8000878:	f001 fc6b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	4877      	ldr	r0, [pc, #476]	; (8000a60 <display7SEG_2+0x35c>)
 8000884:	f001 fc65 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088e:	4874      	ldr	r0, [pc, #464]	; (8000a60 <display7SEG_2+0x35c>)
 8000890:	f001 fc5f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	4871      	ldr	r0, [pc, #452]	; (8000a60 <display7SEG_2+0x35c>)
 800089c:	f001 fc59 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	486e      	ldr	r0, [pc, #440]	; (8000a60 <display7SEG_2+0x35c>)
 80008a8:	f001 fc53 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	486b      	ldr	r0, [pc, #428]	; (8000a60 <display7SEG_2+0x35c>)
 80008b4:	f001 fc4d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	4868      	ldr	r0, [pc, #416]	; (8000a60 <display7SEG_2+0x35c>)
 80008c0:	f001 fc47 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 5){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	d128      	bne.n	800091c <display7SEG_2+0x218>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4864      	ldr	r0, [pc, #400]	; (8000a60 <display7SEG_2+0x35c>)
 80008d0:	f001 fc3f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4861      	ldr	r0, [pc, #388]	; (8000a60 <display7SEG_2+0x35c>)
 80008dc:	f001 fc39 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	485e      	ldr	r0, [pc, #376]	; (8000a60 <display7SEG_2+0x35c>)
 80008e8:	f001 fc33 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	485b      	ldr	r0, [pc, #364]	; (8000a60 <display7SEG_2+0x35c>)
 80008f4:	f001 fc2d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	4858      	ldr	r0, [pc, #352]	; (8000a60 <display7SEG_2+0x35c>)
 8000900:	f001 fc27 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	4855      	ldr	r0, [pc, #340]	; (8000a60 <display7SEG_2+0x35c>)
 800090c:	f001 fc21 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	4852      	ldr	r0, [pc, #328]	; (8000a60 <display7SEG_2+0x35c>)
 8000918:	f001 fc1b 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 6){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d128      	bne.n	8000974 <display7SEG_2+0x270>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	484e      	ldr	r0, [pc, #312]	; (8000a60 <display7SEG_2+0x35c>)
 8000928:	f001 fc13 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	484b      	ldr	r0, [pc, #300]	; (8000a60 <display7SEG_2+0x35c>)
 8000934:	f001 fc0d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093e:	4848      	ldr	r0, [pc, #288]	; (8000a60 <display7SEG_2+0x35c>)
 8000940:	f001 fc07 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094a:	4845      	ldr	r0, [pc, #276]	; (8000a60 <display7SEG_2+0x35c>)
 800094c:	f001 fc01 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	4842      	ldr	r0, [pc, #264]	; (8000a60 <display7SEG_2+0x35c>)
 8000958:	f001 fbfb 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	483f      	ldr	r0, [pc, #252]	; (8000a60 <display7SEG_2+0x35c>)
 8000964:	f001 fbf5 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	483c      	ldr	r0, [pc, #240]	; (8000a60 <display7SEG_2+0x35c>)
 8000970:	f001 fbef 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b07      	cmp	r3, #7
 8000978:	d128      	bne.n	80009cc <display7SEG_2+0x2c8>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4838      	ldr	r0, [pc, #224]	; (8000a60 <display7SEG_2+0x35c>)
 8000980:	f001 fbe7 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <display7SEG_2+0x35c>)
 800098c:	f001 fbe1 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	4832      	ldr	r0, [pc, #200]	; (8000a60 <display7SEG_2+0x35c>)
 8000998:	f001 fbdb 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <display7SEG_2+0x35c>)
 80009a4:	f001 fbd5 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ae:	482c      	ldr	r0, [pc, #176]	; (8000a60 <display7SEG_2+0x35c>)
 80009b0:	f001 fbcf 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ba:	4829      	ldr	r0, [pc, #164]	; (8000a60 <display7SEG_2+0x35c>)
 80009bc:	f001 fbc9 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4826      	ldr	r0, [pc, #152]	; (8000a60 <display7SEG_2+0x35c>)
 80009c8:	f001 fbc3 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 8){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d128      	bne.n	8000a24 <display7SEG_2+0x320>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <display7SEG_2+0x35c>)
 80009d8:	f001 fbbb 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	481f      	ldr	r0, [pc, #124]	; (8000a60 <display7SEG_2+0x35c>)
 80009e4:	f001 fbb5 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <display7SEG_2+0x35c>)
 80009f0:	f001 fbaf 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4819      	ldr	r0, [pc, #100]	; (8000a60 <display7SEG_2+0x35c>)
 80009fc:	f001 fba9 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	4816      	ldr	r0, [pc, #88]	; (8000a60 <display7SEG_2+0x35c>)
 8000a08:	f001 fba3 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <display7SEG_2+0x35c>)
 8000a14:	f001 fb9d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <display7SEG_2+0x35c>)
 8000a20:	f001 fb97 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 9){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	d12b      	bne.n	8000a82 <display7SEG_2+0x37e>
		HAL_GPIO_WritePin(SEGB0_GPIO_Port, SEGB0_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <display7SEG_2+0x35c>)
 8000a30:	f001 fb8f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <display7SEG_2+0x35c>)
 8000a3c:	f001 fb89 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <display7SEG_2+0x35c>)
 8000a48:	f001 fb83 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <display7SEG_2+0x35c>)
 8000a54:	f001 fb7d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5e:	e001      	b.n	8000a64 <display7SEG_2+0x360>
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <display7SEG_2+0x388>)
 8000a66:	f001 fb74 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <display7SEG_2+0x388>)
 8000a72:	f001 fb6e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <display7SEG_2+0x388>)
 8000a7e:	f001 fb68 	bl	8002152 <HAL_GPIO_WritePin>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <display7SEG_3>:

void display7SEG_3(int num)
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]

	if(num == 0){
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d129      	bne.n	8000af2 <display7SEG_3+0x62>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aa4:	48d3      	ldr	r0, [pc, #844]	; (8000df4 <display7SEG_3+0x364>)
 8000aa6:	f001 fb54 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab0:	48d0      	ldr	r0, [pc, #832]	; (8000df4 <display7SEG_3+0x364>)
 8000ab2:	f001 fb4e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000abc:	48cd      	ldr	r0, [pc, #820]	; (8000df4 <display7SEG_3+0x364>)
 8000abe:	f001 fb48 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ac8:	48ca      	ldr	r0, [pc, #808]	; (8000df4 <display7SEG_3+0x364>)
 8000aca:	f001 fb42 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, RESET);
 8000ace:	2200      	movs	r2, #0
 8000ad0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ad4:	48c7      	ldr	r0, [pc, #796]	; (8000df4 <display7SEG_3+0x364>)
 8000ad6:	f001 fb3c 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae0:	48c4      	ldr	r0, [pc, #784]	; (8000df4 <display7SEG_3+0x364>)
 8000ae2:	f001 fb36 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, SET);
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aec:	48c1      	ldr	r0, [pc, #772]	; (8000df4 <display7SEG_3+0x364>)
 8000aee:	f001 fb30 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 1){
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	2b01      	cmp	r3, #1
 8000af6:	d129      	bne.n	8000b4c <display7SEG_3+0xbc>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, SET);
 8000af8:	2201      	movs	r2, #1
 8000afa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afe:	48bd      	ldr	r0, [pc, #756]	; (8000df4 <display7SEG_3+0x364>)
 8000b00:	f001 fb27 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000b04:	2200      	movs	r2, #0
 8000b06:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0a:	48ba      	ldr	r0, [pc, #744]	; (8000df4 <display7SEG_3+0x364>)
 8000b0c:	f001 fb21 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000b10:	2200      	movs	r2, #0
 8000b12:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b16:	48b7      	ldr	r0, [pc, #732]	; (8000df4 <display7SEG_3+0x364>)
 8000b18:	f001 fb1b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, SET);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b22:	48b4      	ldr	r0, [pc, #720]	; (8000df4 <display7SEG_3+0x364>)
 8000b24:	f001 fb15 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, SET);
 8000b28:	2201      	movs	r2, #1
 8000b2a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b2e:	48b1      	ldr	r0, [pc, #708]	; (8000df4 <display7SEG_3+0x364>)
 8000b30:	f001 fb0f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3a:	48ae      	ldr	r0, [pc, #696]	; (8000df4 <display7SEG_3+0x364>)
 8000b3c:	f001 fb09 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b46:	48ab      	ldr	r0, [pc, #684]	; (8000df4 <display7SEG_3+0x364>)
 8000b48:	f001 fb03 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 2){
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	2b02      	cmp	r3, #2
 8000b50:	d129      	bne.n	8000ba6 <display7SEG_3+0x116>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b58:	48a6      	ldr	r0, [pc, #664]	; (8000df4 <display7SEG_3+0x364>)
 8000b5a:	f001 fafa 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000b5e:	2200      	movs	r2, #0
 8000b60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b64:	48a3      	ldr	r0, [pc, #652]	; (8000df4 <display7SEG_3+0x364>)
 8000b66:	f001 faf4 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, SET);
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b70:	48a0      	ldr	r0, [pc, #640]	; (8000df4 <display7SEG_3+0x364>)
 8000b72:	f001 faee 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7c:	489d      	ldr	r0, [pc, #628]	; (8000df4 <display7SEG_3+0x364>)
 8000b7e:	f001 fae8 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b88:	489a      	ldr	r0, [pc, #616]	; (8000df4 <display7SEG_3+0x364>)
 8000b8a:	f001 fae2 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, SET);
 8000b8e:	2201      	movs	r2, #1
 8000b90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b94:	4897      	ldr	r0, [pc, #604]	; (8000df4 <display7SEG_3+0x364>)
 8000b96:	f001 fadc 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ba0:	4894      	ldr	r0, [pc, #592]	; (8000df4 <display7SEG_3+0x364>)
 8000ba2:	f001 fad6 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 3){
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	2b03      	cmp	r3, #3
 8000baa:	d129      	bne.n	8000c00 <display7SEG_3+0x170>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000bac:	2200      	movs	r2, #0
 8000bae:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb2:	4890      	ldr	r0, [pc, #576]	; (8000df4 <display7SEG_3+0x364>)
 8000bb4:	f001 facd 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbe:	488d      	ldr	r0, [pc, #564]	; (8000df4 <display7SEG_3+0x364>)
 8000bc0:	f001 fac7 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bca:	488a      	ldr	r0, [pc, #552]	; (8000df4 <display7SEG_3+0x364>)
 8000bcc:	f001 fac1 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd6:	4887      	ldr	r0, [pc, #540]	; (8000df4 <display7SEG_3+0x364>)
 8000bd8:	f001 fabb 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000be2:	4884      	ldr	r0, [pc, #528]	; (8000df4 <display7SEG_3+0x364>)
 8000be4:	f001 fab5 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, SET);
 8000be8:	2201      	movs	r2, #1
 8000bea:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bee:	4881      	ldr	r0, [pc, #516]	; (8000df4 <display7SEG_3+0x364>)
 8000bf0:	f001 faaf 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bfa:	487e      	ldr	r0, [pc, #504]	; (8000df4 <display7SEG_3+0x364>)
 8000bfc:	f001 faa9 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 4){
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2b04      	cmp	r3, #4
 8000c04:	d129      	bne.n	8000c5a <display7SEG_3+0x1ca>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, SET);
 8000c06:	2201      	movs	r2, #1
 8000c08:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c0c:	4879      	ldr	r0, [pc, #484]	; (8000df4 <display7SEG_3+0x364>)
 8000c0e:	f001 faa0 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c18:	4876      	ldr	r0, [pc, #472]	; (8000df4 <display7SEG_3+0x364>)
 8000c1a:	f001 fa9a 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c24:	4873      	ldr	r0, [pc, #460]	; (8000df4 <display7SEG_3+0x364>)
 8000c26:	f001 fa94 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, SET);
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	4870      	ldr	r0, [pc, #448]	; (8000df4 <display7SEG_3+0x364>)
 8000c32:	f001 fa8e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, SET);
 8000c36:	2201      	movs	r2, #1
 8000c38:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3c:	486d      	ldr	r0, [pc, #436]	; (8000df4 <display7SEG_3+0x364>)
 8000c3e:	f001 fa88 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c48:	486a      	ldr	r0, [pc, #424]	; (8000df4 <display7SEG_3+0x364>)
 8000c4a:	f001 fa82 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c54:	4867      	ldr	r0, [pc, #412]	; (8000df4 <display7SEG_3+0x364>)
 8000c56:	f001 fa7c 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 5){
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2b05      	cmp	r3, #5
 8000c5e:	d129      	bne.n	8000cb4 <display7SEG_3+0x224>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000c60:	2200      	movs	r2, #0
 8000c62:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c66:	4863      	ldr	r0, [pc, #396]	; (8000df4 <display7SEG_3+0x364>)
 8000c68:	f001 fa73 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, SET);
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c72:	4860      	ldr	r0, [pc, #384]	; (8000df4 <display7SEG_3+0x364>)
 8000c74:	f001 fa6d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c7e:	485d      	ldr	r0, [pc, #372]	; (8000df4 <display7SEG_3+0x364>)
 8000c80:	f001 fa67 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000c84:	2200      	movs	r2, #0
 8000c86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c8a:	485a      	ldr	r0, [pc, #360]	; (8000df4 <display7SEG_3+0x364>)
 8000c8c:	f001 fa61 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, SET);
 8000c90:	2201      	movs	r2, #1
 8000c92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c96:	4857      	ldr	r0, [pc, #348]	; (8000df4 <display7SEG_3+0x364>)
 8000c98:	f001 fa5b 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, RESET);
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ca2:	4854      	ldr	r0, [pc, #336]	; (8000df4 <display7SEG_3+0x364>)
 8000ca4:	f001 fa55 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cae:	4851      	ldr	r0, [pc, #324]	; (8000df4 <display7SEG_3+0x364>)
 8000cb0:	f001 fa4f 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 6){
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	2b06      	cmp	r3, #6
 8000cb8:	d129      	bne.n	8000d0e <display7SEG_3+0x27e>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cc0:	484c      	ldr	r0, [pc, #304]	; (8000df4 <display7SEG_3+0x364>)
 8000cc2:	f001 fa46 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, SET);
 8000cc6:	2201      	movs	r2, #1
 8000cc8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ccc:	4849      	ldr	r0, [pc, #292]	; (8000df4 <display7SEG_3+0x364>)
 8000cce:	f001 fa40 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cd8:	4846      	ldr	r0, [pc, #280]	; (8000df4 <display7SEG_3+0x364>)
 8000cda:	f001 fa3a 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	4843      	ldr	r0, [pc, #268]	; (8000df4 <display7SEG_3+0x364>)
 8000ce6:	f001 fa34 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, RESET);
 8000cea:	2200      	movs	r2, #0
 8000cec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cf0:	4840      	ldr	r0, [pc, #256]	; (8000df4 <display7SEG_3+0x364>)
 8000cf2:	f001 fa2e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, RESET);
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cfc:	483d      	ldr	r0, [pc, #244]	; (8000df4 <display7SEG_3+0x364>)
 8000cfe:	f001 fa28 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000d02:	2200      	movs	r2, #0
 8000d04:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d08:	483a      	ldr	r0, [pc, #232]	; (8000df4 <display7SEG_3+0x364>)
 8000d0a:	f001 fa22 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2b07      	cmp	r3, #7
 8000d12:	d129      	bne.n	8000d68 <display7SEG_3+0x2d8>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000d14:	2200      	movs	r2, #0
 8000d16:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d1a:	4836      	ldr	r0, [pc, #216]	; (8000df4 <display7SEG_3+0x364>)
 8000d1c:	f001 fa19 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000d20:	2200      	movs	r2, #0
 8000d22:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d26:	4833      	ldr	r0, [pc, #204]	; (8000df4 <display7SEG_3+0x364>)
 8000d28:	f001 fa13 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d32:	4830      	ldr	r0, [pc, #192]	; (8000df4 <display7SEG_3+0x364>)
 8000d34:	f001 fa0d 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, SET);
 8000d38:	2201      	movs	r2, #1
 8000d3a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d3e:	482d      	ldr	r0, [pc, #180]	; (8000df4 <display7SEG_3+0x364>)
 8000d40:	f001 fa07 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, SET);
 8000d44:	2201      	movs	r2, #1
 8000d46:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d4a:	482a      	ldr	r0, [pc, #168]	; (8000df4 <display7SEG_3+0x364>)
 8000d4c:	f001 fa01 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, SET);
 8000d50:	2201      	movs	r2, #1
 8000d52:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d56:	4827      	ldr	r0, [pc, #156]	; (8000df4 <display7SEG_3+0x364>)
 8000d58:	f001 f9fb 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, SET);
 8000d5c:	2201      	movs	r2, #1
 8000d5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d62:	4824      	ldr	r0, [pc, #144]	; (8000df4 <display7SEG_3+0x364>)
 8000d64:	f001 f9f5 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 8){
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	2b08      	cmp	r3, #8
 8000d6c:	d129      	bne.n	8000dc2 <display7SEG_3+0x332>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000d6e:	2200      	movs	r2, #0
 8000d70:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d74:	481f      	ldr	r0, [pc, #124]	; (8000df4 <display7SEG_3+0x364>)
 8000d76:	f001 f9ec 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d80:	481c      	ldr	r0, [pc, #112]	; (8000df4 <display7SEG_3+0x364>)
 8000d82:	f001 f9e6 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d8c:	4819      	ldr	r0, [pc, #100]	; (8000df4 <display7SEG_3+0x364>)
 8000d8e:	f001 f9e0 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000d92:	2200      	movs	r2, #0
 8000d94:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d98:	4816      	ldr	r0, [pc, #88]	; (8000df4 <display7SEG_3+0x364>)
 8000d9a:	f001 f9da 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, RESET);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000da4:	4813      	ldr	r0, [pc, #76]	; (8000df4 <display7SEG_3+0x364>)
 8000da6:	f001 f9d4 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, RESET);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000db0:	4810      	ldr	r0, [pc, #64]	; (8000df4 <display7SEG_3+0x364>)
 8000db2:	f001 f9ce 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <display7SEG_3+0x364>)
 8000dbe:	f001 f9c8 	bl	8002152 <HAL_GPIO_WritePin>
	}
	if(num == 9){
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2b09      	cmp	r3, #9
 8000dc6:	d12c      	bne.n	8000e22 <display7SEG_3+0x392>
		HAL_GPIO_WritePin(SEGC0_GPIO_Port, SEGC0_Pin, RESET);
 8000dc8:	2200      	movs	r2, #0
 8000dca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dce:	4809      	ldr	r0, [pc, #36]	; (8000df4 <display7SEG_3+0x364>)
 8000dd0:	f001 f9bf 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC1_GPIO_Port, SEGC1_Pin, RESET);
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4806      	ldr	r0, [pc, #24]	; (8000df4 <display7SEG_3+0x364>)
 8000ddc:	f001 f9b9 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC2_GPIO_Port, SEGC2_Pin, RESET);
 8000de0:	2200      	movs	r2, #0
 8000de2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000de6:	4803      	ldr	r0, [pc, #12]	; (8000df4 <display7SEG_3+0x364>)
 8000de8:	f001 f9b3 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC3_GPIO_Port, SEGC3_Pin, RESET);
 8000dec:	2200      	movs	r2, #0
 8000dee:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000df2:	e001      	b.n	8000df8 <display7SEG_3+0x368>
 8000df4:	40010800 	.word	0x40010800
 8000df8:	480c      	ldr	r0, [pc, #48]	; (8000e2c <display7SEG_3+0x39c>)
 8000dfa:	f001 f9aa 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC4_GPIO_Port, SEGC4_Pin, SET);
 8000dfe:	2201      	movs	r2, #1
 8000e00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <display7SEG_3+0x39c>)
 8000e06:	f001 f9a4 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC5_GPIO_Port, SEGC5_Pin, RESET);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <display7SEG_3+0x39c>)
 8000e12:	f001 f99e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGC6_GPIO_Port, SEGC6_Pin, RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e1c:	4803      	ldr	r0, [pc, #12]	; (8000e2c <display7SEG_3+0x39c>)
 8000e1e:	f001 f998 	bl	8002152 <HAL_GPIO_WritePin>
	}
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40010800 	.word	0x40010800

08000e30 <fsm_automatic_run>:
#include "software_timer.h"
#include "main.h"
#include "display_led.h"


void fsm_automatic_run(){
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
	switch(status){
 8000e34:	4b8a      	ldr	r3, [pc, #552]	; (8001060 <fsm_automatic_run+0x230>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	3b01      	subs	r3, #1
 8000e3a:	2b03      	cmp	r3, #3
 8000e3c:	f200 8106 	bhi.w	800104c <fsm_automatic_run+0x21c>
 8000e40:	a201      	add	r2, pc, #4	; (adr r2, 8000e48 <fsm_automatic_run+0x18>)
 8000e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e46:	bf00      	nop
 8000e48:	08000e59 	.word	0x08000e59
 8000e4c:	08000e7d 	.word	0x08000e7d
 8000e50:	08000f19 	.word	0x08000f19
 8000e54:	08000fb3 	.word	0x08000fb3
	case INIT:
		status = AUTO_RED;
 8000e58:	4b81      	ldr	r3, [pc, #516]	; (8001060 <fsm_automatic_run+0x230>)
 8000e5a:	2202      	movs	r2, #2
 8000e5c:	601a      	str	r2, [r3, #0]
		setTimer1(MAX_RED*100);
 8000e5e:	4b81      	ldr	r3, [pc, #516]	; (8001064 <fsm_automatic_run+0x234>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	2264      	movs	r2, #100	; 0x64
 8000e64:	fb02 f303 	mul.w	r3, r2, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f000 fd17 	bl	800189c <setTimer1>
		setTimer2(100);
 8000e6e:	2064      	movs	r0, #100	; 0x64
 8000e70:	f000 fd28 	bl	80018c4 <setTimer2>
		display7SEG_2(1);
 8000e74:	2001      	movs	r0, #1
 8000e76:	f7ff fc45 	bl	8000704 <display7SEG_2>
		break;
 8000e7a:	e0ee      	b.n	800105a <fsm_automatic_run+0x22a>
	case AUTO_RED:
		display7SEG_2(1);
 8000e7c:	2001      	movs	r0, #1
 8000e7e:	f7ff fc41 	bl	8000704 <display7SEG_2>
		if(num_red == 0) num_red = MAX_RED;
 8000e82:	4b79      	ldr	r3, [pc, #484]	; (8001068 <fsm_automatic_run+0x238>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d103      	bne.n	8000e92 <fsm_automatic_run+0x62>
 8000e8a:	4b76      	ldr	r3, [pc, #472]	; (8001064 <fsm_automatic_run+0x234>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	4a76      	ldr	r2, [pc, #472]	; (8001068 <fsm_automatic_run+0x238>)
 8000e90:	6013      	str	r3, [r2, #0]
		display7SEG(num_red);
 8000e92:	4b75      	ldr	r3, [pc, #468]	; (8001068 <fsm_automatic_run+0x238>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff faae 	bl	80003f8 <display7SEG>
		if(timer2_flag == 1){
 8000e9c:	4b73      	ldr	r3, [pc, #460]	; (800106c <fsm_automatic_run+0x23c>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d107      	bne.n	8000eb4 <fsm_automatic_run+0x84>
			num_red--;
 8000ea4:	4b70      	ldr	r3, [pc, #448]	; (8001068 <fsm_automatic_run+0x238>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	3b01      	subs	r3, #1
 8000eaa:	4a6f      	ldr	r2, [pc, #444]	; (8001068 <fsm_automatic_run+0x238>)
 8000eac:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000eae:	2064      	movs	r0, #100	; 0x64
 8000eb0:	f000 fd08 	bl	80018c4 <setTimer2>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	2140      	movs	r1, #64	; 0x40
 8000eb8:	486d      	ldr	r0, [pc, #436]	; (8001070 <fsm_automatic_run+0x240>)
 8000eba:	f001 f94a 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000ebe:	2201      	movs	r2, #1
 8000ec0:	2180      	movs	r1, #128	; 0x80
 8000ec2:	486b      	ldr	r0, [pc, #428]	; (8001070 <fsm_automatic_run+0x240>)
 8000ec4:	f001 f945 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ece:	4868      	ldr	r0, [pc, #416]	; (8001070 <fsm_automatic_run+0x240>)
 8000ed0:	f001 f93f 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000ed4:	4b67      	ldr	r3, [pc, #412]	; (8001074 <fsm_automatic_run+0x244>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d110      	bne.n	8000efe <fsm_automatic_run+0xce>
			status = AUTO_GREEN;
 8000edc:	4b60      	ldr	r3, [pc, #384]	; (8001060 <fsm_automatic_run+0x230>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	601a      	str	r2, [r3, #0]
			setTimer1(MAX_GREEN*100);
 8000ee2:	4b65      	ldr	r3, [pc, #404]	; (8001078 <fsm_automatic_run+0x248>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	2264      	movs	r2, #100	; 0x64
 8000ee8:	fb02 f303 	mul.w	r3, r2, r3
 8000eec:	4618      	mov	r0, r3
 8000eee:	f000 fcd5 	bl	800189c <setTimer1>
			num_green =0;
 8000ef2:	4b62      	ldr	r3, [pc, #392]	; (800107c <fsm_automatic_run+0x24c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000ef8:	2064      	movs	r0, #100	; 0x64
 8000efa:	f000 fce3 	bl	80018c4 <setTimer2>
		}
		if(is_Button1_Pressed() == 1)
 8000efe:	f7ff f925 	bl	800014c <is_Button1_Pressed>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	f040 80a3 	bne.w	8001050 <fsm_automatic_run+0x220>
		{
			status = MAN_RED;
 8000f0a:	4b55      	ldr	r3, [pc, #340]	; (8001060 <fsm_automatic_run+0x230>)
 8000f0c:	220c      	movs	r2, #12
 8000f0e:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000f10:	2032      	movs	r0, #50	; 0x32
 8000f12:	f000 fcd7 	bl	80018c4 <setTimer2>
		}
		break;
 8000f16:	e09b      	b.n	8001050 <fsm_automatic_run+0x220>
	case AUTO_GREEN:
		display7SEG_2(1);
 8000f18:	2001      	movs	r0, #1
 8000f1a:	f7ff fbf3 	bl	8000704 <display7SEG_2>
		if(num_green == 0) num_green = MAX_GREEN;
 8000f1e:	4b57      	ldr	r3, [pc, #348]	; (800107c <fsm_automatic_run+0x24c>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d103      	bne.n	8000f2e <fsm_automatic_run+0xfe>
 8000f26:	4b54      	ldr	r3, [pc, #336]	; (8001078 <fsm_automatic_run+0x248>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a54      	ldr	r2, [pc, #336]	; (800107c <fsm_automatic_run+0x24c>)
 8000f2c:	6013      	str	r3, [r2, #0]
		display7SEG(num_green);
 8000f2e:	4b53      	ldr	r3, [pc, #332]	; (800107c <fsm_automatic_run+0x24c>)
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f7ff fa60 	bl	80003f8 <display7SEG>
		if(timer2_flag == 1){
 8000f38:	4b4c      	ldr	r3, [pc, #304]	; (800106c <fsm_automatic_run+0x23c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b01      	cmp	r3, #1
 8000f3e:	d107      	bne.n	8000f50 <fsm_automatic_run+0x120>
			num_green--;
 8000f40:	4b4e      	ldr	r3, [pc, #312]	; (800107c <fsm_automatic_run+0x24c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3b01      	subs	r3, #1
 8000f46:	4a4d      	ldr	r2, [pc, #308]	; (800107c <fsm_automatic_run+0x24c>)
 8000f48:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000f4a:	2064      	movs	r0, #100	; 0x64
 8000f4c:	f000 fcba 	bl	80018c4 <setTimer2>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000f50:	2201      	movs	r2, #1
 8000f52:	2140      	movs	r1, #64	; 0x40
 8000f54:	4846      	ldr	r0, [pc, #280]	; (8001070 <fsm_automatic_run+0x240>)
 8000f56:	f001 f8fc 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	2180      	movs	r1, #128	; 0x80
 8000f5e:	4844      	ldr	r0, [pc, #272]	; (8001070 <fsm_automatic_run+0x240>)
 8000f60:	f001 f8f7 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f6a:	4841      	ldr	r0, [pc, #260]	; (8001070 <fsm_automatic_run+0x240>)
 8000f6c:	f001 f8f1 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000f70:	4b40      	ldr	r3, [pc, #256]	; (8001074 <fsm_automatic_run+0x244>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d110      	bne.n	8000f9a <fsm_automatic_run+0x16a>
			status = AUTO_YELLOW;
 8000f78:	4b39      	ldr	r3, [pc, #228]	; (8001060 <fsm_automatic_run+0x230>)
 8000f7a:	2204      	movs	r2, #4
 8000f7c:	601a      	str	r2, [r3, #0]
			num_yellow=0;
 8000f7e:	4b40      	ldr	r3, [pc, #256]	; (8001080 <fsm_automatic_run+0x250>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
			setTimer1(MAX_YELLOW*100);
 8000f84:	4b3f      	ldr	r3, [pc, #252]	; (8001084 <fsm_automatic_run+0x254>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	2264      	movs	r2, #100	; 0x64
 8000f8a:	fb02 f303 	mul.w	r3, r2, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f000 fc84 	bl	800189c <setTimer1>
			setTimer2(100);
 8000f94:	2064      	movs	r0, #100	; 0x64
 8000f96:	f000 fc95 	bl	80018c4 <setTimer2>
		}
		if(is_Button1_Pressed() == 1)
 8000f9a:	f7ff f8d7 	bl	800014c <is_Button1_Pressed>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b01      	cmp	r3, #1
 8000fa2:	d157      	bne.n	8001054 <fsm_automatic_run+0x224>
		{
			status = MAN_RED;
 8000fa4:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <fsm_automatic_run+0x230>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000faa:	2032      	movs	r0, #50	; 0x32
 8000fac:	f000 fc8a 	bl	80018c4 <setTimer2>
		}
		break;
 8000fb0:	e050      	b.n	8001054 <fsm_automatic_run+0x224>
	case AUTO_YELLOW:
		display7SEG_2(1);
 8000fb2:	2001      	movs	r0, #1
 8000fb4:	f7ff fba6 	bl	8000704 <display7SEG_2>
		if(num_yellow == 0) num_yellow = MAX_YELLOW;
 8000fb8:	4b31      	ldr	r3, [pc, #196]	; (8001080 <fsm_automatic_run+0x250>)
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d103      	bne.n	8000fc8 <fsm_automatic_run+0x198>
 8000fc0:	4b30      	ldr	r3, [pc, #192]	; (8001084 <fsm_automatic_run+0x254>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a2e      	ldr	r2, [pc, #184]	; (8001080 <fsm_automatic_run+0x250>)
 8000fc6:	6013      	str	r3, [r2, #0]
		display7SEG(num_yellow);
 8000fc8:	4b2d      	ldr	r3, [pc, #180]	; (8001080 <fsm_automatic_run+0x250>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fa13 	bl	80003f8 <display7SEG>
		if(timer2_flag == 1){
 8000fd2:	4b26      	ldr	r3, [pc, #152]	; (800106c <fsm_automatic_run+0x23c>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d107      	bne.n	8000fea <fsm_automatic_run+0x1ba>
			num_yellow--;
 8000fda:	4b29      	ldr	r3, [pc, #164]	; (8001080 <fsm_automatic_run+0x250>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	3b01      	subs	r3, #1
 8000fe0:	4a27      	ldr	r2, [pc, #156]	; (8001080 <fsm_automatic_run+0x250>)
 8000fe2:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000fe4:	2064      	movs	r0, #100	; 0x64
 8000fe6:	f000 fc6d 	bl	80018c4 <setTimer2>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000fea:	2201      	movs	r2, #1
 8000fec:	2140      	movs	r1, #64	; 0x40
 8000fee:	4820      	ldr	r0, [pc, #128]	; (8001070 <fsm_automatic_run+0x240>)
 8000ff0:	f001 f8af 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000ff4:	2201      	movs	r2, #1
 8000ff6:	2180      	movs	r1, #128	; 0x80
 8000ff8:	481d      	ldr	r0, [pc, #116]	; (8001070 <fsm_automatic_run+0x240>)
 8000ffa:	f001 f8aa 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001004:	481a      	ldr	r0, [pc, #104]	; (8001070 <fsm_automatic_run+0x240>)
 8001006:	f001 f8a4 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <fsm_automatic_run+0x244>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2b01      	cmp	r3, #1
 8001010:	d110      	bne.n	8001034 <fsm_automatic_run+0x204>
			status = AUTO_RED;
 8001012:	4b13      	ldr	r3, [pc, #76]	; (8001060 <fsm_automatic_run+0x230>)
 8001014:	2202      	movs	r2, #2
 8001016:	601a      	str	r2, [r3, #0]
			num_red=0;
 8001018:	4b13      	ldr	r3, [pc, #76]	; (8001068 <fsm_automatic_run+0x238>)
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
			setTimer1(MAX_RED*100);
 800101e:	4b11      	ldr	r3, [pc, #68]	; (8001064 <fsm_automatic_run+0x234>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2264      	movs	r2, #100	; 0x64
 8001024:	fb02 f303 	mul.w	r3, r2, r3
 8001028:	4618      	mov	r0, r3
 800102a:	f000 fc37 	bl	800189c <setTimer1>
			setTimer2(100);
 800102e:	2064      	movs	r0, #100	; 0x64
 8001030:	f000 fc48 	bl	80018c4 <setTimer2>
		}
		if(is_Button1_Pressed() == 1)
 8001034:	f7ff f88a 	bl	800014c <is_Button1_Pressed>
 8001038:	4603      	mov	r3, r0
 800103a:	2b01      	cmp	r3, #1
 800103c:	d10c      	bne.n	8001058 <fsm_automatic_run+0x228>
		{
			status = MAN_RED;
 800103e:	4b08      	ldr	r3, [pc, #32]	; (8001060 <fsm_automatic_run+0x230>)
 8001040:	220c      	movs	r2, #12
 8001042:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8001044:	2032      	movs	r0, #50	; 0x32
 8001046:	f000 fc3d 	bl	80018c4 <setTimer2>
		}
		break;
 800104a:	e005      	b.n	8001058 <fsm_automatic_run+0x228>
	default:
		break;
 800104c:	bf00      	nop
 800104e:	e004      	b.n	800105a <fsm_automatic_run+0x22a>
		break;
 8001050:	bf00      	nop
 8001052:	e002      	b.n	800105a <fsm_automatic_run+0x22a>
		break;
 8001054:	bf00      	nop
 8001056:	e000      	b.n	800105a <fsm_automatic_run+0x22a>
		break;
 8001058:	bf00      	nop
	}
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	20000080 	.word	0x20000080
 8001064:	20000034 	.word	0x20000034
 8001068:	20000088 	.word	0x20000088
 800106c:	200000b4 	.word	0x200000b4
 8001070:	40010800 	.word	0x40010800
 8001074:	200000b0 	.word	0x200000b0
 8001078:	20000038 	.word	0x20000038
 800107c:	2000008c 	.word	0x2000008c
 8001080:	20000090 	.word	0x20000090
 8001084:	2000003c 	.word	0x2000003c

08001088 <fsm_automatic_2_run>:
//---fsm_automatic_2-------
void fsm_automatic_2_run(){
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
	switch(status_2){
 800108c:	4b81      	ldr	r3, [pc, #516]	; (8001294 <fsm_automatic_2_run+0x20c>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	3b01      	subs	r3, #1
 8001092:	2b03      	cmp	r3, #3
 8001094:	f200 80f4 	bhi.w	8001280 <fsm_automatic_2_run+0x1f8>
 8001098:	a201      	add	r2, pc, #4	; (adr r2, 80010a0 <fsm_automatic_2_run+0x18>)
 800109a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800109e:	bf00      	nop
 80010a0:	080010b1 	.word	0x080010b1
 80010a4:	080010cf 	.word	0x080010cf
 80010a8:	08001161 	.word	0x08001161
 80010ac:	080011f1 	.word	0x080011f1
	case INIT:
		status_2 = AUTO_GREEN;
 80010b0:	4b78      	ldr	r3, [pc, #480]	; (8001294 <fsm_automatic_2_run+0x20c>)
 80010b2:	2203      	movs	r2, #3
 80010b4:	601a      	str	r2, [r3, #0]
		setTimer3(MAX_GREEN*100);
 80010b6:	4b78      	ldr	r3, [pc, #480]	; (8001298 <fsm_automatic_2_run+0x210>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	2264      	movs	r2, #100	; 0x64
 80010bc:	fb02 f303 	mul.w	r3, r2, r3
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fc13 	bl	80018ec <setTimer3>
		setTimer4(100);
 80010c6:	2064      	movs	r0, #100	; 0x64
 80010c8:	f000 fc24 	bl	8001914 <setTimer4>
		break;
 80010cc:	e0df      	b.n	800128e <fsm_automatic_2_run+0x206>
	case AUTO_RED:
		if(num_red2 == 0) num_red2 = MAX_RED2;
 80010ce:	4b73      	ldr	r3, [pc, #460]	; (800129c <fsm_automatic_2_run+0x214>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d103      	bne.n	80010de <fsm_automatic_2_run+0x56>
 80010d6:	4b72      	ldr	r3, [pc, #456]	; (80012a0 <fsm_automatic_2_run+0x218>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a70      	ldr	r2, [pc, #448]	; (800129c <fsm_automatic_2_run+0x214>)
 80010dc:	6013      	str	r3, [r2, #0]
		display7SEG_3(num_red2);
 80010de:	4b6f      	ldr	r3, [pc, #444]	; (800129c <fsm_automatic_2_run+0x214>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fcd4 	bl	8000a90 <display7SEG_3>
		if(timer4_flag == 1){
 80010e8:	4b6e      	ldr	r3, [pc, #440]	; (80012a4 <fsm_automatic_2_run+0x21c>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b01      	cmp	r3, #1
 80010ee:	d107      	bne.n	8001100 <fsm_automatic_2_run+0x78>
			num_red2--;
 80010f0:	4b6a      	ldr	r3, [pc, #424]	; (800129c <fsm_automatic_2_run+0x214>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	3b01      	subs	r3, #1
 80010f6:	4a69      	ldr	r2, [pc, #420]	; (800129c <fsm_automatic_2_run+0x214>)
 80010f8:	6013      	str	r3, [r2, #0]
			setTimer4(100);
 80010fa:	2064      	movs	r0, #100	; 0x64
 80010fc:	f000 fc0a 	bl	8001914 <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 8001100:	2200      	movs	r2, #0
 8001102:	2104      	movs	r1, #4
 8001104:	4868      	ldr	r0, [pc, #416]	; (80012a8 <fsm_automatic_2_run+0x220>)
 8001106:	f001 f824 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800110a:	2201      	movs	r2, #1
 800110c:	2108      	movs	r1, #8
 800110e:	4866      	ldr	r0, [pc, #408]	; (80012a8 <fsm_automatic_2_run+0x220>)
 8001110:	f001 f81f 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001114:	2201      	movs	r2, #1
 8001116:	2110      	movs	r1, #16
 8001118:	4863      	ldr	r0, [pc, #396]	; (80012a8 <fsm_automatic_2_run+0x220>)
 800111a:	f001 f81a 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 800111e:	4b63      	ldr	r3, [pc, #396]	; (80012ac <fsm_automatic_2_run+0x224>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b01      	cmp	r3, #1
 8001124:	d110      	bne.n	8001148 <fsm_automatic_2_run+0xc0>
			status_2 = AUTO_GREEN;
 8001126:	4b5b      	ldr	r3, [pc, #364]	; (8001294 <fsm_automatic_2_run+0x20c>)
 8001128:	2203      	movs	r2, #3
 800112a:	601a      	str	r2, [r3, #0]
			setTimer3(MAX_GREEN2*100);
 800112c:	4b60      	ldr	r3, [pc, #384]	; (80012b0 <fsm_automatic_2_run+0x228>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2264      	movs	r2, #100	; 0x64
 8001132:	fb02 f303 	mul.w	r3, r2, r3
 8001136:	4618      	mov	r0, r3
 8001138:	f000 fbd8 	bl	80018ec <setTimer3>
			num_green2 =0;
 800113c:	4b5d      	ldr	r3, [pc, #372]	; (80012b4 <fsm_automatic_2_run+0x22c>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
			setTimer4(100);
 8001142:	2064      	movs	r0, #100	; 0x64
 8001144:	f000 fbe6 	bl	8001914 <setTimer4>
		}
		if(status == MAN_RED)
 8001148:	4b5b      	ldr	r3, [pc, #364]	; (80012b8 <fsm_automatic_2_run+0x230>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2b0c      	cmp	r3, #12
 800114e:	f040 8099 	bne.w	8001284 <fsm_automatic_2_run+0x1fc>
		{
			status_2 = MAN_RED;
 8001152:	4b50      	ldr	r3, [pc, #320]	; (8001294 <fsm_automatic_2_run+0x20c>)
 8001154:	220c      	movs	r2, #12
 8001156:	601a      	str	r2, [r3, #0]
			setTimer4(50);
 8001158:	2032      	movs	r0, #50	; 0x32
 800115a:	f000 fbdb 	bl	8001914 <setTimer4>

		}
		break;
 800115e:	e091      	b.n	8001284 <fsm_automatic_2_run+0x1fc>
	case AUTO_GREEN:
		if(num_green2 == 0) num_green2 = MAX_GREEN2;
 8001160:	4b54      	ldr	r3, [pc, #336]	; (80012b4 <fsm_automatic_2_run+0x22c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d103      	bne.n	8001170 <fsm_automatic_2_run+0xe8>
 8001168:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <fsm_automatic_2_run+0x228>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4a51      	ldr	r2, [pc, #324]	; (80012b4 <fsm_automatic_2_run+0x22c>)
 800116e:	6013      	str	r3, [r2, #0]
		display7SEG_3(num_green2);
 8001170:	4b50      	ldr	r3, [pc, #320]	; (80012b4 <fsm_automatic_2_run+0x22c>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fc8b 	bl	8000a90 <display7SEG_3>
		if(timer4_flag == 1){
 800117a:	4b4a      	ldr	r3, [pc, #296]	; (80012a4 <fsm_automatic_2_run+0x21c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	2b01      	cmp	r3, #1
 8001180:	d107      	bne.n	8001192 <fsm_automatic_2_run+0x10a>
			num_green2--;
 8001182:	4b4c      	ldr	r3, [pc, #304]	; (80012b4 <fsm_automatic_2_run+0x22c>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	3b01      	subs	r3, #1
 8001188:	4a4a      	ldr	r2, [pc, #296]	; (80012b4 <fsm_automatic_2_run+0x22c>)
 800118a:	6013      	str	r3, [r2, #0]
			setTimer4(100);
 800118c:	2064      	movs	r0, #100	; 0x64
 800118e:	f000 fbc1 	bl	8001914 <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001192:	2201      	movs	r2, #1
 8001194:	2104      	movs	r1, #4
 8001196:	4844      	ldr	r0, [pc, #272]	; (80012a8 <fsm_automatic_2_run+0x220>)
 8001198:	f000 ffdb 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 800119c:	2200      	movs	r2, #0
 800119e:	2108      	movs	r1, #8
 80011a0:	4841      	ldr	r0, [pc, #260]	; (80012a8 <fsm_automatic_2_run+0x220>)
 80011a2:	f000 ffd6 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80011a6:	2201      	movs	r2, #1
 80011a8:	2110      	movs	r1, #16
 80011aa:	483f      	ldr	r0, [pc, #252]	; (80012a8 <fsm_automatic_2_run+0x220>)
 80011ac:	f000 ffd1 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 80011b0:	4b3e      	ldr	r3, [pc, #248]	; (80012ac <fsm_automatic_2_run+0x224>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	2b01      	cmp	r3, #1
 80011b6:	d110      	bne.n	80011da <fsm_automatic_2_run+0x152>
			status_2 = AUTO_YELLOW;
 80011b8:	4b36      	ldr	r3, [pc, #216]	; (8001294 <fsm_automatic_2_run+0x20c>)
 80011ba:	2204      	movs	r2, #4
 80011bc:	601a      	str	r2, [r3, #0]
			num_yellow2=0;
 80011be:	4b3f      	ldr	r3, [pc, #252]	; (80012bc <fsm_automatic_2_run+0x234>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
			setTimer3(MAX_YELLOW2*100);
 80011c4:	4b3e      	ldr	r3, [pc, #248]	; (80012c0 <fsm_automatic_2_run+0x238>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2264      	movs	r2, #100	; 0x64
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4618      	mov	r0, r3
 80011d0:	f000 fb8c 	bl	80018ec <setTimer3>
			setTimer4(100);
 80011d4:	2064      	movs	r0, #100	; 0x64
 80011d6:	f000 fb9d 	bl	8001914 <setTimer4>
		}
		if(status == MAN_RED)
 80011da:	4b37      	ldr	r3, [pc, #220]	; (80012b8 <fsm_automatic_2_run+0x230>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	2b0c      	cmp	r3, #12
 80011e0:	d152      	bne.n	8001288 <fsm_automatic_2_run+0x200>
		{
			status_2 = MAN_RED;
 80011e2:	4b2c      	ldr	r3, [pc, #176]	; (8001294 <fsm_automatic_2_run+0x20c>)
 80011e4:	220c      	movs	r2, #12
 80011e6:	601a      	str	r2, [r3, #0]
			setTimer4(50);
 80011e8:	2032      	movs	r0, #50	; 0x32
 80011ea:	f000 fb93 	bl	8001914 <setTimer4>

		}
		break;
 80011ee:	e04b      	b.n	8001288 <fsm_automatic_2_run+0x200>
	case AUTO_YELLOW:
		if(num_yellow2 == 0) num_yellow2 = MAX_YELLOW2;
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <fsm_automatic_2_run+0x234>)
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d103      	bne.n	8001200 <fsm_automatic_2_run+0x178>
 80011f8:	4b31      	ldr	r3, [pc, #196]	; (80012c0 <fsm_automatic_2_run+0x238>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a2f      	ldr	r2, [pc, #188]	; (80012bc <fsm_automatic_2_run+0x234>)
 80011fe:	6013      	str	r3, [r2, #0]
		display7SEG_3(num_yellow2);
 8001200:	4b2e      	ldr	r3, [pc, #184]	; (80012bc <fsm_automatic_2_run+0x234>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff fc43 	bl	8000a90 <display7SEG_3>
		if(timer4_flag == 1){
 800120a:	4b26      	ldr	r3, [pc, #152]	; (80012a4 <fsm_automatic_2_run+0x21c>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	2b01      	cmp	r3, #1
 8001210:	d107      	bne.n	8001222 <fsm_automatic_2_run+0x19a>
			num_yellow2--;
 8001212:	4b2a      	ldr	r3, [pc, #168]	; (80012bc <fsm_automatic_2_run+0x234>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	3b01      	subs	r3, #1
 8001218:	4a28      	ldr	r2, [pc, #160]	; (80012bc <fsm_automatic_2_run+0x234>)
 800121a:	6013      	str	r3, [r2, #0]
			setTimer4(100);
 800121c:	2064      	movs	r0, #100	; 0x64
 800121e:	f000 fb79 	bl	8001914 <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 8001222:	2201      	movs	r2, #1
 8001224:	2104      	movs	r1, #4
 8001226:	4820      	ldr	r0, [pc, #128]	; (80012a8 <fsm_automatic_2_run+0x220>)
 8001228:	f000 ff93 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 800122c:	2201      	movs	r2, #1
 800122e:	2108      	movs	r1, #8
 8001230:	481d      	ldr	r0, [pc, #116]	; (80012a8 <fsm_automatic_2_run+0x220>)
 8001232:	f000 ff8e 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 8001236:	2200      	movs	r2, #0
 8001238:	2110      	movs	r1, #16
 800123a:	481b      	ldr	r0, [pc, #108]	; (80012a8 <fsm_automatic_2_run+0x220>)
 800123c:	f000 ff89 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <fsm_automatic_2_run+0x224>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d110      	bne.n	800126a <fsm_automatic_2_run+0x1e2>
			status_2 = AUTO_RED;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <fsm_automatic_2_run+0x20c>)
 800124a:	2202      	movs	r2, #2
 800124c:	601a      	str	r2, [r3, #0]
			num_red2=0;
 800124e:	4b13      	ldr	r3, [pc, #76]	; (800129c <fsm_automatic_2_run+0x214>)
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
			setTimer3(MAX_RED2*100);
 8001254:	4b12      	ldr	r3, [pc, #72]	; (80012a0 <fsm_automatic_2_run+0x218>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	2264      	movs	r2, #100	; 0x64
 800125a:	fb02 f303 	mul.w	r3, r2, r3
 800125e:	4618      	mov	r0, r3
 8001260:	f000 fb44 	bl	80018ec <setTimer3>
			setTimer4(100);
 8001264:	2064      	movs	r0, #100	; 0x64
 8001266:	f000 fb55 	bl	8001914 <setTimer4>
		}
		if(status_2 == MAN_RED)
 800126a:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <fsm_automatic_2_run+0x20c>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	2b0c      	cmp	r3, #12
 8001270:	d10c      	bne.n	800128c <fsm_automatic_2_run+0x204>
		{
			status_2 = MAN_RED;
 8001272:	4b08      	ldr	r3, [pc, #32]	; (8001294 <fsm_automatic_2_run+0x20c>)
 8001274:	220c      	movs	r2, #12
 8001276:	601a      	str	r2, [r3, #0]
			setTimer4(50);
 8001278:	2032      	movs	r0, #50	; 0x32
 800127a:	f000 fb4b 	bl	8001914 <setTimer4>
		}
		break;
 800127e:	e005      	b.n	800128c <fsm_automatic_2_run+0x204>
	default:
		break;
 8001280:	bf00      	nop
 8001282:	e004      	b.n	800128e <fsm_automatic_2_run+0x206>
		break;
 8001284:	bf00      	nop
 8001286:	e002      	b.n	800128e <fsm_automatic_2_run+0x206>
		break;
 8001288:	bf00      	nop
 800128a:	e000      	b.n	800128e <fsm_automatic_2_run+0x206>
		break;
 800128c:	bf00      	nop
	}
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000084 	.word	0x20000084
 8001298:	20000038 	.word	0x20000038
 800129c:	20000094 	.word	0x20000094
 80012a0:	20000040 	.word	0x20000040
 80012a4:	200000bc 	.word	0x200000bc
 80012a8:	40010800 	.word	0x40010800
 80012ac:	200000b8 	.word	0x200000b8
 80012b0:	20000044 	.word	0x20000044
 80012b4:	20000098 	.word	0x20000098
 80012b8:	20000080 	.word	0x20000080
 80012bc:	2000009c 	.word	0x2000009c
 80012c0:	20000048 	.word	0x20000048

080012c4 <fsm_manual_run>:

#include "fsm_manual.h"
#include "display_led.h"
#include "main.h"

void fsm_manual_run(){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
	switch(status){
 80012c8:	4b95      	ldr	r3, [pc, #596]	; (8001520 <fsm_manual_run+0x25c>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	2b0e      	cmp	r3, #14
 80012ce:	f000 80c1 	beq.w	8001454 <fsm_manual_run+0x190>
 80012d2:	2b0e      	cmp	r3, #14
 80012d4:	f300 811a 	bgt.w	800150c <fsm_manual_run+0x248>
 80012d8:	2b0c      	cmp	r3, #12
 80012da:	d002      	beq.n	80012e2 <fsm_manual_run+0x1e>
 80012dc:	2b0d      	cmp	r3, #13
 80012de:	d05d      	beq.n	800139c <fsm_manual_run+0xd8>
				setTimer1(MAX_RED*100-100);
				setTimer3(MAX_GREEN2*100-100);
			}
			break;
		default:
			break;
 80012e0:	e114      	b.n	800150c <fsm_manual_run+0x248>
			display7SEG_2(2);
 80012e2:	2002      	movs	r0, #2
 80012e4:	f7ff fa0e 	bl	8000704 <display7SEG_2>
			display7SEG(MAX_RED);
 80012e8:	4b8e      	ldr	r3, [pc, #568]	; (8001524 <fsm_manual_run+0x260>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4618      	mov	r0, r3
 80012ee:	f7ff f883 	bl	80003f8 <display7SEG>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80012f2:	2201      	movs	r2, #1
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	488c      	ldr	r0, [pc, #560]	; (8001528 <fsm_manual_run+0x264>)
 80012f8:	f000 ff2b 	bl	8002152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80012fc:	2201      	movs	r2, #1
 80012fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001302:	4889      	ldr	r0, [pc, #548]	; (8001528 <fsm_manual_run+0x264>)
 8001304:	f000 ff25 	bl	8002152 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001308:	4b88      	ldr	r3, [pc, #544]	; (800152c <fsm_manual_run+0x268>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b01      	cmp	r3, #1
 800130e:	d106      	bne.n	800131e <fsm_manual_run+0x5a>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 8001310:	2140      	movs	r1, #64	; 0x40
 8001312:	4885      	ldr	r0, [pc, #532]	; (8001528 <fsm_manual_run+0x264>)
 8001314:	f000 ff35 	bl	8002182 <HAL_GPIO_TogglePin>
				setTimer2(50);
 8001318:	2032      	movs	r0, #50	; 0x32
 800131a:	f000 fad3 	bl	80018c4 <setTimer2>
			if(is_Button1_Pressed() == 1)
 800131e:	f7fe ff15 	bl	800014c <is_Button1_Pressed>
 8001322:	4603      	mov	r3, r0
 8001324:	2b01      	cmp	r3, #1
 8001326:	d105      	bne.n	8001334 <fsm_manual_run+0x70>
				status = MAN_GREEN;
 8001328:	4b7d      	ldr	r3, [pc, #500]	; (8001520 <fsm_manual_run+0x25c>)
 800132a:	220d      	movs	r2, #13
 800132c:	601a      	str	r2, [r3, #0]
				status_2 = MAN_GREEN;
 800132e:	4b80      	ldr	r3, [pc, #512]	; (8001530 <fsm_manual_run+0x26c>)
 8001330:	220d      	movs	r2, #13
 8001332:	601a      	str	r2, [r3, #0]
			if(is_Button2_Pressed() == 1)
 8001334:	f7fe ff1c 	bl	8000170 <is_Button2_Pressed>
 8001338:	4603      	mov	r3, r0
 800133a:	2b01      	cmp	r3, #1
 800133c:	d109      	bne.n	8001352 <fsm_manual_run+0x8e>
				MAX_RED++;
 800133e:	4b79      	ldr	r3, [pc, #484]	; (8001524 <fsm_manual_run+0x260>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	3301      	adds	r3, #1
 8001344:	4a77      	ldr	r2, [pc, #476]	; (8001524 <fsm_manual_run+0x260>)
 8001346:	6013      	str	r3, [r2, #0]
				MAX_RED2++;
 8001348:	4b7a      	ldr	r3, [pc, #488]	; (8001534 <fsm_manual_run+0x270>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	3301      	adds	r3, #1
 800134e:	4a79      	ldr	r2, [pc, #484]	; (8001534 <fsm_manual_run+0x270>)
 8001350:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 8001352:	f7fe ff1f 	bl	8000194 <is_Button3_Pressed>
 8001356:	4603      	mov	r3, r0
 8001358:	2b01      	cmp	r3, #1
 800135a:	f040 80d9 	bne.w	8001510 <fsm_manual_run+0x24c>
				status = AUTO_RED;
 800135e:	4b70      	ldr	r3, [pc, #448]	; (8001520 <fsm_manual_run+0x25c>)
 8001360:	2202      	movs	r2, #2
 8001362:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 8001364:	4b72      	ldr	r3, [pc, #456]	; (8001530 <fsm_manual_run+0x26c>)
 8001366:	2203      	movs	r2, #3
 8001368:	601a      	str	r2, [r3, #0]
				num_red = 0;
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <fsm_manual_run+0x274>)
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
				num_green2 = 0;
 8001370:	4b72      	ldr	r3, [pc, #456]	; (800153c <fsm_manual_run+0x278>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
				setTimer1(MAX_RED*100-100);
 8001376:	4b6b      	ldr	r3, [pc, #428]	; (8001524 <fsm_manual_run+0x260>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	3b01      	subs	r3, #1
 800137c:	2264      	movs	r2, #100	; 0x64
 800137e:	fb02 f303 	mul.w	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 fa8a 	bl	800189c <setTimer1>
				setTimer3(MAX_GREEN2*100-100);
 8001388:	4b6d      	ldr	r3, [pc, #436]	; (8001540 <fsm_manual_run+0x27c>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	3b01      	subs	r3, #1
 800138e:	2264      	movs	r2, #100	; 0x64
 8001390:	fb02 f303 	mul.w	r3, r2, r3
 8001394:	4618      	mov	r0, r3
 8001396:	f000 faa9 	bl	80018ec <setTimer3>
			break;
 800139a:	e0b9      	b.n	8001510 <fsm_manual_run+0x24c>
			display7SEG_2(3);
 800139c:	2003      	movs	r0, #3
 800139e:	f7ff f9b1 	bl	8000704 <display7SEG_2>
			display7SEG(MAX_GREEN);
 80013a2:	4b68      	ldr	r3, [pc, #416]	; (8001544 <fsm_manual_run+0x280>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f7ff f826 	bl	80003f8 <display7SEG>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80013ac:	2201      	movs	r2, #1
 80013ae:	2140      	movs	r1, #64	; 0x40
 80013b0:	485d      	ldr	r0, [pc, #372]	; (8001528 <fsm_manual_run+0x264>)
 80013b2:	f000 fece 	bl	8002152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80013b6:	2201      	movs	r2, #1
 80013b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013bc:	485a      	ldr	r0, [pc, #360]	; (8001528 <fsm_manual_run+0x264>)
 80013be:	f000 fec8 	bl	8002152 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80013c2:	4b5a      	ldr	r3, [pc, #360]	; (800152c <fsm_manual_run+0x268>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2b01      	cmp	r3, #1
 80013c8:	d106      	bne.n	80013d8 <fsm_manual_run+0x114>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80013ca:	2180      	movs	r1, #128	; 0x80
 80013cc:	4856      	ldr	r0, [pc, #344]	; (8001528 <fsm_manual_run+0x264>)
 80013ce:	f000 fed8 	bl	8002182 <HAL_GPIO_TogglePin>
				setTimer2(50);
 80013d2:	2032      	movs	r0, #50	; 0x32
 80013d4:	f000 fa76 	bl	80018c4 <setTimer2>
			if(is_Button1_Pressed() == 1)
 80013d8:	f7fe feb8 	bl	800014c <is_Button1_Pressed>
 80013dc:	4603      	mov	r3, r0
 80013de:	2b01      	cmp	r3, #1
 80013e0:	d105      	bne.n	80013ee <fsm_manual_run+0x12a>
				status = MAN_YELLOW;
 80013e2:	4b4f      	ldr	r3, [pc, #316]	; (8001520 <fsm_manual_run+0x25c>)
 80013e4:	220e      	movs	r2, #14
 80013e6:	601a      	str	r2, [r3, #0]
				status_2 = MAN_YELLOW;
 80013e8:	4b51      	ldr	r3, [pc, #324]	; (8001530 <fsm_manual_run+0x26c>)
 80013ea:	220e      	movs	r2, #14
 80013ec:	601a      	str	r2, [r3, #0]
			if(is_Button2_Pressed() == 1)
 80013ee:	f7fe febf 	bl	8000170 <is_Button2_Pressed>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d109      	bne.n	800140c <fsm_manual_run+0x148>
				MAX_GREEN++;
 80013f8:	4b52      	ldr	r3, [pc, #328]	; (8001544 <fsm_manual_run+0x280>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	4a51      	ldr	r2, [pc, #324]	; (8001544 <fsm_manual_run+0x280>)
 8001400:	6013      	str	r3, [r2, #0]
				MAX_GREEN2++;
 8001402:	4b4f      	ldr	r3, [pc, #316]	; (8001540 <fsm_manual_run+0x27c>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	3301      	adds	r3, #1
 8001408:	4a4d      	ldr	r2, [pc, #308]	; (8001540 <fsm_manual_run+0x27c>)
 800140a:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 800140c:	f7fe fec2 	bl	8000194 <is_Button3_Pressed>
 8001410:	4603      	mov	r3, r0
 8001412:	2b01      	cmp	r3, #1
 8001414:	d17e      	bne.n	8001514 <fsm_manual_run+0x250>
				status = AUTO_RED;
 8001416:	4b42      	ldr	r3, [pc, #264]	; (8001520 <fsm_manual_run+0x25c>)
 8001418:	2202      	movs	r2, #2
 800141a:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 800141c:	4b44      	ldr	r3, [pc, #272]	; (8001530 <fsm_manual_run+0x26c>)
 800141e:	2203      	movs	r2, #3
 8001420:	601a      	str	r2, [r3, #0]
				num_red = 0;
 8001422:	4b45      	ldr	r3, [pc, #276]	; (8001538 <fsm_manual_run+0x274>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]
				num_green2 = 0;
 8001428:	4b44      	ldr	r3, [pc, #272]	; (800153c <fsm_manual_run+0x278>)
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
				setTimer1(MAX_RED*100-100);
 800142e:	4b3d      	ldr	r3, [pc, #244]	; (8001524 <fsm_manual_run+0x260>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	3b01      	subs	r3, #1
 8001434:	2264      	movs	r2, #100	; 0x64
 8001436:	fb02 f303 	mul.w	r3, r2, r3
 800143a:	4618      	mov	r0, r3
 800143c:	f000 fa2e 	bl	800189c <setTimer1>
				setTimer3(MAX_GREEN2*100-100);
 8001440:	4b3f      	ldr	r3, [pc, #252]	; (8001540 <fsm_manual_run+0x27c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	2264      	movs	r2, #100	; 0x64
 8001448:	fb02 f303 	mul.w	r3, r2, r3
 800144c:	4618      	mov	r0, r3
 800144e:	f000 fa4d 	bl	80018ec <setTimer3>
			break;
 8001452:	e05f      	b.n	8001514 <fsm_manual_run+0x250>
			display7SEG_2(4);
 8001454:	2004      	movs	r0, #4
 8001456:	f7ff f955 	bl	8000704 <display7SEG_2>
			display7SEG(MAX_YELLOW);
 800145a:	4b3b      	ldr	r3, [pc, #236]	; (8001548 <fsm_manual_run+0x284>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7fe ffca 	bl	80003f8 <display7SEG>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8001464:	2201      	movs	r2, #1
 8001466:	2140      	movs	r1, #64	; 0x40
 8001468:	482f      	ldr	r0, [pc, #188]	; (8001528 <fsm_manual_run+0x264>)
 800146a:	f000 fe72 	bl	8002152 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2180      	movs	r1, #128	; 0x80
 8001472:	482d      	ldr	r0, [pc, #180]	; (8001528 <fsm_manual_run+0x264>)
 8001474:	f000 fe6d 	bl	8002152 <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001478:	4b2c      	ldr	r3, [pc, #176]	; (800152c <fsm_manual_run+0x268>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d107      	bne.n	8001490 <fsm_manual_run+0x1cc>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 8001480:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001484:	4828      	ldr	r0, [pc, #160]	; (8001528 <fsm_manual_run+0x264>)
 8001486:	f000 fe7c 	bl	8002182 <HAL_GPIO_TogglePin>
				setTimer2(50);
 800148a:	2032      	movs	r0, #50	; 0x32
 800148c:	f000 fa1a 	bl	80018c4 <setTimer2>
			if(is_Button1_Pressed() == 1)
 8001490:	f7fe fe5c 	bl	800014c <is_Button1_Pressed>
 8001494:	4603      	mov	r3, r0
 8001496:	2b01      	cmp	r3, #1
 8001498:	d105      	bne.n	80014a6 <fsm_manual_run+0x1e2>
				status = MAN_RED;
 800149a:	4b21      	ldr	r3, [pc, #132]	; (8001520 <fsm_manual_run+0x25c>)
 800149c:	220c      	movs	r2, #12
 800149e:	601a      	str	r2, [r3, #0]
				status_2 = MAN_RED;
 80014a0:	4b23      	ldr	r3, [pc, #140]	; (8001530 <fsm_manual_run+0x26c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
			if(is_Button2_Pressed() == 1)
 80014a6:	f7fe fe63 	bl	8000170 <is_Button2_Pressed>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b01      	cmp	r3, #1
 80014ae:	d109      	bne.n	80014c4 <fsm_manual_run+0x200>
				MAX_YELLOW++;
 80014b0:	4b25      	ldr	r3, [pc, #148]	; (8001548 <fsm_manual_run+0x284>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	3301      	adds	r3, #1
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <fsm_manual_run+0x284>)
 80014b8:	6013      	str	r3, [r2, #0]
				MAX_YELLOW2++;
 80014ba:	4b24      	ldr	r3, [pc, #144]	; (800154c <fsm_manual_run+0x288>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	3301      	adds	r3, #1
 80014c0:	4a22      	ldr	r2, [pc, #136]	; (800154c <fsm_manual_run+0x288>)
 80014c2:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 80014c4:	f7fe fe66 	bl	8000194 <is_Button3_Pressed>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d124      	bne.n	8001518 <fsm_manual_run+0x254>
				status = AUTO_RED;
 80014ce:	4b14      	ldr	r3, [pc, #80]	; (8001520 <fsm_manual_run+0x25c>)
 80014d0:	2202      	movs	r2, #2
 80014d2:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 80014d4:	4b16      	ldr	r3, [pc, #88]	; (8001530 <fsm_manual_run+0x26c>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	601a      	str	r2, [r3, #0]
				num_red = 0;
 80014da:	4b17      	ldr	r3, [pc, #92]	; (8001538 <fsm_manual_run+0x274>)
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
				num_green2 = 0;
 80014e0:	4b16      	ldr	r3, [pc, #88]	; (800153c <fsm_manual_run+0x278>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	601a      	str	r2, [r3, #0]
				setTimer1(MAX_RED*100-100);
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <fsm_manual_run+0x260>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	2264      	movs	r2, #100	; 0x64
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 f9d2 	bl	800189c <setTimer1>
				setTimer3(MAX_GREEN2*100-100);
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <fsm_manual_run+0x27c>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	2264      	movs	r2, #100	; 0x64
 8001500:	fb02 f303 	mul.w	r3, r2, r3
 8001504:	4618      	mov	r0, r3
 8001506:	f000 f9f1 	bl	80018ec <setTimer3>
			break;
 800150a:	e005      	b.n	8001518 <fsm_manual_run+0x254>
			break;
 800150c:	bf00      	nop
 800150e:	e004      	b.n	800151a <fsm_manual_run+0x256>
			break;
 8001510:	bf00      	nop
 8001512:	e002      	b.n	800151a <fsm_manual_run+0x256>
			break;
 8001514:	bf00      	nop
 8001516:	e000      	b.n	800151a <fsm_manual_run+0x256>
			break;
 8001518:	bf00      	nop
		}
}
 800151a:	bf00      	nop
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	20000080 	.word	0x20000080
 8001524:	20000034 	.word	0x20000034
 8001528:	40010800 	.word	0x40010800
 800152c:	200000b4 	.word	0x200000b4
 8001530:	20000084 	.word	0x20000084
 8001534:	20000040 	.word	0x20000040
 8001538:	20000088 	.word	0x20000088
 800153c:	20000098 	.word	0x20000098
 8001540:	20000044 	.word	0x20000044
 8001544:	20000038 	.word	0x20000038
 8001548:	2000003c 	.word	0x2000003c
 800154c:	20000048 	.word	0x20000048

08001550 <fsm_manual_2_run>:

void fsm_manual_2_run()
{
 8001550:	b580      	push	{r7, lr}
 8001552:	af00      	add	r7, sp, #0
	switch(status_2)
 8001554:	4b32      	ldr	r3, [pc, #200]	; (8001620 <fsm_manual_2_run+0xd0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	2b0e      	cmp	r3, #14
 800155a:	d03c      	beq.n	80015d6 <fsm_manual_2_run+0x86>
 800155c:	2b0e      	cmp	r3, #14
 800155e:	dc55      	bgt.n	800160c <fsm_manual_2_run+0xbc>
 8001560:	2b0c      	cmp	r3, #12
 8001562:	d002      	beq.n	800156a <fsm_manual_2_run+0x1a>
 8001564:	2b0d      	cmp	r3, #13
 8001566:	d01b      	beq.n	80015a0 <fsm_manual_2_run+0x50>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
			setTimer4(50);
		}
		break;
	default:
		break;
 8001568:	e050      	b.n	800160c <fsm_manual_2_run+0xbc>
		display7SEG_3(MAX_RED2);
 800156a:	4b2e      	ldr	r3, [pc, #184]	; (8001624 <fsm_manual_2_run+0xd4>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4618      	mov	r0, r3
 8001570:	f7ff fa8e 	bl	8000a90 <display7SEG_3>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001574:	2201      	movs	r2, #1
 8001576:	2108      	movs	r1, #8
 8001578:	482b      	ldr	r0, [pc, #172]	; (8001628 <fsm_manual_2_run+0xd8>)
 800157a:	f000 fdea 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800157e:	2201      	movs	r2, #1
 8001580:	2110      	movs	r1, #16
 8001582:	4829      	ldr	r0, [pc, #164]	; (8001628 <fsm_manual_2_run+0xd8>)
 8001584:	f000 fde5 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 8001588:	4b28      	ldr	r3, [pc, #160]	; (800162c <fsm_manual_2_run+0xdc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d13f      	bne.n	8001610 <fsm_manual_2_run+0xc0>
			HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 8001590:	2104      	movs	r1, #4
 8001592:	4825      	ldr	r0, [pc, #148]	; (8001628 <fsm_manual_2_run+0xd8>)
 8001594:	f000 fdf5 	bl	8002182 <HAL_GPIO_TogglePin>
			setTimer4(50);
 8001598:	2032      	movs	r0, #50	; 0x32
 800159a:	f000 f9bb 	bl	8001914 <setTimer4>
		break;
 800159e:	e037      	b.n	8001610 <fsm_manual_2_run+0xc0>
		display7SEG_3(MAX_GREEN2);
 80015a0:	4b23      	ldr	r3, [pc, #140]	; (8001630 <fsm_manual_2_run+0xe0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff fa73 	bl	8000a90 <display7SEG_3>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80015aa:	2201      	movs	r2, #1
 80015ac:	2104      	movs	r1, #4
 80015ae:	481e      	ldr	r0, [pc, #120]	; (8001628 <fsm_manual_2_run+0xd8>)
 80015b0:	f000 fdcf 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 80015b4:	2201      	movs	r2, #1
 80015b6:	2110      	movs	r1, #16
 80015b8:	481b      	ldr	r0, [pc, #108]	; (8001628 <fsm_manual_2_run+0xd8>)
 80015ba:	f000 fdca 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 80015be:	4b1b      	ldr	r3, [pc, #108]	; (800162c <fsm_manual_2_run+0xdc>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2b01      	cmp	r3, #1
 80015c4:	d126      	bne.n	8001614 <fsm_manual_2_run+0xc4>
			HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80015c6:	2108      	movs	r1, #8
 80015c8:	4817      	ldr	r0, [pc, #92]	; (8001628 <fsm_manual_2_run+0xd8>)
 80015ca:	f000 fdda 	bl	8002182 <HAL_GPIO_TogglePin>
			setTimer4(50);
 80015ce:	2032      	movs	r0, #50	; 0x32
 80015d0:	f000 f9a0 	bl	8001914 <setTimer4>
		break;
 80015d4:	e01e      	b.n	8001614 <fsm_manual_2_run+0xc4>
		display7SEG_3(MAX_YELLOW2);
 80015d6:	4b17      	ldr	r3, [pc, #92]	; (8001634 <fsm_manual_2_run+0xe4>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff fa58 	bl	8000a90 <display7SEG_3>
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80015e0:	2201      	movs	r2, #1
 80015e2:	2104      	movs	r1, #4
 80015e4:	4810      	ldr	r0, [pc, #64]	; (8001628 <fsm_manual_2_run+0xd8>)
 80015e6:	f000 fdb4 	bl	8002152 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80015ea:	2201      	movs	r2, #1
 80015ec:	2108      	movs	r1, #8
 80015ee:	480e      	ldr	r0, [pc, #56]	; (8001628 <fsm_manual_2_run+0xd8>)
 80015f0:	f000 fdaf 	bl	8002152 <HAL_GPIO_WritePin>
		if(timer4_flag == 1){
 80015f4:	4b0d      	ldr	r3, [pc, #52]	; (800162c <fsm_manual_2_run+0xdc>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d10d      	bne.n	8001618 <fsm_manual_2_run+0xc8>
			HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 80015fc:	2110      	movs	r1, #16
 80015fe:	480a      	ldr	r0, [pc, #40]	; (8001628 <fsm_manual_2_run+0xd8>)
 8001600:	f000 fdbf 	bl	8002182 <HAL_GPIO_TogglePin>
			setTimer4(50);
 8001604:	2032      	movs	r0, #50	; 0x32
 8001606:	f000 f985 	bl	8001914 <setTimer4>
		break;
 800160a:	e005      	b.n	8001618 <fsm_manual_2_run+0xc8>
		break;
 800160c:	bf00      	nop
 800160e:	e004      	b.n	800161a <fsm_manual_2_run+0xca>
		break;
 8001610:	bf00      	nop
 8001612:	e002      	b.n	800161a <fsm_manual_2_run+0xca>
		break;
 8001614:	bf00      	nop
 8001616:	e000      	b.n	800161a <fsm_manual_2_run+0xca>
		break;
 8001618:	bf00      	nop
	}

}
 800161a:	bf00      	nop
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	20000084 	.word	0x20000084
 8001624:	20000040 	.word	0x20000040
 8001628:	40010800 	.word	0x40010800
 800162c:	200000bc 	.word	0x200000bc
 8001630:	20000044 	.word	0x20000044
 8001634:	20000048 	.word	0x20000048

08001638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800163c:	f000 fa88 	bl	8001b50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001640:	f000 f81c 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001644:	f000 f8a2 	bl	800178c <MX_GPIO_Init>
  MX_TIM2_Init();
 8001648:	f000 f854 	bl	80016f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 800164c:	4808      	ldr	r0, [pc, #32]	; (8001670 <main+0x38>)
 800164e:	f001 f9e9 	bl	8002a24 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  status = INIT;
 8001652:	4b08      	ldr	r3, [pc, #32]	; (8001674 <main+0x3c>)
 8001654:	2201      	movs	r2, #1
 8001656:	601a      	str	r2, [r3, #0]
  status_2 =INIT;
 8001658:	4b07      	ldr	r3, [pc, #28]	; (8001678 <main+0x40>)
 800165a:	2201      	movs	r2, #1
 800165c:	601a      	str	r2, [r3, #0]
//	  if(timer2_flag == 1){
//	  HAL_GPIO_TogglePin(Led1_GPIO_Port, Led1_Pin);
//	  setTimer2(100);
//	  }
    /* USER CODE END WHILE */
	  fsm_automatic_run();
 800165e:	f7ff fbe7 	bl	8000e30 <fsm_automatic_run>
	  fsm_manual_run();
 8001662:	f7ff fe2f 	bl	80012c4 <fsm_manual_run>
	  fsm_automatic_2_run();
 8001666:	f7ff fd0f 	bl	8001088 <fsm_automatic_2_run>
	  fsm_manual_2_run();
 800166a:	f7ff ff71 	bl	8001550 <fsm_manual_2_run>
	  fsm_automatic_run();
 800166e:	e7f6      	b.n	800165e <main+0x26>
 8001670:	200000c0 	.word	0x200000c0
 8001674:	20000080 	.word	0x20000080
 8001678:	20000084 	.word	0x20000084

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b090      	sub	sp, #64	; 0x40
 8001680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001682:	f107 0318 	add.w	r3, r7, #24
 8001686:	2228      	movs	r2, #40	; 0x28
 8001688:	2100      	movs	r1, #0
 800168a:	4618      	mov	r0, r3
 800168c:	f001 fd82 	bl	8003194 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001690:	1d3b      	adds	r3, r7, #4
 8001692:	2200      	movs	r2, #0
 8001694:	601a      	str	r2, [r3, #0]
 8001696:	605a      	str	r2, [r3, #4]
 8001698:	609a      	str	r2, [r3, #8]
 800169a:	60da      	str	r2, [r3, #12]
 800169c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800169e:	2302      	movs	r3, #2
 80016a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a2:	2301      	movs	r3, #1
 80016a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016a6:	2310      	movs	r3, #16
 80016a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80016aa:	2300      	movs	r3, #0
 80016ac:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016ae:	f107 0318 	add.w	r3, r7, #24
 80016b2:	4618      	mov	r0, r3
 80016b4:	f000 fd7e 	bl	80021b4 <HAL_RCC_OscConfig>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <SystemClock_Config+0x46>
  {
    Error_Handler();
 80016be:	f000 f8e7 	bl	8001890 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c2:	230f      	movs	r3, #15
 80016c4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80016d6:	1d3b      	adds	r3, r7, #4
 80016d8:	2100      	movs	r1, #0
 80016da:	4618      	mov	r0, r3
 80016dc:	f000 ffea 	bl	80026b4 <HAL_RCC_ClockConfig>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80016e6:	f000 f8d3 	bl	8001890 <Error_Handler>
  }
}
 80016ea:	bf00      	nop
 80016ec:	3740      	adds	r7, #64	; 0x40
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016fa:	f107 0308 	add.w	r3, r7, #8
 80016fe:	2200      	movs	r2, #0
 8001700:	601a      	str	r2, [r3, #0]
 8001702:	605a      	str	r2, [r3, #4]
 8001704:	609a      	str	r2, [r3, #8]
 8001706:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001708:	463b      	mov	r3, r7
 800170a:	2200      	movs	r2, #0
 800170c:	601a      	str	r2, [r3, #0]
 800170e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001710:	4b1d      	ldr	r3, [pc, #116]	; (8001788 <MX_TIM2_Init+0x94>)
 8001712:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001716:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001718:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <MX_TIM2_Init+0x94>)
 800171a:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800171e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <MX_TIM2_Init+0x94>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <MX_TIM2_Init+0x94>)
 8001728:	2209      	movs	r2, #9
 800172a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <MX_TIM2_Init+0x94>)
 800172e:	2200      	movs	r2, #0
 8001730:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001732:	4b15      	ldr	r3, [pc, #84]	; (8001788 <MX_TIM2_Init+0x94>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001738:	4813      	ldr	r0, [pc, #76]	; (8001788 <MX_TIM2_Init+0x94>)
 800173a:	f001 f923 	bl	8002984 <HAL_TIM_Base_Init>
 800173e:	4603      	mov	r3, r0
 8001740:	2b00      	cmp	r3, #0
 8001742:	d001      	beq.n	8001748 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001744:	f000 f8a4 	bl	8001890 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001748:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800174c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800174e:	f107 0308 	add.w	r3, r7, #8
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	; (8001788 <MX_TIM2_Init+0x94>)
 8001756:	f001 fab9 	bl	8002ccc <HAL_TIM_ConfigClockSource>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001760:	f000 f896 	bl	8001890 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001768:	2300      	movs	r3, #0
 800176a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800176c:	463b      	mov	r3, r7
 800176e:	4619      	mov	r1, r3
 8001770:	4805      	ldr	r0, [pc, #20]	; (8001788 <MX_TIM2_Init+0x94>)
 8001772:	f001 fc81 	bl	8003078 <HAL_TIMEx_MasterConfigSynchronization>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800177c:	f000 f888 	bl	8001890 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001780:	bf00      	nop
 8001782:	3718      	adds	r7, #24
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	200000c0 	.word	0x200000c0

0800178c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001792:	f107 0310 	add.w	r3, r7, #16
 8001796:	2200      	movs	r2, #0
 8001798:	601a      	str	r2, [r3, #0]
 800179a:	605a      	str	r2, [r3, #4]
 800179c:	609a      	str	r2, [r3, #8]
 800179e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017a2:	699b      	ldr	r3, [r3, #24]
 80017a4:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017a6:	f043 0310 	orr.w	r3, r3, #16
 80017aa:	6193      	str	r3, [r2, #24]
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017ae:	699b      	ldr	r3, [r3, #24]
 80017b0:	f003 0310 	and.w	r3, r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b8:	4b29      	ldr	r3, [pc, #164]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017ba:	699b      	ldr	r3, [r3, #24]
 80017bc:	4a28      	ldr	r2, [pc, #160]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017be:	f043 0304 	orr.w	r3, r3, #4
 80017c2:	6193      	str	r3, [r2, #24]
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017c6:	699b      	ldr	r3, [r3, #24]
 80017c8:	f003 0304 	and.w	r3, r3, #4
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017d2:	699b      	ldr	r3, [r3, #24]
 80017d4:	4a22      	ldr	r2, [pc, #136]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017d6:	f043 0308 	orr.w	r3, r3, #8
 80017da:	6193      	str	r3, [r2, #24]
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_GPIO_Init+0xd4>)
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	f003 0308 	and.w	r3, r3, #8
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|Led1_Pin
 80017e8:	2200      	movs	r2, #0
 80017ea:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80017ee:	481d      	ldr	r0, [pc, #116]	; (8001864 <MX_GPIO_Init+0xd8>)
 80017f0:	f000 fcaf 	bl	8002152 <HAL_GPIO_WritePin>
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|SEGC0_Pin
                          |SEGC1_Pin|SEGC2_Pin|SEGC3_Pin|SEGC4_Pin
                          |SEGC5_Pin|SEGC6_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGA0_Pin|SEGA1_Pin|SEGA2_Pin|SEGB3_Pin
 80017f4:	2200      	movs	r2, #0
 80017f6:	f643 71ff 	movw	r1, #16383	; 0x3fff
 80017fa:	481b      	ldr	r0, [pc, #108]	; (8001868 <MX_GPIO_Init+0xdc>)
 80017fc:	f000 fca9 	bl	8002152 <HAL_GPIO_WritePin>
                          |SEGB4_Pin|SEGB5_Pin|SEGB6_Pin|SEGA3_Pin
                          |SEGA4_Pin|SEGA5_Pin|SEGA6_Pin|SEGB0_Pin
                          |SEGB1_Pin|SEGB2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001800:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8001804:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800180a:	2301      	movs	r3, #1
 800180c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800180e:	f107 0310 	add.w	r3, r7, #16
 8001812:	4619      	mov	r1, r3
 8001814:	4815      	ldr	r0, [pc, #84]	; (800186c <MX_GPIO_Init+0xe0>)
 8001816:	f000 fb0b 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED2_Pin LED_GREEN2_Pin LED_YELLOW2_Pin Led1_Pin
                           LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin SEGC0_Pin
                           SEGC1_Pin SEGC2_Pin SEGC3_Pin SEGC4_Pin
                           SEGC5_Pin SEGC6_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|Led1_Pin
 800181a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800181e:	613b      	str	r3, [r7, #16]
                          |LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin|SEGC0_Pin
                          |SEGC1_Pin|SEGC2_Pin|SEGC3_Pin|SEGC4_Pin
                          |SEGC5_Pin|SEGC6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001820:	2301      	movs	r3, #1
 8001822:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2302      	movs	r3, #2
 800182a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800182c:	f107 0310 	add.w	r3, r7, #16
 8001830:	4619      	mov	r1, r3
 8001832:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_GPIO_Init+0xd8>)
 8001834:	f000 fafc 	bl	8001e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGA0_Pin SEGA1_Pin SEGA2_Pin SEGB3_Pin
                           SEGB4_Pin SEGB5_Pin SEGB6_Pin SEGA3_Pin
                           SEGA4_Pin SEGA5_Pin SEGA6_Pin SEGB0_Pin
                           SEGB1_Pin SEGB2_Pin */
  GPIO_InitStruct.Pin = SEGA0_Pin|SEGA1_Pin|SEGA2_Pin|SEGB3_Pin
 8001838:	f643 73ff 	movw	r3, #16383	; 0x3fff
 800183c:	613b      	str	r3, [r7, #16]
                          |SEGB4_Pin|SEGB5_Pin|SEGB6_Pin|SEGA3_Pin
                          |SEGA4_Pin|SEGA5_Pin|SEGA6_Pin|SEGB0_Pin
                          |SEGB1_Pin|SEGB2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800183e:	2301      	movs	r3, #1
 8001840:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2302      	movs	r3, #2
 8001848:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0310 	add.w	r3, r7, #16
 800184e:	4619      	mov	r1, r3
 8001850:	4805      	ldr	r0, [pc, #20]	; (8001868 <MX_GPIO_Init+0xdc>)
 8001852:	f000 faed 	bl	8001e30 <HAL_GPIO_Init>

}
 8001856:	bf00      	nop
 8001858:	3720      	adds	r7, #32
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}
 800185e:	bf00      	nop
 8001860:	40021000 	.word	0x40021000
 8001864:	40010800 	.word	0x40010800
 8001868:	40010c00 	.word	0x40010c00
 800186c:	40011000 	.word	0x40011000

08001870 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
 {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
	timerRun();
 8001878:	f000 f860 	bl	800193c <timerRun>
	getKeyInput1();
 800187c:	f7fe fcc0 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 8001880:	f7fe fd66 	bl	8000350 <getKeyInput2>
	getKeyInput3();
 8001884:	f7fe fd10 	bl	80002a8 <getKeyInput3>
 }
 8001888:	bf00      	nop
 800188a:	3708      	adds	r7, #8
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001894:	b672      	cpsid	i
}
 8001896:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001898:	e7fe      	b.n	8001898 <Error_Handler+0x8>
	...

0800189c <setTimer1>:
int timer1_flag =0;
int timer2_flag =0;
int timer3_flag =0;
int timer4_flag =0;

void setTimer1(int duration){
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 80018a4:	4a05      	ldr	r2, [pc, #20]	; (80018bc <setTimer1+0x20>)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 80018aa:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <setTimer1+0x24>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
}
 80018b0:	bf00      	nop
 80018b2:	370c      	adds	r7, #12
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bc80      	pop	{r7}
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop
 80018bc:	200000ac 	.word	0x200000ac
 80018c0:	200000b0 	.word	0x200000b0

080018c4 <setTimer2>:
void setTimer2(int duration){
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80018cc:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <setTimer2+0x20>)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6013      	str	r3, [r2, #0]
	timer2_flag =0;
 80018d2:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <setTimer2+0x24>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
}
 80018d8:	bf00      	nop
 80018da:	370c      	adds	r7, #12
 80018dc:	46bd      	mov	sp, r7
 80018de:	bc80      	pop	{r7}
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	200000a8 	.word	0x200000a8
 80018e8:	200000b4 	.word	0x200000b4

080018ec <setTimer3>:
void setTimer3(int duration){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80018f4:	4a05      	ldr	r2, [pc, #20]	; (800190c <setTimer3+0x20>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6013      	str	r3, [r2, #0]
	timer3_flag =0;
 80018fa:	4b05      	ldr	r3, [pc, #20]	; (8001910 <setTimer3+0x24>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]
}
 8001900:	bf00      	nop
 8001902:	370c      	adds	r7, #12
 8001904:	46bd      	mov	sp, r7
 8001906:	bc80      	pop	{r7}
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	200000a4 	.word	0x200000a4
 8001910:	200000b8 	.word	0x200000b8

08001914 <setTimer4>:
void setTimer4(int duration){
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
	timer4_counter = duration;
 800191c:	4a05      	ldr	r2, [pc, #20]	; (8001934 <setTimer4+0x20>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6013      	str	r3, [r2, #0]
	timer4_flag =0;
 8001922:	4b05      	ldr	r3, [pc, #20]	; (8001938 <setTimer4+0x24>)
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
}
 8001928:	bf00      	nop
 800192a:	370c      	adds	r7, #12
 800192c:	46bd      	mov	sp, r7
 800192e:	bc80      	pop	{r7}
 8001930:	4770      	bx	lr
 8001932:	bf00      	nop
 8001934:	200000a0 	.word	0x200000a0
 8001938:	200000bc 	.word	0x200000bc

0800193c <timerRun>:
void timerRun(){
 800193c:	b480      	push	{r7}
 800193e:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 8001940:	4b21      	ldr	r3, [pc, #132]	; (80019c8 <timerRun+0x8c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	dd0b      	ble.n	8001960 <timerRun+0x24>
		timer1_counter--;
 8001948:	4b1f      	ldr	r3, [pc, #124]	; (80019c8 <timerRun+0x8c>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b01      	subs	r3, #1
 800194e:	4a1e      	ldr	r2, [pc, #120]	; (80019c8 <timerRun+0x8c>)
 8001950:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 8001952:	4b1d      	ldr	r3, [pc, #116]	; (80019c8 <timerRun+0x8c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2b00      	cmp	r3, #0
 8001958:	dc02      	bgt.n	8001960 <timerRun+0x24>
		{
			timer1_flag =1;
 800195a:	4b1c      	ldr	r3, [pc, #112]	; (80019cc <timerRun+0x90>)
 800195c:	2201      	movs	r2, #1
 800195e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <timerRun+0x94>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	2b00      	cmp	r3, #0
 8001966:	dd0b      	ble.n	8001980 <timerRun+0x44>
			timer2_counter--;
 8001968:	4b19      	ldr	r3, [pc, #100]	; (80019d0 <timerRun+0x94>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	3b01      	subs	r3, #1
 800196e:	4a18      	ldr	r2, [pc, #96]	; (80019d0 <timerRun+0x94>)
 8001970:	6013      	str	r3, [r2, #0]
			if(timer2_counter<=0)
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <timerRun+0x94>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	2b00      	cmp	r3, #0
 8001978:	dc02      	bgt.n	8001980 <timerRun+0x44>
			{
				timer2_flag =1;
 800197a:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <timerRun+0x98>)
 800197c:	2201      	movs	r2, #1
 800197e:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter > 0){
 8001980:	4b15      	ldr	r3, [pc, #84]	; (80019d8 <timerRun+0x9c>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	dd0b      	ble.n	80019a0 <timerRun+0x64>
		timer3_counter--;
 8001988:	4b13      	ldr	r3, [pc, #76]	; (80019d8 <timerRun+0x9c>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	3b01      	subs	r3, #1
 800198e:	4a12      	ldr	r2, [pc, #72]	; (80019d8 <timerRun+0x9c>)
 8001990:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0)
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <timerRun+0x9c>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	dc02      	bgt.n	80019a0 <timerRun+0x64>
		{
			timer3_flag =1;
 800199a:	4b10      	ldr	r3, [pc, #64]	; (80019dc <timerRun+0xa0>)
 800199c:	2201      	movs	r2, #1
 800199e:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80019a0:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <timerRun+0xa4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	dd0b      	ble.n	80019c0 <timerRun+0x84>
			timer4_counter--;
 80019a8:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <timerRun+0xa4>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	3b01      	subs	r3, #1
 80019ae:	4a0c      	ldr	r2, [pc, #48]	; (80019e0 <timerRun+0xa4>)
 80019b0:	6013      	str	r3, [r2, #0]
			if(timer4_counter<=0)
 80019b2:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <timerRun+0xa4>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	dc02      	bgt.n	80019c0 <timerRun+0x84>
			{
				timer4_flag =1;
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <timerRun+0xa8>)
 80019bc:	2201      	movs	r2, #1
 80019be:	601a      	str	r2, [r3, #0]
			}
		}
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bc80      	pop	{r7}
 80019c6:	4770      	bx	lr
 80019c8:	200000ac 	.word	0x200000ac
 80019cc:	200000b0 	.word	0x200000b0
 80019d0:	200000a8 	.word	0x200000a8
 80019d4:	200000b4 	.word	0x200000b4
 80019d8:	200000a4 	.word	0x200000a4
 80019dc:	200000b8 	.word	0x200000b8
 80019e0:	200000a0 	.word	0x200000a0
 80019e4:	200000bc 	.word	0x200000bc

080019e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80019ee:	4b15      	ldr	r3, [pc, #84]	; (8001a44 <HAL_MspInit+0x5c>)
 80019f0:	699b      	ldr	r3, [r3, #24]
 80019f2:	4a14      	ldr	r2, [pc, #80]	; (8001a44 <HAL_MspInit+0x5c>)
 80019f4:	f043 0301 	orr.w	r3, r3, #1
 80019f8:	6193      	str	r3, [r2, #24]
 80019fa:	4b12      	ldr	r3, [pc, #72]	; (8001a44 <HAL_MspInit+0x5c>)
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	f003 0301 	and.w	r3, r3, #1
 8001a02:	60bb      	str	r3, [r7, #8]
 8001a04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a06:	4b0f      	ldr	r3, [pc, #60]	; (8001a44 <HAL_MspInit+0x5c>)
 8001a08:	69db      	ldr	r3, [r3, #28]
 8001a0a:	4a0e      	ldr	r2, [pc, #56]	; (8001a44 <HAL_MspInit+0x5c>)
 8001a0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a10:	61d3      	str	r3, [r2, #28]
 8001a12:	4b0c      	ldr	r3, [pc, #48]	; (8001a44 <HAL_MspInit+0x5c>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a1a:	607b      	str	r3, [r7, #4]
 8001a1c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001a1e:	4b0a      	ldr	r3, [pc, #40]	; (8001a48 <HAL_MspInit+0x60>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	60fb      	str	r3, [r7, #12]
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001a32:	60fb      	str	r3, [r7, #12]
 8001a34:	4a04      	ldr	r2, [pc, #16]	; (8001a48 <HAL_MspInit+0x60>)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a3a:	bf00      	nop
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr
 8001a44:	40021000 	.word	0x40021000
 8001a48:	40010000 	.word	0x40010000

08001a4c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001a5c:	d113      	bne.n	8001a86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a5e:	4b0c      	ldr	r3, [pc, #48]	; (8001a90 <HAL_TIM_Base_MspInit+0x44>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	4a0b      	ldr	r2, [pc, #44]	; (8001a90 <HAL_TIM_Base_MspInit+0x44>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	61d3      	str	r3, [r2, #28]
 8001a6a:	4b09      	ldr	r3, [pc, #36]	; (8001a90 <HAL_TIM_Base_MspInit+0x44>)
 8001a6c:	69db      	ldr	r3, [r3, #28]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	60fb      	str	r3, [r7, #12]
 8001a74:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	201c      	movs	r0, #28
 8001a7c:	f000 f9a1 	bl	8001dc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a80:	201c      	movs	r0, #28
 8001a82:	f000 f9ba 	bl	8001dfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001a86:	bf00      	nop
 8001a88:	3710      	adds	r7, #16
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	40021000 	.word	0x40021000

08001a94 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a98:	e7fe      	b.n	8001a98 <NMI_Handler+0x4>

08001a9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9e:	e7fe      	b.n	8001a9e <HardFault_Handler+0x4>

08001aa0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa4:	e7fe      	b.n	8001aa4 <MemManage_Handler+0x4>

08001aa6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa6:	b480      	push	{r7}
 8001aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aaa:	e7fe      	b.n	8001aaa <BusFault_Handler+0x4>

08001aac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ab0:	e7fe      	b.n	8001ab0 <UsageFault_Handler+0x4>

08001ab2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bc80      	pop	{r7}
 8001abc:	4770      	bx	lr

08001abe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bc80      	pop	{r7}
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bc80      	pop	{r7}
 8001ad4:	4770      	bx	lr

08001ad6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ada:	f000 f87f 	bl	8001bdc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	bd80      	pop	{r7, pc}
	...

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM2_IRQHandler+0x10>)
 8001aea:	f000 ffe7 	bl	8002abc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	200000c0 	.word	0x200000c0

08001af8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001af8:	b480      	push	{r7}
 8001afa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001afc:	bf00      	nop
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bc80      	pop	{r7}
 8001b02:	4770      	bx	lr

08001b04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b04:	480c      	ldr	r0, [pc, #48]	; (8001b38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b06:	490d      	ldr	r1, [pc, #52]	; (8001b3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b08:	4a0d      	ldr	r2, [pc, #52]	; (8001b40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0a      	ldr	r2, [pc, #40]	; (8001b44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b1c:	4c0a      	ldr	r4, [pc, #40]	; (8001b48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001b2a:	f7ff ffe5 	bl	8001af8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f001 fb0d 	bl	800314c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001b32:	f7ff fd81 	bl	8001638 <main>
  bx lr
 8001b36:	4770      	bx	lr
  ldr r0, =_sdata
 8001b38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b3c:	20000058 	.word	0x20000058
  ldr r2, =_sidata
 8001b40:	080031e4 	.word	0x080031e4
  ldr r2, =_sbss
 8001b44:	20000058 	.word	0x20000058
  ldr r4, =_ebss
 8001b48:	2000010c 	.word	0x2000010c

08001b4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001b4c:	e7fe      	b.n	8001b4c <ADC1_2_IRQHandler>
	...

08001b50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b54:	4b08      	ldr	r3, [pc, #32]	; (8001b78 <HAL_Init+0x28>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a07      	ldr	r2, [pc, #28]	; (8001b78 <HAL_Init+0x28>)
 8001b5a:	f043 0310 	orr.w	r3, r3, #16
 8001b5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f000 f923 	bl	8001dac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b66:	200f      	movs	r0, #15
 8001b68:	f000 f808 	bl	8001b7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b6c:	f7ff ff3c 	bl	80019e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40022000 	.word	0x40022000

08001b7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b082      	sub	sp, #8
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b84:	4b12      	ldr	r3, [pc, #72]	; (8001bd0 <HAL_InitTick+0x54>)
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	4b12      	ldr	r3, [pc, #72]	; (8001bd4 <HAL_InitTick+0x58>)
 8001b8a:	781b      	ldrb	r3, [r3, #0]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b92:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f93b 	bl	8001e16 <HAL_SYSTICK_Config>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e00e      	b.n	8001bc8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b0f      	cmp	r3, #15
 8001bae:	d80a      	bhi.n	8001bc6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb8:	f000 f903 	bl	8001dc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bbc:	4a06      	ldr	r2, [pc, #24]	; (8001bd8 <HAL_InitTick+0x5c>)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	e000      	b.n	8001bc8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
}
 8001bc8:	4618      	mov	r0, r3
 8001bca:	3708      	adds	r7, #8
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000004c 	.word	0x2000004c
 8001bd4:	20000054 	.word	0x20000054
 8001bd8:	20000050 	.word	0x20000050

08001bdc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be0:	4b05      	ldr	r3, [pc, #20]	; (8001bf8 <HAL_IncTick+0x1c>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	461a      	mov	r2, r3
 8001be6:	4b05      	ldr	r3, [pc, #20]	; (8001bfc <HAL_IncTick+0x20>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	4a03      	ldr	r2, [pc, #12]	; (8001bfc <HAL_IncTick+0x20>)
 8001bee:	6013      	str	r3, [r2, #0]
}
 8001bf0:	bf00      	nop
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bc80      	pop	{r7}
 8001bf6:	4770      	bx	lr
 8001bf8:	20000054 	.word	0x20000054
 8001bfc:	20000108 	.word	0x20000108

08001c00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  return uwTick;
 8001c04:	4b02      	ldr	r3, [pc, #8]	; (8001c10 <HAL_GetTick+0x10>)
 8001c06:	681b      	ldr	r3, [r3, #0]
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr
 8001c10:	20000108 	.word	0x20000108

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bc80      	pop	{r7}
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bc80      	pop	{r7}
 8001c70:	4770      	bx	lr
 8001c72:	bf00      	nop
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4906      	ldr	r1, [pc, #24]	; (8001cac <__NVIC_EnableIRQ+0x34>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	e000e100 	.word	0xe000e100

08001cb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	6039      	str	r1, [r7, #0]
 8001cba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	db0a      	blt.n	8001cda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	b2da      	uxtb	r2, r3
 8001cc8:	490c      	ldr	r1, [pc, #48]	; (8001cfc <__NVIC_SetPriority+0x4c>)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	0112      	lsls	r2, r2, #4
 8001cd0:	b2d2      	uxtb	r2, r2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cd8:	e00a      	b.n	8001cf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	b2da      	uxtb	r2, r3
 8001cde:	4908      	ldr	r1, [pc, #32]	; (8001d00 <__NVIC_SetPriority+0x50>)
 8001ce0:	79fb      	ldrb	r3, [r7, #7]
 8001ce2:	f003 030f 	and.w	r3, r3, #15
 8001ce6:	3b04      	subs	r3, #4
 8001ce8:	0112      	lsls	r2, r2, #4
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	440b      	add	r3, r1
 8001cee:	761a      	strb	r2, [r3, #24]
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bc80      	pop	{r7}
 8001cf8:	4770      	bx	lr
 8001cfa:	bf00      	nop
 8001cfc:	e000e100 	.word	0xe000e100
 8001d00:	e000ed00 	.word	0xe000ed00

08001d04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d04:	b480      	push	{r7}
 8001d06:	b089      	sub	sp, #36	; 0x24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0307 	and.w	r3, r3, #7
 8001d16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d18:	69fb      	ldr	r3, [r7, #28]
 8001d1a:	f1c3 0307 	rsb	r3, r3, #7
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	bf28      	it	cs
 8001d22:	2304      	movcs	r3, #4
 8001d24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	3304      	adds	r3, #4
 8001d2a:	2b06      	cmp	r3, #6
 8001d2c:	d902      	bls.n	8001d34 <NVIC_EncodePriority+0x30>
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	3b03      	subs	r3, #3
 8001d32:	e000      	b.n	8001d36 <NVIC_EncodePriority+0x32>
 8001d34:	2300      	movs	r3, #0
 8001d36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d38:	f04f 32ff 	mov.w	r2, #4294967295
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d42:	43da      	mvns	r2, r3
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	401a      	ands	r2, r3
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d4c:	f04f 31ff 	mov.w	r1, #4294967295
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	fa01 f303 	lsl.w	r3, r1, r3
 8001d56:	43d9      	mvns	r1, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d5c:	4313      	orrs	r3, r2
         );
}
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3724      	adds	r7, #36	; 0x24
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bc80      	pop	{r7}
 8001d66:	4770      	bx	lr

08001d68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	3b01      	subs	r3, #1
 8001d74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d78:	d301      	bcc.n	8001d7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	e00f      	b.n	8001d9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <SysTick_Config+0x40>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	3b01      	subs	r3, #1
 8001d84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d86:	210f      	movs	r1, #15
 8001d88:	f04f 30ff 	mov.w	r0, #4294967295
 8001d8c:	f7ff ff90 	bl	8001cb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d90:	4b05      	ldr	r3, [pc, #20]	; (8001da8 <SysTick_Config+0x40>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d96:	4b04      	ldr	r3, [pc, #16]	; (8001da8 <SysTick_Config+0x40>)
 8001d98:	2207      	movs	r2, #7
 8001d9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d9c:	2300      	movs	r3, #0
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3708      	adds	r7, #8
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	e000e010 	.word	0xe000e010

08001dac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b082      	sub	sp, #8
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f7ff ff2d 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dba:	bf00      	nop
 8001dbc:	3708      	adds	r7, #8
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	bd80      	pop	{r7, pc}

08001dc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b086      	sub	sp, #24
 8001dc6:	af00      	add	r7, sp, #0
 8001dc8:	4603      	mov	r3, r0
 8001dca:	60b9      	str	r1, [r7, #8]
 8001dcc:	607a      	str	r2, [r7, #4]
 8001dce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dd4:	f7ff ff42 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001dd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dda:	687a      	ldr	r2, [r7, #4]
 8001ddc:	68b9      	ldr	r1, [r7, #8]
 8001dde:	6978      	ldr	r0, [r7, #20]
 8001de0:	f7ff ff90 	bl	8001d04 <NVIC_EncodePriority>
 8001de4:	4602      	mov	r2, r0
 8001de6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dea:	4611      	mov	r1, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7ff ff5f 	bl	8001cb0 <__NVIC_SetPriority>
}
 8001df2:	bf00      	nop
 8001df4:	3718      	adds	r7, #24
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bd80      	pop	{r7, pc}

08001dfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dfa:	b580      	push	{r7, lr}
 8001dfc:	b082      	sub	sp, #8
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	4603      	mov	r3, r0
 8001e02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff ff35 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e0e:	bf00      	nop
 8001e10:	3708      	adds	r7, #8
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}

08001e16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e16:	b580      	push	{r7, lr}
 8001e18:	b082      	sub	sp, #8
 8001e1a:	af00      	add	r7, sp, #0
 8001e1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e1e:	6878      	ldr	r0, [r7, #4]
 8001e20:	f7ff ffa2 	bl	8001d68 <SysTick_Config>
 8001e24:	4603      	mov	r3, r0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
	...

08001e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b08b      	sub	sp, #44	; 0x2c
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e42:	e148      	b.n	80020d6 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e44:	2201      	movs	r2, #1
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	69fa      	ldr	r2, [r7, #28]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	f040 8137 	bne.w	80020d0 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	4aa3      	ldr	r2, [pc, #652]	; (80020f4 <HAL_GPIO_Init+0x2c4>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d05e      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e6c:	4aa1      	ldr	r2, [pc, #644]	; (80020f4 <HAL_GPIO_Init+0x2c4>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d875      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e72:	4aa1      	ldr	r2, [pc, #644]	; (80020f8 <HAL_GPIO_Init+0x2c8>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d058      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e78:	4a9f      	ldr	r2, [pc, #636]	; (80020f8 <HAL_GPIO_Init+0x2c8>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d86f      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e7e:	4a9f      	ldr	r2, [pc, #636]	; (80020fc <HAL_GPIO_Init+0x2cc>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d052      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e84:	4a9d      	ldr	r2, [pc, #628]	; (80020fc <HAL_GPIO_Init+0x2cc>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d869      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e8a:	4a9d      	ldr	r2, [pc, #628]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d04c      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e90:	4a9b      	ldr	r2, [pc, #620]	; (8002100 <HAL_GPIO_Init+0x2d0>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d863      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001e96:	4a9b      	ldr	r2, [pc, #620]	; (8002104 <HAL_GPIO_Init+0x2d4>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d046      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
 8001e9c:	4a99      	ldr	r2, [pc, #612]	; (8002104 <HAL_GPIO_Init+0x2d4>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d85d      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001ea2:	2b12      	cmp	r3, #18
 8001ea4:	d82a      	bhi.n	8001efc <HAL_GPIO_Init+0xcc>
 8001ea6:	2b12      	cmp	r3, #18
 8001ea8:	d859      	bhi.n	8001f5e <HAL_GPIO_Init+0x12e>
 8001eaa:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <HAL_GPIO_Init+0x80>)
 8001eac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eb0:	08001f2b 	.word	0x08001f2b
 8001eb4:	08001f05 	.word	0x08001f05
 8001eb8:	08001f17 	.word	0x08001f17
 8001ebc:	08001f59 	.word	0x08001f59
 8001ec0:	08001f5f 	.word	0x08001f5f
 8001ec4:	08001f5f 	.word	0x08001f5f
 8001ec8:	08001f5f 	.word	0x08001f5f
 8001ecc:	08001f5f 	.word	0x08001f5f
 8001ed0:	08001f5f 	.word	0x08001f5f
 8001ed4:	08001f5f 	.word	0x08001f5f
 8001ed8:	08001f5f 	.word	0x08001f5f
 8001edc:	08001f5f 	.word	0x08001f5f
 8001ee0:	08001f5f 	.word	0x08001f5f
 8001ee4:	08001f5f 	.word	0x08001f5f
 8001ee8:	08001f5f 	.word	0x08001f5f
 8001eec:	08001f5f 	.word	0x08001f5f
 8001ef0:	08001f5f 	.word	0x08001f5f
 8001ef4:	08001f0d 	.word	0x08001f0d
 8001ef8:	08001f21 	.word	0x08001f21
 8001efc:	4a82      	ldr	r2, [pc, #520]	; (8002108 <HAL_GPIO_Init+0x2d8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d013      	beq.n	8001f2a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f02:	e02c      	b.n	8001f5e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	623b      	str	r3, [r7, #32]
          break;
 8001f0a:	e029      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	3304      	adds	r3, #4
 8001f12:	623b      	str	r3, [r7, #32]
          break;
 8001f14:	e024      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	3308      	adds	r3, #8
 8001f1c:	623b      	str	r3, [r7, #32]
          break;
 8001f1e:	e01f      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001f20:	683b      	ldr	r3, [r7, #0]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	330c      	adds	r3, #12
 8001f26:	623b      	str	r3, [r7, #32]
          break;
 8001f28:	e01a      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d102      	bne.n	8001f38 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001f32:	2304      	movs	r3, #4
 8001f34:	623b      	str	r3, [r7, #32]
          break;
 8001f36:	e013      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2b01      	cmp	r3, #1
 8001f3e:	d105      	bne.n	8001f4c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f40:	2308      	movs	r3, #8
 8001f42:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	69fa      	ldr	r2, [r7, #28]
 8001f48:	611a      	str	r2, [r3, #16]
          break;
 8001f4a:	e009      	b.n	8001f60 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f4c:	2308      	movs	r3, #8
 8001f4e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	69fa      	ldr	r2, [r7, #28]
 8001f54:	615a      	str	r2, [r3, #20]
          break;
 8001f56:	e003      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	623b      	str	r3, [r7, #32]
          break;
 8001f5c:	e000      	b.n	8001f60 <HAL_GPIO_Init+0x130>
          break;
 8001f5e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	2bff      	cmp	r3, #255	; 0xff
 8001f64:	d801      	bhi.n	8001f6a <HAL_GPIO_Init+0x13a>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	e001      	b.n	8001f6e <HAL_GPIO_Init+0x13e>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	3304      	adds	r3, #4
 8001f6e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f70:	69bb      	ldr	r3, [r7, #24]
 8001f72:	2bff      	cmp	r3, #255	; 0xff
 8001f74:	d802      	bhi.n	8001f7c <HAL_GPIO_Init+0x14c>
 8001f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	e002      	b.n	8001f82 <HAL_GPIO_Init+0x152>
 8001f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f7e:	3b08      	subs	r3, #8
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	210f      	movs	r1, #15
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f90:	43db      	mvns	r3, r3
 8001f92:	401a      	ands	r2, r3
 8001f94:	6a39      	ldr	r1, [r7, #32]
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	fa01 f303 	lsl.w	r3, r1, r3
 8001f9c:	431a      	orrs	r2, r3
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	f000 8090 	beq.w	80020d0 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001fb0:	4b56      	ldr	r3, [pc, #344]	; (800210c <HAL_GPIO_Init+0x2dc>)
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	4a55      	ldr	r2, [pc, #340]	; (800210c <HAL_GPIO_Init+0x2dc>)
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	6193      	str	r3, [r2, #24]
 8001fbc:	4b53      	ldr	r3, [pc, #332]	; (800210c <HAL_GPIO_Init+0x2dc>)
 8001fbe:	699b      	ldr	r3, [r3, #24]
 8001fc0:	f003 0301 	and.w	r3, r3, #1
 8001fc4:	60bb      	str	r3, [r7, #8]
 8001fc6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001fc8:	4a51      	ldr	r2, [pc, #324]	; (8002110 <HAL_GPIO_Init+0x2e0>)
 8001fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fcc:	089b      	lsrs	r3, r3, #2
 8001fce:	3302      	adds	r3, #2
 8001fd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd8:	f003 0303 	and.w	r3, r3, #3
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	68fa      	ldr	r2, [r7, #12]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	4a49      	ldr	r2, [pc, #292]	; (8002114 <HAL_GPIO_Init+0x2e4>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d00d      	beq.n	8002010 <HAL_GPIO_Init+0x1e0>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	4a48      	ldr	r2, [pc, #288]	; (8002118 <HAL_GPIO_Init+0x2e8>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d007      	beq.n	800200c <HAL_GPIO_Init+0x1dc>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4a47      	ldr	r2, [pc, #284]	; (800211c <HAL_GPIO_Init+0x2ec>)
 8002000:	4293      	cmp	r3, r2
 8002002:	d101      	bne.n	8002008 <HAL_GPIO_Init+0x1d8>
 8002004:	2302      	movs	r3, #2
 8002006:	e004      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 8002008:	2303      	movs	r3, #3
 800200a:	e002      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 800200c:	2301      	movs	r3, #1
 800200e:	e000      	b.n	8002012 <HAL_GPIO_Init+0x1e2>
 8002010:	2300      	movs	r3, #0
 8002012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002014:	f002 0203 	and.w	r2, r2, #3
 8002018:	0092      	lsls	r2, r2, #2
 800201a:	4093      	lsls	r3, r2
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	4313      	orrs	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002022:	493b      	ldr	r1, [pc, #236]	; (8002110 <HAL_GPIO_Init+0x2e0>)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	089b      	lsrs	r3, r3, #2
 8002028:	3302      	adds	r3, #2
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d006      	beq.n	800204a <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800203c:	4b38      	ldr	r3, [pc, #224]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	4937      	ldr	r1, [pc, #220]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8002042:	69bb      	ldr	r3, [r7, #24]
 8002044:	4313      	orrs	r3, r2
 8002046:	600b      	str	r3, [r1, #0]
 8002048:	e006      	b.n	8002058 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800204a:	4b35      	ldr	r3, [pc, #212]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	69bb      	ldr	r3, [r7, #24]
 8002050:	43db      	mvns	r3, r3
 8002052:	4933      	ldr	r1, [pc, #204]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8002054:	4013      	ands	r3, r2
 8002056:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d006      	beq.n	8002072 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002064:	4b2e      	ldr	r3, [pc, #184]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	492d      	ldr	r1, [pc, #180]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 800206a:	69bb      	ldr	r3, [r7, #24]
 800206c:	4313      	orrs	r3, r2
 800206e:	604b      	str	r3, [r1, #4]
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002072:	4b2b      	ldr	r3, [pc, #172]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8002074:	685a      	ldr	r2, [r3, #4]
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	43db      	mvns	r3, r3
 800207a:	4929      	ldr	r1, [pc, #164]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 800207c:	4013      	ands	r3, r2
 800207e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002088:	2b00      	cmp	r3, #0
 800208a:	d006      	beq.n	800209a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800208c:	4b24      	ldr	r3, [pc, #144]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	4923      	ldr	r1, [pc, #140]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	4313      	orrs	r3, r2
 8002096:	608b      	str	r3, [r1, #8]
 8002098:	e006      	b.n	80020a8 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800209a:	4b21      	ldr	r3, [pc, #132]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 800209c:	689a      	ldr	r2, [r3, #8]
 800209e:	69bb      	ldr	r3, [r7, #24]
 80020a0:	43db      	mvns	r3, r3
 80020a2:	491f      	ldr	r1, [pc, #124]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 80020a4:	4013      	ands	r3, r2
 80020a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d006      	beq.n	80020c2 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80020b4:	4b1a      	ldr	r3, [pc, #104]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4919      	ldr	r1, [pc, #100]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	4313      	orrs	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
 80020c0:	e006      	b.n	80020d0 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80020c2:	4b17      	ldr	r3, [pc, #92]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 80020c4:	68da      	ldr	r2, [r3, #12]
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	4915      	ldr	r1, [pc, #84]	; (8002120 <HAL_GPIO_Init+0x2f0>)
 80020cc:	4013      	ands	r3, r2
 80020ce:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	3301      	adds	r3, #1
 80020d4:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	f47f aeaf 	bne.w	8001e44 <HAL_GPIO_Init+0x14>
  }
}
 80020e6:	bf00      	nop
 80020e8:	bf00      	nop
 80020ea:	372c      	adds	r7, #44	; 0x2c
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bc80      	pop	{r7}
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	10320000 	.word	0x10320000
 80020f8:	10310000 	.word	0x10310000
 80020fc:	10220000 	.word	0x10220000
 8002100:	10210000 	.word	0x10210000
 8002104:	10120000 	.word	0x10120000
 8002108:	10110000 	.word	0x10110000
 800210c:	40021000 	.word	0x40021000
 8002110:	40010000 	.word	0x40010000
 8002114:	40010800 	.word	0x40010800
 8002118:	40010c00 	.word	0x40010c00
 800211c:	40011000 	.word	0x40011000
 8002120:	40010400 	.word	0x40010400

08002124 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
 800212c:	460b      	mov	r3, r1
 800212e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	689a      	ldr	r2, [r3, #8]
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	4013      	ands	r3, r2
 8002138:	2b00      	cmp	r3, #0
 800213a:	d002      	beq.n	8002142 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800213c:	2301      	movs	r3, #1
 800213e:	73fb      	strb	r3, [r7, #15]
 8002140:	e001      	b.n	8002146 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002146:	7bfb      	ldrb	r3, [r7, #15]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3714      	adds	r7, #20
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	460b      	mov	r3, r1
 800215c:	807b      	strh	r3, [r7, #2]
 800215e:	4613      	mov	r3, r2
 8002160:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002162:	787b      	ldrb	r3, [r7, #1]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d003      	beq.n	8002170 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002168:	887a      	ldrh	r2, [r7, #2]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800216e:	e003      	b.n	8002178 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002170:	887b      	ldrh	r3, [r7, #2]
 8002172:	041a      	lsls	r2, r3, #16
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	611a      	str	r2, [r3, #16]
}
 8002178:	bf00      	nop
 800217a:	370c      	adds	r7, #12
 800217c:	46bd      	mov	sp, r7
 800217e:	bc80      	pop	{r7}
 8002180:	4770      	bx	lr

08002182 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002182:	b480      	push	{r7}
 8002184:	b085      	sub	sp, #20
 8002186:	af00      	add	r7, sp, #0
 8002188:	6078      	str	r0, [r7, #4]
 800218a:	460b      	mov	r3, r1
 800218c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	68db      	ldr	r3, [r3, #12]
 8002192:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002194:	887a      	ldrh	r2, [r7, #2]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	4013      	ands	r3, r2
 800219a:	041a      	lsls	r2, r3, #16
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	43d9      	mvns	r1, r3
 80021a0:	887b      	ldrh	r3, [r7, #2]
 80021a2:	400b      	ands	r3, r1
 80021a4:	431a      	orrs	r2, r3
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	611a      	str	r2, [r3, #16]
}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bc80      	pop	{r7}
 80021b2:	4770      	bx	lr

080021b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d101      	bne.n	80021c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	e26c      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f000 8087 	beq.w	80022e2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021d4:	4b92      	ldr	r3, [pc, #584]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f003 030c 	and.w	r3, r3, #12
 80021dc:	2b04      	cmp	r3, #4
 80021de:	d00c      	beq.n	80021fa <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80021e0:	4b8f      	ldr	r3, [pc, #572]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b08      	cmp	r3, #8
 80021ea:	d112      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
 80021ec:	4b8c      	ldr	r3, [pc, #560]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021f8:	d10b      	bne.n	8002212 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fa:	4b89      	ldr	r3, [pc, #548]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d06c      	beq.n	80022e0 <HAL_RCC_OscConfig+0x12c>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d168      	bne.n	80022e0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e246      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221a:	d106      	bne.n	800222a <HAL_RCC_OscConfig+0x76>
 800221c:	4b80      	ldr	r3, [pc, #512]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a7f      	ldr	r2, [pc, #508]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	6013      	str	r3, [r2, #0]
 8002228:	e02e      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d10c      	bne.n	800224c <HAL_RCC_OscConfig+0x98>
 8002232:	4b7b      	ldr	r3, [pc, #492]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a7a      	ldr	r2, [pc, #488]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002238:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223c:	6013      	str	r3, [r2, #0]
 800223e:	4b78      	ldr	r3, [pc, #480]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a77      	ldr	r2, [pc, #476]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002244:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	e01d      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002254:	d10c      	bne.n	8002270 <HAL_RCC_OscConfig+0xbc>
 8002256:	4b72      	ldr	r3, [pc, #456]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	4a71      	ldr	r2, [pc, #452]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800225c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002260:	6013      	str	r3, [r2, #0]
 8002262:	4b6f      	ldr	r3, [pc, #444]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a6e      	ldr	r2, [pc, #440]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002268:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	e00b      	b.n	8002288 <HAL_RCC_OscConfig+0xd4>
 8002270:	4b6b      	ldr	r3, [pc, #428]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	4a6a      	ldr	r2, [pc, #424]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002276:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800227a:	6013      	str	r3, [r2, #0]
 800227c:	4b68      	ldr	r3, [pc, #416]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a67      	ldr	r2, [pc, #412]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002282:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002286:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d013      	beq.n	80022b8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002290:	f7ff fcb6 	bl	8001c00 <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002296:	e008      	b.n	80022aa <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002298:	f7ff fcb2 	bl	8001c00 <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b64      	cmp	r3, #100	; 0x64
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e1fa      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022aa:	4b5d      	ldr	r3, [pc, #372]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d0f0      	beq.n	8002298 <HAL_RCC_OscConfig+0xe4>
 80022b6:	e014      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b8:	f7ff fca2 	bl	8001c00 <HAL_GetTick>
 80022bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c0:	f7ff fc9e 	bl	8001c00 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b64      	cmp	r3, #100	; 0x64
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e1e6      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d2:	4b53      	ldr	r3, [pc, #332]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x10c>
 80022de:	e000      	b.n	80022e2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d063      	beq.n	80023b6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ee:	4b4c      	ldr	r3, [pc, #304]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	f003 030c 	and.w	r3, r3, #12
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d00b      	beq.n	8002312 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80022fa:	4b49      	ldr	r3, [pc, #292]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b08      	cmp	r3, #8
 8002304:	d11c      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
 8002306:	4b46      	ldr	r3, [pc, #280]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d116      	bne.n	8002340 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002312:	4b43      	ldr	r3, [pc, #268]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f003 0302 	and.w	r3, r3, #2
 800231a:	2b00      	cmp	r3, #0
 800231c:	d005      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d001      	beq.n	800232a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e1ba      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800232a:	4b3d      	ldr	r3, [pc, #244]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	695b      	ldr	r3, [r3, #20]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4939      	ldr	r1, [pc, #228]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800233a:	4313      	orrs	r3, r2
 800233c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800233e:	e03a      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	691b      	ldr	r3, [r3, #16]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d020      	beq.n	800238a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002348:	4b36      	ldr	r3, [pc, #216]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800234a:	2201      	movs	r2, #1
 800234c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800234e:	f7ff fc57 	bl	8001c00 <HAL_GetTick>
 8002352:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002354:	e008      	b.n	8002368 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002356:	f7ff fc53 	bl	8001c00 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d901      	bls.n	8002368 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002364:	2303      	movs	r3, #3
 8002366:	e19b      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002368:	4b2d      	ldr	r3, [pc, #180]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0302 	and.w	r3, r3, #2
 8002370:	2b00      	cmp	r3, #0
 8002372:	d0f0      	beq.n	8002356 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002374:	4b2a      	ldr	r3, [pc, #168]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	00db      	lsls	r3, r3, #3
 8002382:	4927      	ldr	r1, [pc, #156]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 8002384:	4313      	orrs	r3, r2
 8002386:	600b      	str	r3, [r1, #0]
 8002388:	e015      	b.n	80023b6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800238a:	4b26      	ldr	r3, [pc, #152]	; (8002424 <HAL_RCC_OscConfig+0x270>)
 800238c:	2200      	movs	r2, #0
 800238e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002390:	f7ff fc36 	bl	8001c00 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fc32 	bl	8001c00 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e17a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023aa:	4b1d      	ldr	r3, [pc, #116]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d03a      	beq.n	8002438 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	699b      	ldr	r3, [r3, #24]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d019      	beq.n	80023fe <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ca:	4b17      	ldr	r3, [pc, #92]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 80023cc:	2201      	movs	r2, #1
 80023ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023d0:	f7ff fc16 	bl	8001c00 <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023d8:	f7ff fc12 	bl	8001c00 <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e15a      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <HAL_RCC_OscConfig+0x26c>)
 80023ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80023f6:	2001      	movs	r0, #1
 80023f8:	f000 faa6 	bl	8002948 <RCC_Delay>
 80023fc:	e01c      	b.n	8002438 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023fe:	4b0a      	ldr	r3, [pc, #40]	; (8002428 <HAL_RCC_OscConfig+0x274>)
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002404:	f7ff fbfc 	bl	8001c00 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800240a:	e00f      	b.n	800242c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800240c:	f7ff fbf8 	bl	8001c00 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	2b02      	cmp	r3, #2
 8002418:	d908      	bls.n	800242c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800241a:	2303      	movs	r3, #3
 800241c:	e140      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
 800241e:	bf00      	nop
 8002420:	40021000 	.word	0x40021000
 8002424:	42420000 	.word	0x42420000
 8002428:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	4b9e      	ldr	r3, [pc, #632]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d1e9      	bne.n	800240c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0304 	and.w	r3, r3, #4
 8002440:	2b00      	cmp	r3, #0
 8002442:	f000 80a6 	beq.w	8002592 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002446:	2300      	movs	r3, #0
 8002448:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800244a:	4b97      	ldr	r3, [pc, #604]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800244c:	69db      	ldr	r3, [r3, #28]
 800244e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d10d      	bne.n	8002472 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002456:	4b94      	ldr	r3, [pc, #592]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002458:	69db      	ldr	r3, [r3, #28]
 800245a:	4a93      	ldr	r2, [pc, #588]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800245c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002460:	61d3      	str	r3, [r2, #28]
 8002462:	4b91      	ldr	r3, [pc, #580]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002464:	69db      	ldr	r3, [r3, #28]
 8002466:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800246a:	60bb      	str	r3, [r7, #8]
 800246c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800246e:	2301      	movs	r3, #1
 8002470:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002472:	4b8e      	ldr	r3, [pc, #568]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800247a:	2b00      	cmp	r3, #0
 800247c:	d118      	bne.n	80024b0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800247e:	4b8b      	ldr	r3, [pc, #556]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a8a      	ldr	r2, [pc, #552]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 8002484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002488:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800248a:	f7ff fbb9 	bl	8001c00 <HAL_GetTick>
 800248e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002490:	e008      	b.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002492:	f7ff fbb5 	bl	8001c00 <HAL_GetTick>
 8002496:	4602      	mov	r2, r0
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	1ad3      	subs	r3, r2, r3
 800249c:	2b64      	cmp	r3, #100	; 0x64
 800249e:	d901      	bls.n	80024a4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80024a0:	2303      	movs	r3, #3
 80024a2:	e0fd      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	4b81      	ldr	r3, [pc, #516]	; (80026ac <HAL_RCC_OscConfig+0x4f8>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d0f0      	beq.n	8002492 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	68db      	ldr	r3, [r3, #12]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d106      	bne.n	80024c6 <HAL_RCC_OscConfig+0x312>
 80024b8:	4b7b      	ldr	r3, [pc, #492]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a7a      	ldr	r2, [pc, #488]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024be:	f043 0301 	orr.w	r3, r3, #1
 80024c2:	6213      	str	r3, [r2, #32]
 80024c4:	e02d      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10c      	bne.n	80024e8 <HAL_RCC_OscConfig+0x334>
 80024ce:	4b76      	ldr	r3, [pc, #472]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d0:	6a1b      	ldr	r3, [r3, #32]
 80024d2:	4a75      	ldr	r2, [pc, #468]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6213      	str	r3, [r2, #32]
 80024da:	4b73      	ldr	r3, [pc, #460]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024dc:	6a1b      	ldr	r3, [r3, #32]
 80024de:	4a72      	ldr	r2, [pc, #456]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6213      	str	r3, [r2, #32]
 80024e6:	e01c      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	2b05      	cmp	r3, #5
 80024ee:	d10c      	bne.n	800250a <HAL_RCC_OscConfig+0x356>
 80024f0:	4b6d      	ldr	r3, [pc, #436]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f2:	6a1b      	ldr	r3, [r3, #32]
 80024f4:	4a6c      	ldr	r2, [pc, #432]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	6213      	str	r3, [r2, #32]
 80024fc:	4b6a      	ldr	r3, [pc, #424]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4a69      	ldr	r2, [pc, #420]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002502:	f043 0301 	orr.w	r3, r3, #1
 8002506:	6213      	str	r3, [r2, #32]
 8002508:	e00b      	b.n	8002522 <HAL_RCC_OscConfig+0x36e>
 800250a:	4b67      	ldr	r3, [pc, #412]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	4a66      	ldr	r2, [pc, #408]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002510:	f023 0301 	bic.w	r3, r3, #1
 8002514:	6213      	str	r3, [r2, #32]
 8002516:	4b64      	ldr	r3, [pc, #400]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	4a63      	ldr	r2, [pc, #396]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800251c:	f023 0304 	bic.w	r3, r3, #4
 8002520:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	68db      	ldr	r3, [r3, #12]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d015      	beq.n	8002556 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800252a:	f7ff fb69 	bl	8001c00 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002530:	e00a      	b.n	8002548 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002532:	f7ff fb65 	bl	8001c00 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002540:	4293      	cmp	r3, r2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e0ab      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002548:	4b57      	ldr	r3, [pc, #348]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800254a:	6a1b      	ldr	r3, [r3, #32]
 800254c:	f003 0302 	and.w	r3, r3, #2
 8002550:	2b00      	cmp	r3, #0
 8002552:	d0ee      	beq.n	8002532 <HAL_RCC_OscConfig+0x37e>
 8002554:	e014      	b.n	8002580 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002556:	f7ff fb53 	bl	8001c00 <HAL_GetTick>
 800255a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800255c:	e00a      	b.n	8002574 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800255e:	f7ff fb4f 	bl	8001c00 <HAL_GetTick>
 8002562:	4602      	mov	r2, r0
 8002564:	693b      	ldr	r3, [r7, #16]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	f241 3288 	movw	r2, #5000	; 0x1388
 800256c:	4293      	cmp	r3, r2
 800256e:	d901      	bls.n	8002574 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e095      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002574:	4b4c      	ldr	r3, [pc, #304]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002576:	6a1b      	ldr	r3, [r3, #32]
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d1ee      	bne.n	800255e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002580:	7dfb      	ldrb	r3, [r7, #23]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d105      	bne.n	8002592 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002586:	4b48      	ldr	r3, [pc, #288]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002588:	69db      	ldr	r3, [r3, #28]
 800258a:	4a47      	ldr	r2, [pc, #284]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800258c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002590:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	69db      	ldr	r3, [r3, #28]
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8081 	beq.w	800269e <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800259c:	4b42      	ldr	r3, [pc, #264]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b08      	cmp	r3, #8
 80025a6:	d061      	beq.n	800266c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	69db      	ldr	r3, [r3, #28]
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d146      	bne.n	800263e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b0:	4b3f      	ldr	r3, [pc, #252]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 80025b2:	2200      	movs	r2, #0
 80025b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025b6:	f7ff fb23 	bl	8001c00 <HAL_GetTick>
 80025ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025bc:	e008      	b.n	80025d0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025be:	f7ff fb1f 	bl	8001c00 <HAL_GetTick>
 80025c2:	4602      	mov	r2, r0
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	1ad3      	subs	r3, r2, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d901      	bls.n	80025d0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80025cc:	2303      	movs	r3, #3
 80025ce:	e067      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d0:	4b35      	ldr	r3, [pc, #212]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d1f0      	bne.n	80025be <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6a1b      	ldr	r3, [r3, #32]
 80025e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e4:	d108      	bne.n	80025f8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80025e6:	4b30      	ldr	r3, [pc, #192]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	492d      	ldr	r1, [pc, #180]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b2b      	ldr	r3, [pc, #172]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a19      	ldr	r1, [r3, #32]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002608:	430b      	orrs	r3, r1
 800260a:	4927      	ldr	r1, [pc, #156]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002610:	4b27      	ldr	r3, [pc, #156]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 8002612:	2201      	movs	r2, #1
 8002614:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002616:	f7ff faf3 	bl	8001c00 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800261c:	e008      	b.n	8002630 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800261e:	f7ff faef 	bl	8001c00 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	2b02      	cmp	r3, #2
 800262a:	d901      	bls.n	8002630 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800262c:	2303      	movs	r3, #3
 800262e:	e037      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002630:	4b1d      	ldr	r3, [pc, #116]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002638:	2b00      	cmp	r3, #0
 800263a:	d0f0      	beq.n	800261e <HAL_RCC_OscConfig+0x46a>
 800263c:	e02f      	b.n	800269e <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263e:	4b1c      	ldr	r3, [pc, #112]	; (80026b0 <HAL_RCC_OscConfig+0x4fc>)
 8002640:	2200      	movs	r2, #0
 8002642:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002644:	f7ff fadc 	bl	8001c00 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800264a:	e008      	b.n	800265e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800264c:	f7ff fad8 	bl	8001c00 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	2b02      	cmp	r3, #2
 8002658:	d901      	bls.n	800265e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e020      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800265e:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d1f0      	bne.n	800264c <HAL_RCC_OscConfig+0x498>
 800266a:	e018      	b.n	800269e <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	69db      	ldr	r3, [r3, #28]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d101      	bne.n	8002678 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e013      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002678:	4b0b      	ldr	r3, [pc, #44]	; (80026a8 <HAL_RCC_OscConfig+0x4f4>)
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	429a      	cmp	r2, r3
 800268a:	d106      	bne.n	800269a <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002696:	429a      	cmp	r2, r3
 8002698:	d001      	beq.n	800269e <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	40021000 	.word	0x40021000
 80026ac:	40007000 	.word	0x40007000
 80026b0:	42420060 	.word	0x42420060

080026b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
 80026bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d101      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0d0      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026c8:	4b6a      	ldr	r3, [pc, #424]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0307 	and.w	r3, r3, #7
 80026d0:	683a      	ldr	r2, [r7, #0]
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d910      	bls.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026d6:	4b67      	ldr	r3, [pc, #412]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f023 0207 	bic.w	r2, r3, #7
 80026de:	4965      	ldr	r1, [pc, #404]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e6:	4b63      	ldr	r3, [pc, #396]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0307 	and.w	r3, r3, #7
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d001      	beq.n	80026f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0b8      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d020      	beq.n	8002746 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f003 0304 	and.w	r3, r3, #4
 800270c:	2b00      	cmp	r3, #0
 800270e:	d005      	beq.n	800271c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002710:	4b59      	ldr	r3, [pc, #356]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4a58      	ldr	r2, [pc, #352]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002716:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800271a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 0308 	and.w	r3, r3, #8
 8002724:	2b00      	cmp	r3, #0
 8002726:	d005      	beq.n	8002734 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002728:	4b53      	ldr	r3, [pc, #332]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	4a52      	ldr	r2, [pc, #328]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002732:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002734:	4b50      	ldr	r3, [pc, #320]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	689b      	ldr	r3, [r3, #8]
 8002740:	494d      	ldr	r1, [pc, #308]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002742:	4313      	orrs	r3, r2
 8002744:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f003 0301 	and.w	r3, r3, #1
 800274e:	2b00      	cmp	r3, #0
 8002750:	d040      	beq.n	80027d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	2b01      	cmp	r3, #1
 8002758:	d107      	bne.n	800276a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275a:	4b47      	ldr	r3, [pc, #284]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d115      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	e07f      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	2b02      	cmp	r3, #2
 8002770:	d107      	bne.n	8002782 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	4b41      	ldr	r3, [pc, #260]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e073      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002782:	4b3d      	ldr	r3, [pc, #244]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d101      	bne.n	8002792 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e06b      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002792:	4b39      	ldr	r3, [pc, #228]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	f023 0203 	bic.w	r2, r3, #3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	4936      	ldr	r1, [pc, #216]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80027a4:	f7ff fa2c 	bl	8001c00 <HAL_GetTick>
 80027a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027aa:	e00a      	b.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027ac:	f7ff fa28 	bl	8001c00 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e053      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c2:	4b2d      	ldr	r3, [pc, #180]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 80027c4:	685b      	ldr	r3, [r3, #4]
 80027c6:	f003 020c 	and.w	r2, r3, #12
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	009b      	lsls	r3, r3, #2
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d1eb      	bne.n	80027ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027d4:	4b27      	ldr	r3, [pc, #156]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0307 	and.w	r3, r3, #7
 80027dc:	683a      	ldr	r2, [r7, #0]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d210      	bcs.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027e2:	4b24      	ldr	r3, [pc, #144]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f023 0207 	bic.w	r2, r3, #7
 80027ea:	4922      	ldr	r1, [pc, #136]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027f2:	4b20      	ldr	r3, [pc, #128]	; (8002874 <HAL_RCC_ClockConfig+0x1c0>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 0307 	and.w	r3, r3, #7
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	429a      	cmp	r2, r3
 80027fe:	d001      	beq.n	8002804 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002800:	2301      	movs	r3, #1
 8002802:	e032      	b.n	800286a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d008      	beq.n	8002822 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002810:	4b19      	ldr	r3, [pc, #100]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68db      	ldr	r3, [r3, #12]
 800281c:	4916      	ldr	r1, [pc, #88]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800281e:	4313      	orrs	r3, r2
 8002820:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d009      	beq.n	8002842 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800282e:	4b12      	ldr	r3, [pc, #72]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	691b      	ldr	r3, [r3, #16]
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	490e      	ldr	r1, [pc, #56]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800283e:	4313      	orrs	r3, r2
 8002840:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002842:	f000 f821 	bl	8002888 <HAL_RCC_GetSysClockFreq>
 8002846:	4602      	mov	r2, r0
 8002848:	4b0b      	ldr	r3, [pc, #44]	; (8002878 <HAL_RCC_ClockConfig+0x1c4>)
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	091b      	lsrs	r3, r3, #4
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	490a      	ldr	r1, [pc, #40]	; (800287c <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	5ccb      	ldrb	r3, [r1, r3]
 8002856:	fa22 f303 	lsr.w	r3, r2, r3
 800285a:	4a09      	ldr	r2, [pc, #36]	; (8002880 <HAL_RCC_ClockConfig+0x1cc>)
 800285c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800285e:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCC_ClockConfig+0x1d0>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f7ff f98a 	bl	8001b7c <HAL_InitTick>

  return HAL_OK;
 8002868:	2300      	movs	r3, #0
}
 800286a:	4618      	mov	r0, r3
 800286c:	3710      	adds	r7, #16
 800286e:	46bd      	mov	sp, r7
 8002870:	bd80      	pop	{r7, pc}
 8002872:	bf00      	nop
 8002874:	40022000 	.word	0x40022000
 8002878:	40021000 	.word	0x40021000
 800287c:	080031cc 	.word	0x080031cc
 8002880:	2000004c 	.word	0x2000004c
 8002884:	20000050 	.word	0x20000050

08002888 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002888:	b490      	push	{r4, r7}
 800288a:	b08a      	sub	sp, #40	; 0x28
 800288c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800288e:	4b2a      	ldr	r3, [pc, #168]	; (8002938 <HAL_RCC_GetSysClockFreq+0xb0>)
 8002890:	1d3c      	adds	r4, r7, #4
 8002892:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002894:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002898:	f240 2301 	movw	r3, #513	; 0x201
 800289c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61fb      	str	r3, [r7, #28]
 80028a2:	2300      	movs	r3, #0
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	2300      	movs	r3, #0
 80028a8:	627b      	str	r3, [r7, #36]	; 0x24
 80028aa:	2300      	movs	r3, #0
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80028b2:	4b22      	ldr	r3, [pc, #136]	; (800293c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028b4:	685b      	ldr	r3, [r3, #4]
 80028b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b04      	cmp	r3, #4
 80028c0:	d002      	beq.n	80028c8 <HAL_RCC_GetSysClockFreq+0x40>
 80028c2:	2b08      	cmp	r3, #8
 80028c4:	d003      	beq.n	80028ce <HAL_RCC_GetSysClockFreq+0x46>
 80028c6:	e02d      	b.n	8002924 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80028c8:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 80028ca:	623b      	str	r3, [r7, #32]
      break;
 80028cc:	e02d      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	0c9b      	lsrs	r3, r3, #18
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028da:	4413      	add	r3, r2
 80028dc:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80028e0:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028e2:	69fb      	ldr	r3, [r7, #28]
 80028e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d013      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80028ec:	4b13      	ldr	r3, [pc, #76]	; (800293c <HAL_RCC_GetSysClockFreq+0xb4>)
 80028ee:	685b      	ldr	r3, [r3, #4]
 80028f0:	0c5b      	lsrs	r3, r3, #17
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80028fa:	4413      	add	r3, r2
 80028fc:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002900:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	4a0e      	ldr	r2, [pc, #56]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002906:	fb02 f203 	mul.w	r2, r2, r3
 800290a:	69bb      	ldr	r3, [r7, #24]
 800290c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
 8002912:	e004      	b.n	800291e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	4a0b      	ldr	r2, [pc, #44]	; (8002944 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002918:	fb02 f303 	mul.w	r3, r2, r3
 800291c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800291e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002920:	623b      	str	r3, [r7, #32]
      break;
 8002922:	e002      	b.n	800292a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002924:	4b06      	ldr	r3, [pc, #24]	; (8002940 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002926:	623b      	str	r3, [r7, #32]
      break;
 8002928:	bf00      	nop
    }
  }
  return sysclockfreq;
 800292a:	6a3b      	ldr	r3, [r7, #32]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3728      	adds	r7, #40	; 0x28
 8002930:	46bd      	mov	sp, r7
 8002932:	bc90      	pop	{r4, r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	080031bc 	.word	0x080031bc
 800293c:	40021000 	.word	0x40021000
 8002940:	007a1200 	.word	0x007a1200
 8002944:	003d0900 	.word	0x003d0900

08002948 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002950:	4b0a      	ldr	r3, [pc, #40]	; (800297c <RCC_Delay+0x34>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <RCC_Delay+0x38>)
 8002956:	fba2 2303 	umull	r2, r3, r2, r3
 800295a:	0a5b      	lsrs	r3, r3, #9
 800295c:	687a      	ldr	r2, [r7, #4]
 800295e:	fb02 f303 	mul.w	r3, r2, r3
 8002962:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002964:	bf00      	nop
  }
  while (Delay --);
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1e5a      	subs	r2, r3, #1
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f9      	bne.n	8002964 <RCC_Delay+0x1c>
}
 8002970:	bf00      	nop
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	bc80      	pop	{r7}
 800297a:	4770      	bx	lr
 800297c:	2000004c 	.word	0x2000004c
 8002980:	10624dd3 	.word	0x10624dd3

08002984 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d101      	bne.n	8002996 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e041      	b.n	8002a1a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299c:	b2db      	uxtb	r3, r3
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d106      	bne.n	80029b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80029aa:	6878      	ldr	r0, [r7, #4]
 80029ac:	f7ff f84e 	bl	8001a4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2202      	movs	r2, #2
 80029b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681a      	ldr	r2, [r3, #0]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	4619      	mov	r1, r3
 80029c2:	4610      	mov	r0, r2
 80029c4:	f000 fa6a 	bl	8002e9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2201      	movs	r2, #1
 8002a04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2201      	movs	r2, #1
 8002a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3708      	adds	r7, #8
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
	...

08002a24 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b085      	sub	sp, #20
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a32:	b2db      	uxtb	r3, r3
 8002a34:	2b01      	cmp	r3, #1
 8002a36:	d001      	beq.n	8002a3c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a38:	2301      	movs	r3, #1
 8002a3a:	e035      	b.n	8002aa8 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2202      	movs	r2, #2
 8002a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	68da      	ldr	r2, [r3, #12]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f042 0201 	orr.w	r2, r2, #1
 8002a52:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <HAL_TIM_Base_Start_IT+0x90>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d009      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x4e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a66:	d004      	beq.n	8002a72 <HAL_TIM_Base_Start_IT+0x4e>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <HAL_TIM_Base_Start_IT+0x94>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d111      	bne.n	8002a96 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2b06      	cmp	r3, #6
 8002a82:	d010      	beq.n	8002aa6 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a94:	e007      	b.n	8002aa6 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa6:	2300      	movs	r3, #0
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3714      	adds	r7, #20
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bc80      	pop	{r7}
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40012c00 	.word	0x40012c00
 8002ab8:	40000400 	.word	0x40000400

08002abc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	f003 0302 	and.w	r3, r3, #2
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d122      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d11b      	bne.n	8002b18 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f06f 0202 	mvn.w	r2, #2
 8002ae8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2201      	movs	r2, #1
 8002aee:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	699b      	ldr	r3, [r3, #24]
 8002af6:	f003 0303 	and.w	r3, r3, #3
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d003      	beq.n	8002b06 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 f9b1 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002b04:	e005      	b.n	8002b12 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f9a4 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b0c:	6878      	ldr	r0, [r7, #4]
 8002b0e:	f000 f9b3 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2200      	movs	r2, #0
 8002b16:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	691b      	ldr	r3, [r3, #16]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	d122      	bne.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b04      	cmp	r3, #4
 8002b32:	d11b      	bne.n	8002b6c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f06f 0204 	mvn.w	r2, #4
 8002b3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2202      	movs	r2, #2
 8002b42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	699b      	ldr	r3, [r3, #24]
 8002b4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d003      	beq.n	8002b5a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b52:	6878      	ldr	r0, [r7, #4]
 8002b54:	f000 f987 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002b58:	e005      	b.n	8002b66 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f97a 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b60:	6878      	ldr	r0, [r7, #4]
 8002b62:	f000 f989 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	691b      	ldr	r3, [r3, #16]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b08      	cmp	r3, #8
 8002b78:	d122      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	f003 0308 	and.w	r3, r3, #8
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d11b      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0208 	mvn.w	r2, #8
 8002b90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2204      	movs	r2, #4
 8002b96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d003      	beq.n	8002bae <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f000 f95d 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002bac:	e005      	b.n	8002bba <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f950 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb4:	6878      	ldr	r0, [r7, #4]
 8002bb6:	f000 f95f 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f003 0310 	and.w	r3, r3, #16
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d122      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	68db      	ldr	r3, [r3, #12]
 8002bd4:	f003 0310 	and.w	r3, r3, #16
 8002bd8:	2b10      	cmp	r3, #16
 8002bda:	d11b      	bne.n	8002c14 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f06f 0210 	mvn.w	r2, #16
 8002be4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2208      	movs	r2, #8
 8002bea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	69db      	ldr	r3, [r3, #28]
 8002bf2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d003      	beq.n	8002c02 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bfa:	6878      	ldr	r0, [r7, #4]
 8002bfc:	f000 f933 	bl	8002e66 <HAL_TIM_IC_CaptureCallback>
 8002c00:	e005      	b.n	8002c0e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f926 	bl	8002e54 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 f935 	bl	8002e78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d10e      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	68db      	ldr	r3, [r3, #12]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	d107      	bne.n	8002c40 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f06f 0201 	mvn.w	r2, #1
 8002c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7fe fe18 	bl	8001870 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4a:	2b80      	cmp	r3, #128	; 0x80
 8002c4c:	d10e      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c58:	2b80      	cmp	r3, #128	; 0x80
 8002c5a:	d107      	bne.n	8002c6c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c66:	6878      	ldr	r0, [r7, #4]
 8002c68:	f000 fa67 	bl	800313a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c76:	2b40      	cmp	r3, #64	; 0x40
 8002c78:	d10e      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c84:	2b40      	cmp	r3, #64	; 0x40
 8002c86:	d107      	bne.n	8002c98 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c92:	6878      	ldr	r0, [r7, #4]
 8002c94:	f000 f8f9 	bl	8002e8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	691b      	ldr	r3, [r3, #16]
 8002c9e:	f003 0320 	and.w	r3, r3, #32
 8002ca2:	2b20      	cmp	r3, #32
 8002ca4:	d10e      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	f003 0320 	and.w	r3, r3, #32
 8002cb0:	2b20      	cmp	r3, #32
 8002cb2:	d107      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f06f 0220 	mvn.w	r2, #32
 8002cbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f000 fa32 	bl	8003128 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d101      	bne.n	8002ce4 <HAL_TIM_ConfigClockSource+0x18>
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	e0b3      	b.n	8002e4c <HAL_TIM_ConfigClockSource+0x180>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2202      	movs	r2, #2
 8002cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d0a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	68fa      	ldr	r2, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d1c:	d03e      	beq.n	8002d9c <HAL_TIM_ConfigClockSource+0xd0>
 8002d1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d22:	f200 8087 	bhi.w	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d2a:	f000 8085 	beq.w	8002e38 <HAL_TIM_ConfigClockSource+0x16c>
 8002d2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d32:	d87f      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d34:	2b70      	cmp	r3, #112	; 0x70
 8002d36:	d01a      	beq.n	8002d6e <HAL_TIM_ConfigClockSource+0xa2>
 8002d38:	2b70      	cmp	r3, #112	; 0x70
 8002d3a:	d87b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d3c:	2b60      	cmp	r3, #96	; 0x60
 8002d3e:	d050      	beq.n	8002de2 <HAL_TIM_ConfigClockSource+0x116>
 8002d40:	2b60      	cmp	r3, #96	; 0x60
 8002d42:	d877      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d44:	2b50      	cmp	r3, #80	; 0x50
 8002d46:	d03c      	beq.n	8002dc2 <HAL_TIM_ConfigClockSource+0xf6>
 8002d48:	2b50      	cmp	r3, #80	; 0x50
 8002d4a:	d873      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d4c:	2b40      	cmp	r3, #64	; 0x40
 8002d4e:	d058      	beq.n	8002e02 <HAL_TIM_ConfigClockSource+0x136>
 8002d50:	2b40      	cmp	r3, #64	; 0x40
 8002d52:	d86f      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d54:	2b30      	cmp	r3, #48	; 0x30
 8002d56:	d064      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x156>
 8002d58:	2b30      	cmp	r3, #48	; 0x30
 8002d5a:	d86b      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d5c:	2b20      	cmp	r3, #32
 8002d5e:	d060      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x156>
 8002d60:	2b20      	cmp	r3, #32
 8002d62:	d867      	bhi.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d05c      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x156>
 8002d68:	2b10      	cmp	r3, #16
 8002d6a:	d05a      	beq.n	8002e22 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002d6c:	e062      	b.n	8002e34 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6818      	ldr	r0, [r3, #0]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	6899      	ldr	r1, [r3, #8]
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	685a      	ldr	r2, [r3, #4]
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f000 f95c 	bl	800303a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	689b      	ldr	r3, [r3, #8]
 8002d88:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002d90:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68fa      	ldr	r2, [r7, #12]
 8002d98:	609a      	str	r2, [r3, #8]
      break;
 8002d9a:	e04e      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6818      	ldr	r0, [r3, #0]
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	6899      	ldr	r1, [r3, #8]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f000 f945 	bl	800303a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	689a      	ldr	r2, [r3, #8]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dbe:	609a      	str	r2, [r3, #8]
      break;
 8002dc0:	e03b      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6818      	ldr	r0, [r3, #0]
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	6859      	ldr	r1, [r3, #4]
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f000 f8bc 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2150      	movs	r1, #80	; 0x50
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f913 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002de0:	e02b      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6818      	ldr	r0, [r3, #0]
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	6859      	ldr	r1, [r3, #4]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	461a      	mov	r2, r3
 8002df0:	f000 f8da 	bl	8002fa8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	2160      	movs	r1, #96	; 0x60
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 f903 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002e00:	e01b      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6818      	ldr	r0, [r3, #0]
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	6859      	ldr	r1, [r3, #4]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68db      	ldr	r3, [r3, #12]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f000 f89c 	bl	8002f4c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2140      	movs	r1, #64	; 0x40
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 f8f3 	bl	8003006 <TIM_ITRx_SetConfig>
      break;
 8002e20:	e00b      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	4610      	mov	r0, r2
 8002e2e:	f000 f8ea 	bl	8003006 <TIM_ITRx_SetConfig>
        break;
 8002e32:	e002      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e34:	bf00      	nop
 8002e36:	e000      	b.n	8002e3a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002e38:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2200      	movs	r2, #0
 8002e46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e4a:	2300      	movs	r3, #0
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3710      	adds	r7, #16
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}

08002e54 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e54:	b480      	push	{r7}
 8002e56:	b083      	sub	sp, #12
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr

08002e66 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e6e:	bf00      	nop
 8002e70:	370c      	adds	r7, #12
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr

08002e78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bc80      	pop	{r7}
 8002e88:	4770      	bx	lr

08002e8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e8a:	b480      	push	{r7}
 8002e8c:	b083      	sub	sp, #12
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002e92:	bf00      	nop
 8002e94:	370c      	adds	r7, #12
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bc80      	pop	{r7}
 8002e9a:	4770      	bx	lr

08002e9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b085      	sub	sp, #20
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a25      	ldr	r2, [pc, #148]	; (8002f44 <TIM_Base_SetConfig+0xa8>)
 8002eb0:	4293      	cmp	r3, r2
 8002eb2:	d007      	beq.n	8002ec4 <TIM_Base_SetConfig+0x28>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eba:	d003      	beq.n	8002ec4 <TIM_Base_SetConfig+0x28>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	4a22      	ldr	r2, [pc, #136]	; (8002f48 <TIM_Base_SetConfig+0xac>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d108      	bne.n	8002ed6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002eca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	4a1a      	ldr	r2, [pc, #104]	; (8002f44 <TIM_Base_SetConfig+0xa8>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d007      	beq.n	8002eee <TIM_Base_SetConfig+0x52>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee4:	d003      	beq.n	8002eee <TIM_Base_SetConfig+0x52>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <TIM_Base_SetConfig+0xac>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d108      	bne.n	8002f00 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ef4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ef6:	683b      	ldr	r3, [r7, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	68fa      	ldr	r2, [r7, #12]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	695b      	ldr	r3, [r3, #20]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68fa      	ldr	r2, [r7, #12]
 8002f12:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	689a      	ldr	r2, [r3, #8]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681a      	ldr	r2, [r3, #0]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	4a07      	ldr	r2, [pc, #28]	; (8002f44 <TIM_Base_SetConfig+0xa8>)
 8002f28:	4293      	cmp	r3, r2
 8002f2a:	d103      	bne.n	8002f34 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	691a      	ldr	r2, [r3, #16]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	615a      	str	r2, [r3, #20]
}
 8002f3a:	bf00      	nop
 8002f3c:	3714      	adds	r7, #20
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bc80      	pop	{r7}
 8002f42:	4770      	bx	lr
 8002f44:	40012c00 	.word	0x40012c00
 8002f48:	40000400 	.word	0x40000400

08002f4c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b087      	sub	sp, #28
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6a1b      	ldr	r3, [r3, #32]
 8002f5c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6a1b      	ldr	r3, [r3, #32]
 8002f62:	f023 0201 	bic.w	r2, r3, #1
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f76:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	011b      	lsls	r3, r3, #4
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	f023 030a 	bic.w	r3, r3, #10
 8002f88:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002f8a:	697a      	ldr	r2, [r7, #20]
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	697a      	ldr	r2, [r7, #20]
 8002f9c:	621a      	str	r2, [r3, #32]
}
 8002f9e:	bf00      	nop
 8002fa0:	371c      	adds	r7, #28
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bc80      	pop	{r7}
 8002fa6:	4770      	bx	lr

08002fa8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b087      	sub	sp, #28
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	60f8      	str	r0, [r7, #12]
 8002fb0:	60b9      	str	r1, [r7, #8]
 8002fb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	f023 0210 	bic.w	r2, r3, #16
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	699b      	ldr	r3, [r3, #24]
 8002fc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	031b      	lsls	r3, r3, #12
 8002fd8:	697a      	ldr	r2, [r7, #20]
 8002fda:	4313      	orrs	r3, r2
 8002fdc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002fe4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	697a      	ldr	r2, [r7, #20]
 8002ff4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	621a      	str	r2, [r3, #32]
}
 8002ffc:	bf00      	nop
 8002ffe:	371c      	adds	r7, #28
 8003000:	46bd      	mov	sp, r7
 8003002:	bc80      	pop	{r7}
 8003004:	4770      	bx	lr

08003006 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003006:	b480      	push	{r7}
 8003008:	b085      	sub	sp, #20
 800300a:	af00      	add	r7, sp, #0
 800300c:	6078      	str	r0, [r7, #4]
 800300e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	689b      	ldr	r3, [r3, #8]
 8003014:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800301c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800301e:	683a      	ldr	r2, [r7, #0]
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	4313      	orrs	r3, r2
 8003024:	f043 0307 	orr.w	r3, r3, #7
 8003028:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	68fa      	ldr	r2, [r7, #12]
 800302e:	609a      	str	r2, [r3, #8]
}
 8003030:	bf00      	nop
 8003032:	3714      	adds	r7, #20
 8003034:	46bd      	mov	sp, r7
 8003036:	bc80      	pop	{r7}
 8003038:	4770      	bx	lr

0800303a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800303a:	b480      	push	{r7}
 800303c:	b087      	sub	sp, #28
 800303e:	af00      	add	r7, sp, #0
 8003040:	60f8      	str	r0, [r7, #12]
 8003042:	60b9      	str	r1, [r7, #8]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003054:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	021a      	lsls	r2, r3, #8
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	431a      	orrs	r2, r3
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	4313      	orrs	r3, r2
 8003062:	697a      	ldr	r2, [r7, #20]
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	697a      	ldr	r2, [r7, #20]
 800306c:	609a      	str	r2, [r3, #8]
}
 800306e:	bf00      	nop
 8003070:	371c      	adds	r7, #28
 8003072:	46bd      	mov	sp, r7
 8003074:	bc80      	pop	{r7}
 8003076:	4770      	bx	lr

08003078 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003078:	b480      	push	{r7}
 800307a:	b085      	sub	sp, #20
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
 8003080:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003088:	2b01      	cmp	r3, #1
 800308a:	d101      	bne.n	8003090 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800308c:	2302      	movs	r3, #2
 800308e:	e041      	b.n	8003114 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2202      	movs	r2, #2
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	68fa      	ldr	r2, [r7, #12]
 80030c8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a14      	ldr	r2, [pc, #80]	; (8003120 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d009      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030dc:	d004      	beq.n	80030e8 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a10      	ldr	r2, [pc, #64]	; (8003124 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d10c      	bne.n	8003102 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030ee:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	68ba      	ldr	r2, [r7, #8]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68ba      	ldr	r2, [r7, #8]
 8003100:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003112:	2300      	movs	r3, #0
}
 8003114:	4618      	mov	r0, r3
 8003116:	3714      	adds	r7, #20
 8003118:	46bd      	mov	sp, r7
 800311a:	bc80      	pop	{r7}
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	40012c00 	.word	0x40012c00
 8003124:	40000400 	.word	0x40000400

08003128 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bc80      	pop	{r7}
 8003138:	4770      	bx	lr

0800313a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <__libc_init_array>:
 800314c:	b570      	push	{r4, r5, r6, lr}
 800314e:	2600      	movs	r6, #0
 8003150:	4d0c      	ldr	r5, [pc, #48]	; (8003184 <__libc_init_array+0x38>)
 8003152:	4c0d      	ldr	r4, [pc, #52]	; (8003188 <__libc_init_array+0x3c>)
 8003154:	1b64      	subs	r4, r4, r5
 8003156:	10a4      	asrs	r4, r4, #2
 8003158:	42a6      	cmp	r6, r4
 800315a:	d109      	bne.n	8003170 <__libc_init_array+0x24>
 800315c:	f000 f822 	bl	80031a4 <_init>
 8003160:	2600      	movs	r6, #0
 8003162:	4d0a      	ldr	r5, [pc, #40]	; (800318c <__libc_init_array+0x40>)
 8003164:	4c0a      	ldr	r4, [pc, #40]	; (8003190 <__libc_init_array+0x44>)
 8003166:	1b64      	subs	r4, r4, r5
 8003168:	10a4      	asrs	r4, r4, #2
 800316a:	42a6      	cmp	r6, r4
 800316c:	d105      	bne.n	800317a <__libc_init_array+0x2e>
 800316e:	bd70      	pop	{r4, r5, r6, pc}
 8003170:	f855 3b04 	ldr.w	r3, [r5], #4
 8003174:	4798      	blx	r3
 8003176:	3601      	adds	r6, #1
 8003178:	e7ee      	b.n	8003158 <__libc_init_array+0xc>
 800317a:	f855 3b04 	ldr.w	r3, [r5], #4
 800317e:	4798      	blx	r3
 8003180:	3601      	adds	r6, #1
 8003182:	e7f2      	b.n	800316a <__libc_init_array+0x1e>
 8003184:	080031dc 	.word	0x080031dc
 8003188:	080031dc 	.word	0x080031dc
 800318c:	080031dc 	.word	0x080031dc
 8003190:	080031e0 	.word	0x080031e0

08003194 <memset>:
 8003194:	4603      	mov	r3, r0
 8003196:	4402      	add	r2, r0
 8003198:	4293      	cmp	r3, r2
 800319a:	d100      	bne.n	800319e <memset+0xa>
 800319c:	4770      	bx	lr
 800319e:	f803 1b01 	strb.w	r1, [r3], #1
 80031a2:	e7f9      	b.n	8003198 <memset+0x4>

080031a4 <_init>:
 80031a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031a6:	bf00      	nop
 80031a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031aa:	bc08      	pop	{r3}
 80031ac:	469e      	mov	lr, r3
 80031ae:	4770      	bx	lr

080031b0 <_fini>:
 80031b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b2:	bf00      	nop
 80031b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031b6:	bc08      	pop	{r3}
 80031b8:	469e      	mov	lr, r3
 80031ba:	4770      	bx	lr
