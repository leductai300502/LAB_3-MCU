
lab3-mcu.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000314c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003258  08003258  00013258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003278  08003278  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003278  08003278  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003278  08003278  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003278  08003278  00013278  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800327c  0800327c  0001327c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003280  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000070  080032f0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080032f0  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097f9  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001acb  00000000  00000000  00029892  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a88  00000000  00000000  0002b360  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000978  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016cd9  00000000  00000000  0002c760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb41  00000000  00000000  00043439  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082429  00000000  00000000  0004ef7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d13a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000297c  00000000  00000000  000d13f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003240 	.word	0x08003240

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003240 	.word	0x08003240

0800014c <is_Button1_Pressed>:
int KeyReg10 = NORMAL_STATE;
int KeyReg11 = NORMAL_STATE;
int downtime = 100;

int TimeOutForKeyPress =  10;
int is_Button1_Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1)
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <is_Button1_Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <is_Button1_Pressed+0x16>
	{
		button1_flag =0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <is_Button1_Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <is_Button1_Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000008c 	.word	0x2000008c

08000170 <is_Button2_Pressed>:
int is_Button2_Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1)
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <is_Button2_Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <is_Button2_Pressed+0x16>
	{
		button2_flag =0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <is_Button2_Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <is_Button2_Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000090 	.word	0x20000090

08000194 <is_Button3_Pressed>:
int is_Button3_Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1)
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <is_Button3_Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <is_Button3_Pressed+0x16>
	{
		button3_flag =0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <is_Button3_Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <is_Button3_Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000094 	.word	0x20000094

080001b8 <subKeyProcess_1>:

void subKeyProcess_1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag=1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess_1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000008c 	.word	0x2000008c

080001d0 <subKeyProcess_2>:
void subKeyProcess_2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag=1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess_2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000090 	.word	0x20000090

080001e8 <subKeyProcess_3>:
void subKeyProcess_3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag=1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess_3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000094 	.word	0x20000094

08000200 <getKeyInput1>:
void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  KeyReg2 = KeyReg1;
 8000204:	4b22      	ldr	r3, [pc, #136]	; (8000290 <getKeyInput1+0x90>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a22      	ldr	r2, [pc, #136]	; (8000294 <getKeyInput1+0x94>)
 800020a:	6013      	str	r3, [r2, #0]
  KeyReg1 = KeyReg0;
 800020c:	4b22      	ldr	r3, [pc, #136]	; (8000298 <getKeyInput1+0x98>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a1f      	ldr	r2, [pc, #124]	; (8000290 <getKeyInput1+0x90>)
 8000212:	6013      	str	r3, [r2, #0]
  KeyReg0 = HAL_GPIO_ReadPin(Button1_GPIO_Port, Button1_Pin);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4820      	ldr	r0, [pc, #128]	; (800029c <getKeyInput1+0x9c>)
 800021a:	f001 ffd1 	bl	80021c0 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1d      	ldr	r3, [pc, #116]	; (8000298 <getKeyInput1+0x98>)
 8000224:	601a      	str	r2, [r3, #0]
  if ((KeyReg1 == KeyReg0) && (KeyReg1 == KeyReg2)){
 8000226:	4b1a      	ldr	r3, [pc, #104]	; (8000290 <getKeyInput1+0x90>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b1b      	ldr	r3, [pc, #108]	; (8000298 <getKeyInput1+0x98>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d12b      	bne.n	800028a <getKeyInput1+0x8a>
 8000232:	4b17      	ldr	r3, [pc, #92]	; (8000290 <getKeyInput1+0x90>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b17      	ldr	r3, [pc, #92]	; (8000294 <getKeyInput1+0x94>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d125      	bne.n	800028a <getKeyInput1+0x8a>
    if (KeyReg2 != KeyReg3){
 800023e:	4b15      	ldr	r3, [pc, #84]	; (8000294 <getKeyInput1+0x94>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b17      	ldr	r3, [pc, #92]	; (80002a0 <getKeyInput1+0xa0>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d00d      	beq.n	8000266 <getKeyInput1+0x66>
      KeyReg3 = KeyReg2;
 800024a:	4b12      	ldr	r3, [pc, #72]	; (8000294 <getKeyInput1+0x94>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <getKeyInput1+0xa0>)
 8000250:	6013      	str	r3, [r2, #0]

      if (KeyReg2 == PRESSED_STATE){
 8000252:	4b10      	ldr	r3, [pc, #64]	; (8000294 <getKeyInput1+0x94>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d117      	bne.n	800028a <getKeyInput1+0x8a>
        TimeOutForKeyPress = 100;
 800025a:	4b12      	ldr	r3, [pc, #72]	; (80002a4 <getKeyInput1+0xa4>)
 800025c:	2264      	movs	r2, #100	; 0x64
 800025e:	601a      	str	r2, [r3, #0]
        subKeyProcess_1();
 8000260:	f7ff ffaa 	bl	80001b8 <subKeyProcess_1>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 8000264:	e011      	b.n	800028a <getKeyInput1+0x8a>
       TimeOutForKeyPress --;
 8000266:	4b0f      	ldr	r3, [pc, #60]	; (80002a4 <getKeyInput1+0xa4>)
 8000268:	681b      	ldr	r3, [r3, #0]
 800026a:	3b01      	subs	r3, #1
 800026c:	4a0d      	ldr	r2, [pc, #52]	; (80002a4 <getKeyInput1+0xa4>)
 800026e:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000270:	4b0c      	ldr	r3, [pc, #48]	; (80002a4 <getKeyInput1+0xa4>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	2b00      	cmp	r3, #0
 8000276:	d108      	bne.n	800028a <getKeyInput1+0x8a>
        	if (KeyReg2 == PRESSED_STATE){
 8000278:	4b06      	ldr	r3, [pc, #24]	; (8000294 <getKeyInput1+0x94>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	2b00      	cmp	r3, #0
 800027e:	d101      	bne.n	8000284 <getKeyInput1+0x84>
        		subKeyProcess_1();
 8000280:	f7ff ff9a 	bl	80001b8 <subKeyProcess_1>
        	TimeOutForKeyPress = 100;
 8000284:	4b07      	ldr	r3, [pc, #28]	; (80002a4 <getKeyInput1+0xa4>)
 8000286:	2264      	movs	r2, #100	; 0x64
 8000288:	601a      	str	r2, [r3, #0]
}
 800028a:	bf00      	nop
 800028c:	bd80      	pop	{r7, pc}
 800028e:	bf00      	nop
 8000290:	20000004 	.word	0x20000004
 8000294:	20000008 	.word	0x20000008
 8000298:	20000000 	.word	0x20000000
 800029c:	40011000 	.word	0x40011000
 80002a0:	2000000c 	.word	0x2000000c
 80002a4:	20000030 	.word	0x20000030

080002a8 <getKeyInput3>:
void getKeyInput3(){
 80002a8:	b580      	push	{r7, lr}
 80002aa:	af00      	add	r7, sp, #0
  KeyReg10 = KeyReg9;
 80002ac:	4b22      	ldr	r3, [pc, #136]	; (8000338 <getKeyInput3+0x90>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a22      	ldr	r2, [pc, #136]	; (800033c <getKeyInput3+0x94>)
 80002b2:	6013      	str	r3, [r2, #0]
  KeyReg9 = KeyReg8;
 80002b4:	4b22      	ldr	r3, [pc, #136]	; (8000340 <getKeyInput3+0x98>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a1f      	ldr	r2, [pc, #124]	; (8000338 <getKeyInput3+0x90>)
 80002ba:	6013      	str	r3, [r2, #0]
  KeyReg8 = HAL_GPIO_ReadPin(Button3_GPIO_Port, Button3_Pin);
 80002bc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80002c0:	4820      	ldr	r0, [pc, #128]	; (8000344 <getKeyInput3+0x9c>)
 80002c2:	f001 ff7d 	bl	80021c0 <HAL_GPIO_ReadPin>
 80002c6:	4603      	mov	r3, r0
 80002c8:	461a      	mov	r2, r3
 80002ca:	4b1d      	ldr	r3, [pc, #116]	; (8000340 <getKeyInput3+0x98>)
 80002cc:	601a      	str	r2, [r3, #0]
  if ((KeyReg9 == KeyReg8) && (KeyReg9 == KeyReg10)){
 80002ce:	4b1a      	ldr	r3, [pc, #104]	; (8000338 <getKeyInput3+0x90>)
 80002d0:	681a      	ldr	r2, [r3, #0]
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <getKeyInput3+0x98>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	429a      	cmp	r2, r3
 80002d8:	d12b      	bne.n	8000332 <getKeyInput3+0x8a>
 80002da:	4b17      	ldr	r3, [pc, #92]	; (8000338 <getKeyInput3+0x90>)
 80002dc:	681a      	ldr	r2, [r3, #0]
 80002de:	4b17      	ldr	r3, [pc, #92]	; (800033c <getKeyInput3+0x94>)
 80002e0:	681b      	ldr	r3, [r3, #0]
 80002e2:	429a      	cmp	r2, r3
 80002e4:	d125      	bne.n	8000332 <getKeyInput3+0x8a>
    if (KeyReg10 != KeyReg11){
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <getKeyInput3+0x94>)
 80002e8:	681a      	ldr	r2, [r3, #0]
 80002ea:	4b17      	ldr	r3, [pc, #92]	; (8000348 <getKeyInput3+0xa0>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	429a      	cmp	r2, r3
 80002f0:	d00d      	beq.n	800030e <getKeyInput3+0x66>
      KeyReg11 = KeyReg10;
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <getKeyInput3+0x94>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a14      	ldr	r2, [pc, #80]	; (8000348 <getKeyInput3+0xa0>)
 80002f8:	6013      	str	r3, [r2, #0]

      if (KeyReg10 == PRESSED_STATE){
 80002fa:	4b10      	ldr	r3, [pc, #64]	; (800033c <getKeyInput3+0x94>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d117      	bne.n	8000332 <getKeyInput3+0x8a>
        TimeOutForKeyPress = 100;
 8000302:	4b12      	ldr	r3, [pc, #72]	; (800034c <getKeyInput3+0xa4>)
 8000304:	2264      	movs	r2, #100	; 0x64
 8000306:	601a      	str	r2, [r3, #0]
        subKeyProcess_3();
 8000308:	f7ff ff6e 	bl	80001e8 <subKeyProcess_3>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 800030c:	e011      	b.n	8000332 <getKeyInput3+0x8a>
       TimeOutForKeyPress --;
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <getKeyInput3+0xa4>)
 8000310:	681b      	ldr	r3, [r3, #0]
 8000312:	3b01      	subs	r3, #1
 8000314:	4a0d      	ldr	r2, [pc, #52]	; (800034c <getKeyInput3+0xa4>)
 8000316:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 8000318:	4b0c      	ldr	r3, [pc, #48]	; (800034c <getKeyInput3+0xa4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	2b00      	cmp	r3, #0
 800031e:	d108      	bne.n	8000332 <getKeyInput3+0x8a>
        	if (KeyReg10 == PRESSED_STATE){
 8000320:	4b06      	ldr	r3, [pc, #24]	; (800033c <getKeyInput3+0x94>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	2b00      	cmp	r3, #0
 8000326:	d101      	bne.n	800032c <getKeyInput3+0x84>
        		subKeyProcess_3();
 8000328:	f7ff ff5e 	bl	80001e8 <subKeyProcess_3>
        	TimeOutForKeyPress = 100;
 800032c:	4b07      	ldr	r3, [pc, #28]	; (800034c <getKeyInput3+0xa4>)
 800032e:	2264      	movs	r2, #100	; 0x64
 8000330:	601a      	str	r2, [r3, #0]
}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000024 	.word	0x20000024
 800033c:	20000028 	.word	0x20000028
 8000340:	20000020 	.word	0x20000020
 8000344:	40011000 	.word	0x40011000
 8000348:	2000002c 	.word	0x2000002c
 800034c:	20000030 	.word	0x20000030

08000350 <getKeyInput2>:
void getKeyInput2(){
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  KeyReg6 = KeyReg5;
 8000354:	4b22      	ldr	r3, [pc, #136]	; (80003e0 <getKeyInput2+0x90>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	4a22      	ldr	r2, [pc, #136]	; (80003e4 <getKeyInput2+0x94>)
 800035a:	6013      	str	r3, [r2, #0]
  KeyReg5 = KeyReg4;
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <getKeyInput2+0x98>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a1f      	ldr	r2, [pc, #124]	; (80003e0 <getKeyInput2+0x90>)
 8000362:	6013      	str	r3, [r2, #0]
  KeyReg4 = HAL_GPIO_ReadPin(Button2_GPIO_Port, Button2_Pin);
 8000364:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000368:	4820      	ldr	r0, [pc, #128]	; (80003ec <getKeyInput2+0x9c>)
 800036a:	f001 ff29 	bl	80021c0 <HAL_GPIO_ReadPin>
 800036e:	4603      	mov	r3, r0
 8000370:	461a      	mov	r2, r3
 8000372:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <getKeyInput2+0x98>)
 8000374:	601a      	str	r2, [r3, #0]
  if ((KeyReg5 == KeyReg4) && (KeyReg5 == KeyReg6)){
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <getKeyInput2+0x90>)
 8000378:	681a      	ldr	r2, [r3, #0]
 800037a:	4b1b      	ldr	r3, [pc, #108]	; (80003e8 <getKeyInput2+0x98>)
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	429a      	cmp	r2, r3
 8000380:	d12b      	bne.n	80003da <getKeyInput2+0x8a>
 8000382:	4b17      	ldr	r3, [pc, #92]	; (80003e0 <getKeyInput2+0x90>)
 8000384:	681a      	ldr	r2, [r3, #0]
 8000386:	4b17      	ldr	r3, [pc, #92]	; (80003e4 <getKeyInput2+0x94>)
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	429a      	cmp	r2, r3
 800038c:	d125      	bne.n	80003da <getKeyInput2+0x8a>
    if (KeyReg6 != KeyReg7){
 800038e:	4b15      	ldr	r3, [pc, #84]	; (80003e4 <getKeyInput2+0x94>)
 8000390:	681a      	ldr	r2, [r3, #0]
 8000392:	4b17      	ldr	r3, [pc, #92]	; (80003f0 <getKeyInput2+0xa0>)
 8000394:	681b      	ldr	r3, [r3, #0]
 8000396:	429a      	cmp	r2, r3
 8000398:	d00d      	beq.n	80003b6 <getKeyInput2+0x66>
      KeyReg7 = KeyReg6;
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <getKeyInput2+0x94>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a14      	ldr	r2, [pc, #80]	; (80003f0 <getKeyInput2+0xa0>)
 80003a0:	6013      	str	r3, [r2, #0]

      if (KeyReg6 == PRESSED_STATE){
 80003a2:	4b10      	ldr	r3, [pc, #64]	; (80003e4 <getKeyInput2+0x94>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d117      	bne.n	80003da <getKeyInput2+0x8a>
        TimeOutForKeyPress = 100;
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <getKeyInput2+0xa4>)
 80003ac:	2264      	movs	r2, #100	; 0x64
 80003ae:	601a      	str	r2, [r3, #0]
        subKeyProcess_2();
 80003b0:	f7ff ff0e 	bl	80001d0 <subKeyProcess_2>
        	}
        	TimeOutForKeyPress = 100;
        }
    }
  }
}
 80003b4:	e011      	b.n	80003da <getKeyInput2+0x8a>
       TimeOutForKeyPress --;
 80003b6:	4b0f      	ldr	r3, [pc, #60]	; (80003f4 <getKeyInput2+0xa4>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	3b01      	subs	r3, #1
 80003bc:	4a0d      	ldr	r2, [pc, #52]	; (80003f4 <getKeyInput2+0xa4>)
 80003be:	6013      	str	r3, [r2, #0]
        if (TimeOutForKeyPress == 0){
 80003c0:	4b0c      	ldr	r3, [pc, #48]	; (80003f4 <getKeyInput2+0xa4>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	2b00      	cmp	r3, #0
 80003c6:	d108      	bne.n	80003da <getKeyInput2+0x8a>
        	if (KeyReg6 == PRESSED_STATE){
 80003c8:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <getKeyInput2+0x94>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d101      	bne.n	80003d4 <getKeyInput2+0x84>
        		subKeyProcess_2();
 80003d0:	f7ff fefe 	bl	80001d0 <subKeyProcess_2>
        	TimeOutForKeyPress = 100;
 80003d4:	4b07      	ldr	r3, [pc, #28]	; (80003f4 <getKeyInput2+0xa4>)
 80003d6:	2264      	movs	r2, #100	; 0x64
 80003d8:	601a      	str	r2, [r3, #0]
}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000014 	.word	0x20000014
 80003e4:	20000018 	.word	0x20000018
 80003e8:	20000010 	.word	0x20000010
 80003ec:	40011000 	.word	0x40011000
 80003f0:	2000001c 	.word	0x2000001c
 80003f4:	20000030 	.word	0x20000030

080003f8 <display7SEG>:
#include "display_led.h"
#include "global.h"
#include "main.h"

void display7SEG(int num)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]

	if(num == 0){
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d122      	bne.n	800044c <display7SEG+0x54>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000406:	2200      	movs	r2, #0
 8000408:	2101      	movs	r1, #1
 800040a:	48bd      	ldr	r0, [pc, #756]	; (8000700 <display7SEG+0x308>)
 800040c:	f001 feef 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000410:	2200      	movs	r2, #0
 8000412:	2102      	movs	r1, #2
 8000414:	48ba      	ldr	r0, [pc, #744]	; (8000700 <display7SEG+0x308>)
 8000416:	f001 feea 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800041a:	2200      	movs	r2, #0
 800041c:	2104      	movs	r1, #4
 800041e:	48b8      	ldr	r0, [pc, #736]	; (8000700 <display7SEG+0x308>)
 8000420:	f001 fee5 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	2108      	movs	r1, #8
 8000428:	48b5      	ldr	r0, [pc, #724]	; (8000700 <display7SEG+0x308>)
 800042a:	f001 fee0 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2110      	movs	r1, #16
 8000432:	48b3      	ldr	r0, [pc, #716]	; (8000700 <display7SEG+0x308>)
 8000434:	f001 fedb 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000438:	2200      	movs	r2, #0
 800043a:	2120      	movs	r1, #32
 800043c:	48b0      	ldr	r0, [pc, #704]	; (8000700 <display7SEG+0x308>)
 800043e:	f001 fed6 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, SET);
 8000442:	2201      	movs	r2, #1
 8000444:	2140      	movs	r1, #64	; 0x40
 8000446:	48ae      	ldr	r0, [pc, #696]	; (8000700 <display7SEG+0x308>)
 8000448:	f001 fed1 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 1){
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	2b01      	cmp	r3, #1
 8000450:	d122      	bne.n	8000498 <display7SEG+0xa0>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 8000452:	2201      	movs	r2, #1
 8000454:	2101      	movs	r1, #1
 8000456:	48aa      	ldr	r0, [pc, #680]	; (8000700 <display7SEG+0x308>)
 8000458:	f001 fec9 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 800045c:	2200      	movs	r2, #0
 800045e:	2102      	movs	r1, #2
 8000460:	48a7      	ldr	r0, [pc, #668]	; (8000700 <display7SEG+0x308>)
 8000462:	f001 fec4 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000466:	2200      	movs	r2, #0
 8000468:	2104      	movs	r1, #4
 800046a:	48a5      	ldr	r0, [pc, #660]	; (8000700 <display7SEG+0x308>)
 800046c:	f001 febf 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000470:	2201      	movs	r2, #1
 8000472:	2108      	movs	r1, #8
 8000474:	48a2      	ldr	r0, [pc, #648]	; (8000700 <display7SEG+0x308>)
 8000476:	f001 feba 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 800047a:	2201      	movs	r2, #1
 800047c:	2110      	movs	r1, #16
 800047e:	48a0      	ldr	r0, [pc, #640]	; (8000700 <display7SEG+0x308>)
 8000480:	f001 feb5 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 8000484:	2201      	movs	r2, #1
 8000486:	2120      	movs	r1, #32
 8000488:	489d      	ldr	r0, [pc, #628]	; (8000700 <display7SEG+0x308>)
 800048a:	f001 feb0 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, SET);
 800048e:	2201      	movs	r2, #1
 8000490:	2140      	movs	r1, #64	; 0x40
 8000492:	489b      	ldr	r0, [pc, #620]	; (8000700 <display7SEG+0x308>)
 8000494:	f001 feab 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 2){
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	2b02      	cmp	r3, #2
 800049c:	d122      	bne.n	80004e4 <display7SEG+0xec>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800049e:	2200      	movs	r2, #0
 80004a0:	2101      	movs	r1, #1
 80004a2:	4897      	ldr	r0, [pc, #604]	; (8000700 <display7SEG+0x308>)
 80004a4:	f001 fea3 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2102      	movs	r1, #2
 80004ac:	4894      	ldr	r0, [pc, #592]	; (8000700 <display7SEG+0x308>)
 80004ae:	f001 fe9e 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, SET);
 80004b2:	2201      	movs	r2, #1
 80004b4:	2104      	movs	r1, #4
 80004b6:	4892      	ldr	r0, [pc, #584]	; (8000700 <display7SEG+0x308>)
 80004b8:	f001 fe99 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2108      	movs	r1, #8
 80004c0:	488f      	ldr	r0, [pc, #572]	; (8000700 <display7SEG+0x308>)
 80004c2:	f001 fe94 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2110      	movs	r1, #16
 80004ca:	488d      	ldr	r0, [pc, #564]	; (8000700 <display7SEG+0x308>)
 80004cc:	f001 fe8f 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 80004d0:	2201      	movs	r2, #1
 80004d2:	2120      	movs	r1, #32
 80004d4:	488a      	ldr	r0, [pc, #552]	; (8000700 <display7SEG+0x308>)
 80004d6:	f001 fe8a 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2140      	movs	r1, #64	; 0x40
 80004de:	4888      	ldr	r0, [pc, #544]	; (8000700 <display7SEG+0x308>)
 80004e0:	f001 fe85 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 3){
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d122      	bne.n	8000530 <display7SEG+0x138>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	2101      	movs	r1, #1
 80004ee:	4884      	ldr	r0, [pc, #528]	; (8000700 <display7SEG+0x308>)
 80004f0:	f001 fe7d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	2102      	movs	r1, #2
 80004f8:	4881      	ldr	r0, [pc, #516]	; (8000700 <display7SEG+0x308>)
 80004fa:	f001 fe78 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80004fe:	2200      	movs	r2, #0
 8000500:	2104      	movs	r1, #4
 8000502:	487f      	ldr	r0, [pc, #508]	; (8000700 <display7SEG+0x308>)
 8000504:	f001 fe73 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 8000508:	2200      	movs	r2, #0
 800050a:	2108      	movs	r1, #8
 800050c:	487c      	ldr	r0, [pc, #496]	; (8000700 <display7SEG+0x308>)
 800050e:	f001 fe6e 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 8000512:	2201      	movs	r2, #1
 8000514:	2110      	movs	r1, #16
 8000516:	487a      	ldr	r0, [pc, #488]	; (8000700 <display7SEG+0x308>)
 8000518:	f001 fe69 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 800051c:	2201      	movs	r2, #1
 800051e:	2120      	movs	r1, #32
 8000520:	4877      	ldr	r0, [pc, #476]	; (8000700 <display7SEG+0x308>)
 8000522:	f001 fe64 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	4875      	ldr	r0, [pc, #468]	; (8000700 <display7SEG+0x308>)
 800052c:	f001 fe5f 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 4){
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	2b04      	cmp	r3, #4
 8000534:	d122      	bne.n	800057c <display7SEG+0x184>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, SET);
 8000536:	2201      	movs	r2, #1
 8000538:	2101      	movs	r1, #1
 800053a:	4871      	ldr	r0, [pc, #452]	; (8000700 <display7SEG+0x308>)
 800053c:	f001 fe57 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000540:	2200      	movs	r2, #0
 8000542:	2102      	movs	r1, #2
 8000544:	486e      	ldr	r0, [pc, #440]	; (8000700 <display7SEG+0x308>)
 8000546:	f001 fe52 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800054a:	2200      	movs	r2, #0
 800054c:	2104      	movs	r1, #4
 800054e:	486c      	ldr	r0, [pc, #432]	; (8000700 <display7SEG+0x308>)
 8000550:	f001 fe4d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000554:	2201      	movs	r2, #1
 8000556:	2108      	movs	r1, #8
 8000558:	4869      	ldr	r0, [pc, #420]	; (8000700 <display7SEG+0x308>)
 800055a:	f001 fe48 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 800055e:	2201      	movs	r2, #1
 8000560:	2110      	movs	r1, #16
 8000562:	4867      	ldr	r0, [pc, #412]	; (8000700 <display7SEG+0x308>)
 8000564:	f001 fe43 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000568:	2200      	movs	r2, #0
 800056a:	2120      	movs	r1, #32
 800056c:	4864      	ldr	r0, [pc, #400]	; (8000700 <display7SEG+0x308>)
 800056e:	f001 fe3e 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	4862      	ldr	r0, [pc, #392]	; (8000700 <display7SEG+0x308>)
 8000578:	f001 fe39 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 5){
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	2b05      	cmp	r3, #5
 8000580:	d122      	bne.n	80005c8 <display7SEG+0x1d0>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000582:	2200      	movs	r2, #0
 8000584:	2101      	movs	r1, #1
 8000586:	485e      	ldr	r0, [pc, #376]	; (8000700 <display7SEG+0x308>)
 8000588:	f001 fe31 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 800058c:	2201      	movs	r2, #1
 800058e:	2102      	movs	r1, #2
 8000590:	485b      	ldr	r0, [pc, #364]	; (8000700 <display7SEG+0x308>)
 8000592:	f001 fe2c 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 8000596:	2200      	movs	r2, #0
 8000598:	2104      	movs	r1, #4
 800059a:	4859      	ldr	r0, [pc, #356]	; (8000700 <display7SEG+0x308>)
 800059c:	f001 fe27 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80005a0:	2200      	movs	r2, #0
 80005a2:	2108      	movs	r1, #8
 80005a4:	4856      	ldr	r0, [pc, #344]	; (8000700 <display7SEG+0x308>)
 80005a6:	f001 fe22 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 80005aa:	2201      	movs	r2, #1
 80005ac:	2110      	movs	r1, #16
 80005ae:	4854      	ldr	r0, [pc, #336]	; (8000700 <display7SEG+0x308>)
 80005b0:	f001 fe1d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2120      	movs	r1, #32
 80005b8:	4851      	ldr	r0, [pc, #324]	; (8000700 <display7SEG+0x308>)
 80005ba:	f001 fe18 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	484f      	ldr	r0, [pc, #316]	; (8000700 <display7SEG+0x308>)
 80005c4:	f001 fe13 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 6){
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	2b06      	cmp	r3, #6
 80005cc:	d122      	bne.n	8000614 <display7SEG+0x21c>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80005ce:	2200      	movs	r2, #0
 80005d0:	2101      	movs	r1, #1
 80005d2:	484b      	ldr	r0, [pc, #300]	; (8000700 <display7SEG+0x308>)
 80005d4:	f001 fe0b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, SET);
 80005d8:	2201      	movs	r2, #1
 80005da:	2102      	movs	r1, #2
 80005dc:	4848      	ldr	r0, [pc, #288]	; (8000700 <display7SEG+0x308>)
 80005de:	f001 fe06 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80005e2:	2200      	movs	r2, #0
 80005e4:	2104      	movs	r1, #4
 80005e6:	4846      	ldr	r0, [pc, #280]	; (8000700 <display7SEG+0x308>)
 80005e8:	f001 fe01 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80005ec:	2200      	movs	r2, #0
 80005ee:	2108      	movs	r1, #8
 80005f0:	4843      	ldr	r0, [pc, #268]	; (8000700 <display7SEG+0x308>)
 80005f2:	f001 fdfc 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 80005f6:	2200      	movs	r2, #0
 80005f8:	2110      	movs	r1, #16
 80005fa:	4841      	ldr	r0, [pc, #260]	; (8000700 <display7SEG+0x308>)
 80005fc:	f001 fdf7 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000600:	2200      	movs	r2, #0
 8000602:	2120      	movs	r1, #32
 8000604:	483e      	ldr	r0, [pc, #248]	; (8000700 <display7SEG+0x308>)
 8000606:	f001 fdf2 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	483c      	ldr	r0, [pc, #240]	; (8000700 <display7SEG+0x308>)
 8000610:	f001 fded 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2b07      	cmp	r3, #7
 8000618:	d122      	bne.n	8000660 <display7SEG+0x268>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 800061a:	2200      	movs	r2, #0
 800061c:	2101      	movs	r1, #1
 800061e:	4838      	ldr	r0, [pc, #224]	; (8000700 <display7SEG+0x308>)
 8000620:	f001 fde5 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2102      	movs	r1, #2
 8000628:	4835      	ldr	r0, [pc, #212]	; (8000700 <display7SEG+0x308>)
 800062a:	f001 fde0 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2104      	movs	r1, #4
 8000632:	4833      	ldr	r0, [pc, #204]	; (8000700 <display7SEG+0x308>)
 8000634:	f001 fddb 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2108      	movs	r1, #8
 800063c:	4830      	ldr	r0, [pc, #192]	; (8000700 <display7SEG+0x308>)
 800063e:	f001 fdd6 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 8000642:	2201      	movs	r2, #1
 8000644:	2110      	movs	r1, #16
 8000646:	482e      	ldr	r0, [pc, #184]	; (8000700 <display7SEG+0x308>)
 8000648:	f001 fdd1 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, SET);
 800064c:	2201      	movs	r2, #1
 800064e:	2120      	movs	r1, #32
 8000650:	482b      	ldr	r0, [pc, #172]	; (8000700 <display7SEG+0x308>)
 8000652:	f001 fdcc 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, SET);
 8000656:	2201      	movs	r2, #1
 8000658:	2140      	movs	r1, #64	; 0x40
 800065a:	4829      	ldr	r0, [pc, #164]	; (8000700 <display7SEG+0x308>)
 800065c:	f001 fdc7 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 8){
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b08      	cmp	r3, #8
 8000664:	d122      	bne.n	80006ac <display7SEG+0x2b4>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	2101      	movs	r1, #1
 800066a:	4825      	ldr	r0, [pc, #148]	; (8000700 <display7SEG+0x308>)
 800066c:	f001 fdbf 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 8000670:	2200      	movs	r2, #0
 8000672:	2102      	movs	r1, #2
 8000674:	4822      	ldr	r0, [pc, #136]	; (8000700 <display7SEG+0x308>)
 8000676:	f001 fdba 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 800067a:	2200      	movs	r2, #0
 800067c:	2104      	movs	r1, #4
 800067e:	4820      	ldr	r0, [pc, #128]	; (8000700 <display7SEG+0x308>)
 8000680:	f001 fdb5 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 8000684:	2200      	movs	r2, #0
 8000686:	2108      	movs	r1, #8
 8000688:	481d      	ldr	r0, [pc, #116]	; (8000700 <display7SEG+0x308>)
 800068a:	f001 fdb0 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2110      	movs	r1, #16
 8000692:	481b      	ldr	r0, [pc, #108]	; (8000700 <display7SEG+0x308>)
 8000694:	f001 fdab 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 8000698:	2200      	movs	r2, #0
 800069a:	2120      	movs	r1, #32
 800069c:	4818      	ldr	r0, [pc, #96]	; (8000700 <display7SEG+0x308>)
 800069e:	f001 fda6 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	; 0x40
 80006a6:	4816      	ldr	r0, [pc, #88]	; (8000700 <display7SEG+0x308>)
 80006a8:	f001 fda1 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 9){
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	2b09      	cmp	r3, #9
 80006b0:	d122      	bne.n	80006f8 <display7SEG+0x300>
		HAL_GPIO_WritePin(SEGA1_GPIO_Port, SEGA1_Pin, RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2101      	movs	r1, #1
 80006b6:	4812      	ldr	r0, [pc, #72]	; (8000700 <display7SEG+0x308>)
 80006b8:	f001 fd99 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA2_GPIO_Port, SEGA2_Pin, RESET);
 80006bc:	2200      	movs	r2, #0
 80006be:	2102      	movs	r1, #2
 80006c0:	480f      	ldr	r0, [pc, #60]	; (8000700 <display7SEG+0x308>)
 80006c2:	f001 fd94 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA3_GPIO_Port, SEGA3_Pin, RESET);
 80006c6:	2200      	movs	r2, #0
 80006c8:	2104      	movs	r1, #4
 80006ca:	480d      	ldr	r0, [pc, #52]	; (8000700 <display7SEG+0x308>)
 80006cc:	f001 fd8f 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA4_GPIO_Port, SEGA4_Pin, RESET);
 80006d0:	2200      	movs	r2, #0
 80006d2:	2108      	movs	r1, #8
 80006d4:	480a      	ldr	r0, [pc, #40]	; (8000700 <display7SEG+0x308>)
 80006d6:	f001 fd8a 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA5_GPIO_Port, SEGA5_Pin, SET);
 80006da:	2201      	movs	r2, #1
 80006dc:	2110      	movs	r1, #16
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <display7SEG+0x308>)
 80006e0:	f001 fd85 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA6_GPIO_Port, SEGA6_Pin, RESET);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2120      	movs	r1, #32
 80006e8:	4805      	ldr	r0, [pc, #20]	; (8000700 <display7SEG+0x308>)
 80006ea:	f001 fd80 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGA7_GPIO_Port, SEGA7_Pin, RESET);
 80006ee:	2200      	movs	r2, #0
 80006f0:	2140      	movs	r1, #64	; 0x40
 80006f2:	4803      	ldr	r0, [pc, #12]	; (8000700 <display7SEG+0x308>)
 80006f4:	f001 fd7b 	bl	80021ee <HAL_GPIO_WritePin>
	}
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	40010c00 	.word	0x40010c00

08000704 <display7SEG_2>:
void display7SEG_2(int num)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]

	if(num == 0){
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	2b00      	cmp	r3, #0
 8000710:	d128      	bne.n	8000764 <display7SEG_2+0x60>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000712:	2200      	movs	r2, #0
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	48d2      	ldr	r0, [pc, #840]	; (8000a60 <display7SEG_2+0x35c>)
 8000718:	f001 fd69 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 800071c:	2200      	movs	r2, #0
 800071e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000722:	48cf      	ldr	r0, [pc, #828]	; (8000a60 <display7SEG_2+0x35c>)
 8000724:	f001 fd63 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000728:	2200      	movs	r2, #0
 800072a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800072e:	48cc      	ldr	r0, [pc, #816]	; (8000a60 <display7SEG_2+0x35c>)
 8000730:	f001 fd5d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000734:	2200      	movs	r2, #0
 8000736:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800073a:	48c9      	ldr	r0, [pc, #804]	; (8000a60 <display7SEG_2+0x35c>)
 800073c:	f001 fd57 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000746:	48c6      	ldr	r0, [pc, #792]	; (8000a60 <display7SEG_2+0x35c>)
 8000748:	f001 fd51 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000752:	48c3      	ldr	r0, [pc, #780]	; (8000a60 <display7SEG_2+0x35c>)
 8000754:	f001 fd4b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, SET);
 8000758:	2201      	movs	r2, #1
 800075a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800075e:	48c0      	ldr	r0, [pc, #768]	; (8000a60 <display7SEG_2+0x35c>)
 8000760:	f001 fd45 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 1){
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b01      	cmp	r3, #1
 8000768:	d128      	bne.n	80007bc <display7SEG_2+0xb8>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 800076a:	2201      	movs	r2, #1
 800076c:	2180      	movs	r1, #128	; 0x80
 800076e:	48bc      	ldr	r0, [pc, #752]	; (8000a60 <display7SEG_2+0x35c>)
 8000770:	f001 fd3d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000774:	2200      	movs	r2, #0
 8000776:	f44f 7180 	mov.w	r1, #256	; 0x100
 800077a:	48b9      	ldr	r0, [pc, #740]	; (8000a60 <display7SEG_2+0x35c>)
 800077c:	f001 fd37 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000786:	48b6      	ldr	r0, [pc, #728]	; (8000a60 <display7SEG_2+0x35c>)
 8000788:	f001 fd31 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 800078c:	2201      	movs	r2, #1
 800078e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000792:	48b3      	ldr	r0, [pc, #716]	; (8000a60 <display7SEG_2+0x35c>)
 8000794:	f001 fd2b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000798:	2201      	movs	r2, #1
 800079a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800079e:	48b0      	ldr	r0, [pc, #704]	; (8000a60 <display7SEG_2+0x35c>)
 80007a0:	f001 fd25 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80007aa:	48ad      	ldr	r0, [pc, #692]	; (8000a60 <display7SEG_2+0x35c>)
 80007ac:	f001 fd1f 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b6:	48aa      	ldr	r0, [pc, #680]	; (8000a60 <display7SEG_2+0x35c>)
 80007b8:	f001 fd19 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 2){
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	2b02      	cmp	r3, #2
 80007c0:	d128      	bne.n	8000814 <display7SEG_2+0x110>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2180      	movs	r1, #128	; 0x80
 80007c6:	48a6      	ldr	r0, [pc, #664]	; (8000a60 <display7SEG_2+0x35c>)
 80007c8:	f001 fd11 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	48a3      	ldr	r0, [pc, #652]	; (8000a60 <display7SEG_2+0x35c>)
 80007d4:	f001 fd0b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, SET);
 80007d8:	2201      	movs	r2, #1
 80007da:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007de:	48a0      	ldr	r0, [pc, #640]	; (8000a60 <display7SEG_2+0x35c>)
 80007e0:	f001 fd05 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007ea:	489d      	ldr	r0, [pc, #628]	; (8000a60 <display7SEG_2+0x35c>)
 80007ec:	f001 fcff 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80007f6:	489a      	ldr	r0, [pc, #616]	; (8000a60 <display7SEG_2+0x35c>)
 80007f8:	f001 fcf9 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80007fc:	2201      	movs	r2, #1
 80007fe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000802:	4897      	ldr	r0, [pc, #604]	; (8000a60 <display7SEG_2+0x35c>)
 8000804:	f001 fcf3 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800080e:	4894      	ldr	r0, [pc, #592]	; (8000a60 <display7SEG_2+0x35c>)
 8000810:	f001 fced 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 3){
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d128      	bne.n	800086c <display7SEG_2+0x168>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800081a:	2200      	movs	r2, #0
 800081c:	2180      	movs	r1, #128	; 0x80
 800081e:	4890      	ldr	r0, [pc, #576]	; (8000a60 <display7SEG_2+0x35c>)
 8000820:	f001 fce5 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000824:	2200      	movs	r2, #0
 8000826:	f44f 7180 	mov.w	r1, #256	; 0x100
 800082a:	488d      	ldr	r0, [pc, #564]	; (8000a60 <display7SEG_2+0x35c>)
 800082c:	f001 fcdf 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000830:	2200      	movs	r2, #0
 8000832:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000836:	488a      	ldr	r0, [pc, #552]	; (8000a60 <display7SEG_2+0x35c>)
 8000838:	f001 fcd9 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 800083c:	2200      	movs	r2, #0
 800083e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000842:	4887      	ldr	r0, [pc, #540]	; (8000a60 <display7SEG_2+0x35c>)
 8000844:	f001 fcd3 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800084e:	4884      	ldr	r0, [pc, #528]	; (8000a60 <display7SEG_2+0x35c>)
 8000850:	f001 fccd 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 8000854:	2201      	movs	r2, #1
 8000856:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800085a:	4881      	ldr	r0, [pc, #516]	; (8000a60 <display7SEG_2+0x35c>)
 800085c:	f001 fcc7 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000860:	2200      	movs	r2, #0
 8000862:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000866:	487e      	ldr	r0, [pc, #504]	; (8000a60 <display7SEG_2+0x35c>)
 8000868:	f001 fcc1 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 4){
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	2b04      	cmp	r3, #4
 8000870:	d128      	bne.n	80008c4 <display7SEG_2+0x1c0>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, SET);
 8000872:	2201      	movs	r2, #1
 8000874:	2180      	movs	r1, #128	; 0x80
 8000876:	487a      	ldr	r0, [pc, #488]	; (8000a60 <display7SEG_2+0x35c>)
 8000878:	f001 fcb9 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 800087c:	2200      	movs	r2, #0
 800087e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000882:	4877      	ldr	r0, [pc, #476]	; (8000a60 <display7SEG_2+0x35c>)
 8000884:	f001 fcb3 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000888:	2200      	movs	r2, #0
 800088a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800088e:	4874      	ldr	r0, [pc, #464]	; (8000a60 <display7SEG_2+0x35c>)
 8000890:	f001 fcad 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 8000894:	2201      	movs	r2, #1
 8000896:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800089a:	4871      	ldr	r0, [pc, #452]	; (8000a60 <display7SEG_2+0x35c>)
 800089c:	f001 fca7 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80008a0:	2201      	movs	r2, #1
 80008a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008a6:	486e      	ldr	r0, [pc, #440]	; (8000a60 <display7SEG_2+0x35c>)
 80008a8:	f001 fca1 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80008b2:	486b      	ldr	r0, [pc, #428]	; (8000a60 <display7SEG_2+0x35c>)
 80008b4:	f001 fc9b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008be:	4868      	ldr	r0, [pc, #416]	; (8000a60 <display7SEG_2+0x35c>)
 80008c0:	f001 fc95 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 5){
 80008c4:	687b      	ldr	r3, [r7, #4]
 80008c6:	2b05      	cmp	r3, #5
 80008c8:	d128      	bne.n	800091c <display7SEG_2+0x218>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2180      	movs	r1, #128	; 0x80
 80008ce:	4864      	ldr	r0, [pc, #400]	; (8000a60 <display7SEG_2+0x35c>)
 80008d0:	f001 fc8d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 80008d4:	2201      	movs	r2, #1
 80008d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008da:	4861      	ldr	r0, [pc, #388]	; (8000a60 <display7SEG_2+0x35c>)
 80008dc:	f001 fc87 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80008e0:	2200      	movs	r2, #0
 80008e2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008e6:	485e      	ldr	r0, [pc, #376]	; (8000a60 <display7SEG_2+0x35c>)
 80008e8:	f001 fc81 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80008ec:	2200      	movs	r2, #0
 80008ee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80008f2:	485b      	ldr	r0, [pc, #364]	; (8000a60 <display7SEG_2+0x35c>)
 80008f4:	f001 fc7b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80008f8:	2201      	movs	r2, #1
 80008fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80008fe:	4858      	ldr	r0, [pc, #352]	; (8000a60 <display7SEG_2+0x35c>)
 8000900:	f001 fc75 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000904:	2200      	movs	r2, #0
 8000906:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800090a:	4855      	ldr	r0, [pc, #340]	; (8000a60 <display7SEG_2+0x35c>)
 800090c:	f001 fc6f 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000910:	2200      	movs	r2, #0
 8000912:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000916:	4852      	ldr	r0, [pc, #328]	; (8000a60 <display7SEG_2+0x35c>)
 8000918:	f001 fc69 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 6){
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	2b06      	cmp	r3, #6
 8000920:	d128      	bne.n	8000974 <display7SEG_2+0x270>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	2180      	movs	r1, #128	; 0x80
 8000926:	484e      	ldr	r0, [pc, #312]	; (8000a60 <display7SEG_2+0x35c>)
 8000928:	f001 fc61 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, SET);
 800092c:	2201      	movs	r2, #1
 800092e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000932:	484b      	ldr	r0, [pc, #300]	; (8000a60 <display7SEG_2+0x35c>)
 8000934:	f001 fc5b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000938:	2200      	movs	r2, #0
 800093a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800093e:	4848      	ldr	r0, [pc, #288]	; (8000a60 <display7SEG_2+0x35c>)
 8000940:	f001 fc55 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000944:	2200      	movs	r2, #0
 8000946:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800094a:	4845      	ldr	r0, [pc, #276]	; (8000a60 <display7SEG_2+0x35c>)
 800094c:	f001 fc4f 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000950:	2200      	movs	r2, #0
 8000952:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000956:	4842      	ldr	r0, [pc, #264]	; (8000a60 <display7SEG_2+0x35c>)
 8000958:	f001 fc49 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 800095c:	2200      	movs	r2, #0
 800095e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000962:	483f      	ldr	r0, [pc, #252]	; (8000a60 <display7SEG_2+0x35c>)
 8000964:	f001 fc43 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000968:	2200      	movs	r2, #0
 800096a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800096e:	483c      	ldr	r0, [pc, #240]	; (8000a60 <display7SEG_2+0x35c>)
 8000970:	f001 fc3d 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 7){
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	2b07      	cmp	r3, #7
 8000978:	d128      	bne.n	80009cc <display7SEG_2+0x2c8>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 800097a:	2200      	movs	r2, #0
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	4838      	ldr	r0, [pc, #224]	; (8000a60 <display7SEG_2+0x35c>)
 8000980:	f001 fc35 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000984:	2200      	movs	r2, #0
 8000986:	f44f 7180 	mov.w	r1, #256	; 0x100
 800098a:	4835      	ldr	r0, [pc, #212]	; (8000a60 <display7SEG_2+0x35c>)
 800098c:	f001 fc2f 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000990:	2200      	movs	r2, #0
 8000992:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000996:	4832      	ldr	r0, [pc, #200]	; (8000a60 <display7SEG_2+0x35c>)
 8000998:	f001 fc29 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, SET);
 800099c:	2201      	movs	r2, #1
 800099e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009a2:	482f      	ldr	r0, [pc, #188]	; (8000a60 <display7SEG_2+0x35c>)
 80009a4:	f001 fc23 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009ae:	482c      	ldr	r0, [pc, #176]	; (8000a60 <display7SEG_2+0x35c>)
 80009b0:	f001 fc1d 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, SET);
 80009b4:	2201      	movs	r2, #1
 80009b6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ba:	4829      	ldr	r0, [pc, #164]	; (8000a60 <display7SEG_2+0x35c>)
 80009bc:	f001 fc17 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, SET);
 80009c0:	2201      	movs	r2, #1
 80009c2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009c6:	4826      	ldr	r0, [pc, #152]	; (8000a60 <display7SEG_2+0x35c>)
 80009c8:	f001 fc11 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 8){
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	2b08      	cmp	r3, #8
 80009d0:	d128      	bne.n	8000a24 <display7SEG_2+0x320>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 80009d2:	2200      	movs	r2, #0
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	4822      	ldr	r0, [pc, #136]	; (8000a60 <display7SEG_2+0x35c>)
 80009d8:	f001 fc09 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 80009dc:	2200      	movs	r2, #0
 80009de:	f44f 7180 	mov.w	r1, #256	; 0x100
 80009e2:	481f      	ldr	r0, [pc, #124]	; (8000a60 <display7SEG_2+0x35c>)
 80009e4:	f001 fc03 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 80009e8:	2200      	movs	r2, #0
 80009ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009ee:	481c      	ldr	r0, [pc, #112]	; (8000a60 <display7SEG_2+0x35c>)
 80009f0:	f001 fbfd 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 80009f4:	2200      	movs	r2, #0
 80009f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009fa:	4819      	ldr	r0, [pc, #100]	; (8000a60 <display7SEG_2+0x35c>)
 80009fc:	f001 fbf7 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, RESET);
 8000a00:	2200      	movs	r2, #0
 8000a02:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a06:	4816      	ldr	r0, [pc, #88]	; (8000a60 <display7SEG_2+0x35c>)
 8000a08:	f001 fbf1 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a12:	4813      	ldr	r0, [pc, #76]	; (8000a60 <display7SEG_2+0x35c>)
 8000a14:	f001 fbeb 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <display7SEG_2+0x35c>)
 8000a20:	f001 fbe5 	bl	80021ee <HAL_GPIO_WritePin>
	}
	if(num == 9){
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	2b09      	cmp	r3, #9
 8000a28:	d12b      	bne.n	8000a82 <display7SEG_2+0x37e>
		HAL_GPIO_WritePin(SEGB1_GPIO_Port, SEGB1_Pin, RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2180      	movs	r1, #128	; 0x80
 8000a2e:	480c      	ldr	r0, [pc, #48]	; (8000a60 <display7SEG_2+0x35c>)
 8000a30:	f001 fbdd 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB2_GPIO_Port, SEGB2_Pin, RESET);
 8000a34:	2200      	movs	r2, #0
 8000a36:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a3a:	4809      	ldr	r0, [pc, #36]	; (8000a60 <display7SEG_2+0x35c>)
 8000a3c:	f001 fbd7 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB3_GPIO_Port, SEGB3_Pin, RESET);
 8000a40:	2200      	movs	r2, #0
 8000a42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a46:	4806      	ldr	r0, [pc, #24]	; (8000a60 <display7SEG_2+0x35c>)
 8000a48:	f001 fbd1 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB4_GPIO_Port, SEGB4_Pin, RESET);
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a52:	4803      	ldr	r0, [pc, #12]	; (8000a60 <display7SEG_2+0x35c>)
 8000a54:	f001 fbcb 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB5_GPIO_Port, SEGB5_Pin, SET);
 8000a58:	2201      	movs	r2, #1
 8000a5a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a5e:	e001      	b.n	8000a64 <display7SEG_2+0x360>
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	4809      	ldr	r0, [pc, #36]	; (8000a8c <display7SEG_2+0x388>)
 8000a66:	f001 fbc2 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB6_GPIO_Port, SEGB6_Pin, RESET);
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a70:	4806      	ldr	r0, [pc, #24]	; (8000a8c <display7SEG_2+0x388>)
 8000a72:	f001 fbbc 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SEGB7_GPIO_Port, SEGB7_Pin, RESET);
 8000a76:	2200      	movs	r2, #0
 8000a78:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <display7SEG_2+0x388>)
 8000a7e:	f001 fbb6 	bl	80021ee <HAL_GPIO_WritePin>
	}
}
 8000a82:	bf00      	nop
 8000a84:	3708      	adds	r7, #8
 8000a86:	46bd      	mov	sp, r7
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	40010c00 	.word	0x40010c00

08000a90 <update7SEG>:

void update7SEG ( int index ){
 8000a90:	b580      	push	{r7, lr}
 8000a92:	b082      	sub	sp, #8
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 switch ( index ) {
 8000a98:	687b      	ldr	r3, [r7, #4]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <update7SEG+0x16>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d014      	beq.n	8000ace <update7SEG+0x3e>
	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
	 display7SEG(led_buffer[index]);
 break ;
 default :
 break ;
 8000aa4:	e027      	b.n	8000af6 <update7SEG+0x66>
	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, SET);
 8000aa6:	2201      	movs	r2, #1
 8000aa8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aac:	4814      	ldr	r0, [pc, #80]	; (8000b00 <update7SEG+0x70>)
 8000aae:	f001 fb9e 	bl	80021ee <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, RESET);
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ab8:	4811      	ldr	r0, [pc, #68]	; (8000b00 <update7SEG+0x70>)
 8000aba:	f001 fb98 	bl	80021ee <HAL_GPIO_WritePin>
	 display7SEG(led_buffer[index]);
 8000abe:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <update7SEG+0x74>)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f7ff fc96 	bl	80003f8 <display7SEG>
 break ;
 8000acc:	e013      	b.n	8000af6 <update7SEG+0x66>
	 HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, SET);
 8000ace:	2201      	movs	r2, #1
 8000ad0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ad4:	480a      	ldr	r0, [pc, #40]	; (8000b00 <update7SEG+0x70>)
 8000ad6:	f001 fb8a 	bl	80021ee <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, RESET);
 8000ada:	2200      	movs	r2, #0
 8000adc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ae0:	4807      	ldr	r0, [pc, #28]	; (8000b00 <update7SEG+0x70>)
 8000ae2:	f001 fb84 	bl	80021ee <HAL_GPIO_WritePin>
	 display7SEG(led_buffer[index]);
 8000ae6:	4a07      	ldr	r2, [pc, #28]	; (8000b04 <update7SEG+0x74>)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aee:	4618      	mov	r0, r3
 8000af0:	f7ff fc82 	bl	80003f8 <display7SEG>
 break ;
 8000af4:	bf00      	nop
 }
}
 8000af6:	bf00      	nop
 8000af8:	3708      	adds	r7, #8
 8000afa:	46bd      	mov	sp, r7
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40010c00 	.word	0x40010c00
 8000b04:	20000050 	.word	0x20000050

08000b08 <update7SEG_2>:
void update7SEG_2 ( int index ){
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 switch ( index ) {
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d003      	beq.n	8000b1e <update7SEG_2+0x16>
 8000b16:	687b      	ldr	r3, [r7, #4]
 8000b18:	2b03      	cmp	r3, #3
 8000b1a:	d014      	beq.n	8000b46 <update7SEG_2+0x3e>
	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
	 display7SEG_2(led_buffer[index]);
 break ;
 default :
 break ;
 8000b1c:	e027      	b.n	8000b6e <update7SEG_2+0x66>
	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	4814      	ldr	r0, [pc, #80]	; (8000b78 <update7SEG_2+0x70>)
 8000b26:	f001 fb62 	bl	80021ee <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, SET);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	4811      	ldr	r0, [pc, #68]	; (8000b78 <update7SEG_2+0x70>)
 8000b32:	f001 fb5c 	bl	80021ee <HAL_GPIO_WritePin>
	 display7SEG_2(led_buffer[index]);
 8000b36:	4a11      	ldr	r2, [pc, #68]	; (8000b7c <update7SEG_2+0x74>)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff fde0 	bl	8000704 <display7SEG_2>
 break ;
 8000b44:	e013      	b.n	8000b6e <update7SEG_2+0x66>
	 HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, SET);
 8000b46:	2201      	movs	r2, #1
 8000b48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b4c:	480a      	ldr	r0, [pc, #40]	; (8000b78 <update7SEG_2+0x70>)
 8000b4e:	f001 fb4e 	bl	80021ee <HAL_GPIO_WritePin>
	 HAL_GPIO_WritePin(EN4_GPIO_Port, EN4_Pin, RESET);
 8000b52:	2200      	movs	r2, #0
 8000b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b58:	4807      	ldr	r0, [pc, #28]	; (8000b78 <update7SEG_2+0x70>)
 8000b5a:	f001 fb48 	bl	80021ee <HAL_GPIO_WritePin>
	 display7SEG_2(led_buffer[index]);
 8000b5e:	4a07      	ldr	r2, [pc, #28]	; (8000b7c <update7SEG_2+0x74>)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff fdcc 	bl	8000704 <display7SEG_2>
 break ;
 8000b6c:	bf00      	nop
 }
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40010800 	.word	0x40010800
 8000b7c:	20000050 	.word	0x20000050

08000b80 <Increase_time>:
void Increase_time(int mode){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	led_buffer[0] = mode/10;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4a0d      	ldr	r2, [pc, #52]	; (8000bc0 <Increase_time+0x40>)
 8000b8c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b90:	1092      	asrs	r2, r2, #2
 8000b92:	17db      	asrs	r3, r3, #31
 8000b94:	1ad3      	subs	r3, r2, r3
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <Increase_time+0x44>)
 8000b98:	6013      	str	r3, [r2, #0]
	led_buffer[1] = mode%10;
 8000b9a:	6879      	ldr	r1, [r7, #4]
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <Increase_time+0x40>)
 8000b9e:	fb83 2301 	smull	r2, r3, r3, r1
 8000ba2:	109a      	asrs	r2, r3, #2
 8000ba4:	17cb      	asrs	r3, r1, #31
 8000ba6:	1ad2      	subs	r2, r2, r3
 8000ba8:	4613      	mov	r3, r2
 8000baa:	009b      	lsls	r3, r3, #2
 8000bac:	4413      	add	r3, r2
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	1aca      	subs	r2, r1, r3
 8000bb2:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <Increase_time+0x44>)
 8000bb4:	605a      	str	r2, [r3, #4]
}
 8000bb6:	bf00      	nop
 8000bb8:	370c      	adds	r7, #12
 8000bba:	46bd      	mov	sp, r7
 8000bbc:	bc80      	pop	{r7}
 8000bbe:	4770      	bx	lr
 8000bc0:	66666667 	.word	0x66666667
 8000bc4:	20000050 	.word	0x20000050

08000bc8 <Increase_time_2>:
void Increase_time_2(int mode2){
 8000bc8:	b480      	push	{r7}
 8000bca:	b083      	sub	sp, #12
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	led_buffer[2] = mode2/10;
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a0d      	ldr	r2, [pc, #52]	; (8000c08 <Increase_time_2+0x40>)
 8000bd4:	fb82 1203 	smull	r1, r2, r2, r3
 8000bd8:	1092      	asrs	r2, r2, #2
 8000bda:	17db      	asrs	r3, r3, #31
 8000bdc:	1ad3      	subs	r3, r2, r3
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <Increase_time_2+0x44>)
 8000be0:	6093      	str	r3, [r2, #8]
	led_buffer[3] = mode2%10;
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <Increase_time_2+0x40>)
 8000be6:	fb83 2301 	smull	r2, r3, r3, r1
 8000bea:	109a      	asrs	r2, r3, #2
 8000bec:	17cb      	asrs	r3, r1, #31
 8000bee:	1ad2      	subs	r2, r2, r3
 8000bf0:	4613      	mov	r3, r2
 8000bf2:	009b      	lsls	r3, r3, #2
 8000bf4:	4413      	add	r3, r2
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	1aca      	subs	r2, r1, r3
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <Increase_time_2+0x44>)
 8000bfc:	60da      	str	r2, [r3, #12]
}
 8000bfe:	bf00      	nop
 8000c00:	370c      	adds	r7, #12
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bc80      	pop	{r7}
 8000c06:	4770      	bx	lr
 8000c08:	66666667 	.word	0x66666667
 8000c0c:	20000050 	.word	0x20000050

08000c10 <fsm_automatic_run>:
#include "global.h"
#include "main.h"
#include "display_led.h"


void fsm_automatic_run(){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	switch(status){
 8000c14:	4b82      	ldr	r3, [pc, #520]	; (8000e20 <fsm_automatic_run+0x210>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	3b01      	subs	r3, #1
 8000c1a:	2b03      	cmp	r3, #3
 8000c1c:	f200 8188 	bhi.w	8000f30 <fsm_automatic_run+0x320>
 8000c20:	a201      	add	r2, pc, #4	; (adr r2, 8000c28 <fsm_automatic_run+0x18>)
 8000c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c26:	bf00      	nop
 8000c28:	08000c39 	.word	0x08000c39
 8000c2c:	08000c63 	.word	0x08000c63
 8000c30:	08000d41 	.word	0x08000d41
 8000c34:	08000e55 	.word	0x08000e55
	case INIT:
		status = AUTO_RED;
 8000c38:	4b79      	ldr	r3, [pc, #484]	; (8000e20 <fsm_automatic_run+0x210>)
 8000c3a:	2202      	movs	r2, #2
 8000c3c:	601a      	str	r2, [r3, #0]
		setTimer1(MAX_RED*100);
 8000c3e:	4b79      	ldr	r3, [pc, #484]	; (8000e24 <fsm_automatic_run+0x214>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	2264      	movs	r2, #100	; 0x64
 8000c44:	fb02 f303 	mul.w	r3, r2, r3
 8000c48:	4618      	mov	r0, r3
 8000c4a:	f000 fe01 	bl	8001850 <setTimer1>
		setTimer2(100);
 8000c4e:	2064      	movs	r0, #100	; 0x64
 8000c50:	f000 fe18 	bl	8001884 <setTimer2>
		setTimer4(50);
 8000c54:	2032      	movs	r0, #50	; 0x32
 8000c56:	f000 fe49 	bl	80018ec <setTimer4>
		index_led =0;
 8000c5a:	4b73      	ldr	r3, [pc, #460]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
		break;
 8000c60:	e16d      	b.n	8000f3e <fsm_automatic_run+0x32e>
	case AUTO_RED:
		if(num_red == 0) num_red = MAX_RED;
 8000c62:	4b72      	ldr	r3, [pc, #456]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d103      	bne.n	8000c72 <fsm_automatic_run+0x62>
 8000c6a:	4b6e      	ldr	r3, [pc, #440]	; (8000e24 <fsm_automatic_run+0x214>)
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	4a6f      	ldr	r2, [pc, #444]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c70:	6013      	str	r3, [r2, #0]
		if(index_led > 1) index_led =0;
 8000c72:	4b6d      	ldr	r3, [pc, #436]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	dd02      	ble.n	8000c80 <fsm_automatic_run+0x70>
 8000c7a:	4b6b      	ldr	r3, [pc, #428]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	601a      	str	r2, [r3, #0]
		Increase_time(num_red);
 8000c80:	4b6a      	ldr	r3, [pc, #424]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4618      	mov	r0, r3
 8000c86:	f7ff ff7b 	bl	8000b80 <Increase_time>
		update7SEG(index_led);
 8000c8a:	4b67      	ldr	r3, [pc, #412]	; (8000e28 <fsm_automatic_run+0x218>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f7ff fefe 	bl	8000a90 <update7SEG>
		if(timer2_flag == 1){
 8000c94:	4b66      	ldr	r3, [pc, #408]	; (8000e30 <fsm_automatic_run+0x220>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b01      	cmp	r3, #1
 8000c9a:	d107      	bne.n	8000cac <fsm_automatic_run+0x9c>
			num_red--;
 8000c9c:	4b63      	ldr	r3, [pc, #396]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	4a62      	ldr	r2, [pc, #392]	; (8000e2c <fsm_automatic_run+0x21c>)
 8000ca4:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000ca6:	2064      	movs	r0, #100	; 0x64
 8000ca8:	f000 fdec 	bl	8001884 <setTimer2>
		}
		if(timer4_flag == 1)
 8000cac:	4b61      	ldr	r3, [pc, #388]	; (8000e34 <fsm_automatic_run+0x224>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b01      	cmp	r3, #1
 8000cb2:	d107      	bne.n	8000cc4 <fsm_automatic_run+0xb4>
		{
			index_led++;
 8000cb4:	4b5c      	ldr	r3, [pc, #368]	; (8000e28 <fsm_automatic_run+0x218>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	4a5b      	ldr	r2, [pc, #364]	; (8000e28 <fsm_automatic_run+0x218>)
 8000cbc:	6013      	str	r3, [r2, #0]
			setTimer4(50);
 8000cbe:	2032      	movs	r0, #50	; 0x32
 8000cc0:	f000 fe14 	bl	80018ec <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, RESET);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2140      	movs	r1, #64	; 0x40
 8000cc8:	485b      	ldr	r0, [pc, #364]	; (8000e38 <fsm_automatic_run+0x228>)
 8000cca:	f001 fa90 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	4859      	ldr	r0, [pc, #356]	; (8000e38 <fsm_automatic_run+0x228>)
 8000cd4:	f001 fa8b 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000cd8:	2201      	movs	r2, #1
 8000cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cde:	4856      	ldr	r0, [pc, #344]	; (8000e38 <fsm_automatic_run+0x228>)
 8000ce0:	f001 fa85 	bl	80021ee <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000ce4:	4b55      	ldr	r3, [pc, #340]	; (8000e3c <fsm_automatic_run+0x22c>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	2b01      	cmp	r3, #1
 8000cea:	d116      	bne.n	8000d1a <fsm_automatic_run+0x10a>
			status = AUTO_GREEN;
 8000cec:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <fsm_automatic_run+0x210>)
 8000cee:	2203      	movs	r2, #3
 8000cf0:	601a      	str	r2, [r3, #0]
			setTimer1(MAX_GREEN*100);
 8000cf2:	4b53      	ldr	r3, [pc, #332]	; (8000e40 <fsm_automatic_run+0x230>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	2264      	movs	r2, #100	; 0x64
 8000cf8:	fb02 f303 	mul.w	r3, r2, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f000 fda7 	bl	8001850 <setTimer1>
			num_green =0;
 8000d02:	4b50      	ldr	r3, [pc, #320]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
			setTimer2(100);
 8000d08:	2064      	movs	r0, #100	; 0x64
 8000d0a:	f000 fdbb 	bl	8001884 <setTimer2>
			setTimer4(50);
 8000d0e:	2032      	movs	r0, #50	; 0x32
 8000d10:	f000 fdec 	bl	80018ec <setTimer4>
			index_led =0;
 8000d14:	4b44      	ldr	r3, [pc, #272]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	601a      	str	r2, [r3, #0]
		}
		if(is_Button1_Pressed() == 1)
 8000d1a:	f7ff fa17 	bl	800014c <is_Button1_Pressed>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	f040 8107 	bne.w	8000f34 <fsm_automatic_run+0x324>
		{
			status = MAN_RED;
 8000d26:	4b3e      	ldr	r3, [pc, #248]	; (8000e20 <fsm_automatic_run+0x210>)
 8000d28:	220c      	movs	r2, #12
 8000d2a:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000d2c:	2032      	movs	r0, #50	; 0x32
 8000d2e:	f000 fda9 	bl	8001884 <setTimer2>
			index_led =0;
 8000d32:	4b3d      	ldr	r3, [pc, #244]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
			index_led2 =2;
 8000d38:	4b43      	ldr	r3, [pc, #268]	; (8000e48 <fsm_automatic_run+0x238>)
 8000d3a:	2202      	movs	r2, #2
 8000d3c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000d3e:	e0f9      	b.n	8000f34 <fsm_automatic_run+0x324>
	case AUTO_GREEN:
		if(num_green == 0) num_green = MAX_GREEN;
 8000d40:	4b40      	ldr	r3, [pc, #256]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d103      	bne.n	8000d50 <fsm_automatic_run+0x140>
 8000d48:	4b3d      	ldr	r3, [pc, #244]	; (8000e40 <fsm_automatic_run+0x230>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a3d      	ldr	r2, [pc, #244]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d4e:	6013      	str	r3, [r2, #0]
		if(index_led > 1) index_led =0;
 8000d50:	4b35      	ldr	r3, [pc, #212]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	2b01      	cmp	r3, #1
 8000d56:	dd02      	ble.n	8000d5e <fsm_automatic_run+0x14e>
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
		Increase_time(num_green);
 8000d5e:	4b39      	ldr	r3, [pc, #228]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f7ff ff0c 	bl	8000b80 <Increase_time>
		update7SEG(index_led);
 8000d68:	4b2f      	ldr	r3, [pc, #188]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff fe8f 	bl	8000a90 <update7SEG>
		if(timer2_flag == 1){
 8000d72:	4b2f      	ldr	r3, [pc, #188]	; (8000e30 <fsm_automatic_run+0x220>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <fsm_automatic_run+0x17a>
			num_green--;
 8000d7a:	4b32      	ldr	r3, [pc, #200]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	3b01      	subs	r3, #1
 8000d80:	4a30      	ldr	r2, [pc, #192]	; (8000e44 <fsm_automatic_run+0x234>)
 8000d82:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000d84:	2064      	movs	r0, #100	; 0x64
 8000d86:	f000 fd7d 	bl	8001884 <setTimer2>
		}
		if(timer4_flag == 1)
 8000d8a:	4b2a      	ldr	r3, [pc, #168]	; (8000e34 <fsm_automatic_run+0x224>)
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	2b01      	cmp	r3, #1
 8000d90:	d107      	bne.n	8000da2 <fsm_automatic_run+0x192>
		{
			index_led++;
 8000d92:	4b25      	ldr	r3, [pc, #148]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a23      	ldr	r2, [pc, #140]	; (8000e28 <fsm_automatic_run+0x218>)
 8000d9a:	6013      	str	r3, [r2, #0]
			setTimer4(50);
 8000d9c:	2032      	movs	r0, #50	; 0x32
 8000d9e:	f000 fda5 	bl	80018ec <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000da2:	2201      	movs	r2, #1
 8000da4:	2140      	movs	r1, #64	; 0x40
 8000da6:	4824      	ldr	r0, [pc, #144]	; (8000e38 <fsm_automatic_run+0x228>)
 8000da8:	f001 fa21 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, RESET);
 8000dac:	2200      	movs	r2, #0
 8000dae:	2180      	movs	r1, #128	; 0x80
 8000db0:	4821      	ldr	r0, [pc, #132]	; (8000e38 <fsm_automatic_run+0x228>)
 8000db2:	f001 fa1c 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 8000db6:	2201      	movs	r2, #1
 8000db8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000dbc:	481e      	ldr	r0, [pc, #120]	; (8000e38 <fsm_automatic_run+0x228>)
 8000dbe:	f001 fa16 	bl	80021ee <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <fsm_automatic_run+0x22c>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	2b01      	cmp	r3, #1
 8000dc8:	d116      	bne.n	8000df8 <fsm_automatic_run+0x1e8>
			status = AUTO_YELLOW;
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <fsm_automatic_run+0x210>)
 8000dcc:	2204      	movs	r2, #4
 8000dce:	601a      	str	r2, [r3, #0]
			num_yellow=0;
 8000dd0:	4b1e      	ldr	r3, [pc, #120]	; (8000e4c <fsm_automatic_run+0x23c>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	601a      	str	r2, [r3, #0]
			setTimer1(MAX_YELLOW*100);
 8000dd6:	4b1e      	ldr	r3, [pc, #120]	; (8000e50 <fsm_automatic_run+0x240>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	2264      	movs	r2, #100	; 0x64
 8000ddc:	fb02 f303 	mul.w	r3, r2, r3
 8000de0:	4618      	mov	r0, r3
 8000de2:	f000 fd35 	bl	8001850 <setTimer1>
			setTimer2(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 fd4c 	bl	8001884 <setTimer2>
			setTimer4(50);
 8000dec:	2032      	movs	r0, #50	; 0x32
 8000dee:	f000 fd7d 	bl	80018ec <setTimer4>
			index_led = 0;
 8000df2:	4b0d      	ldr	r3, [pc, #52]	; (8000e28 <fsm_automatic_run+0x218>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
		}
		if(is_Button1_Pressed() == 1)
 8000df8:	f7ff f9a8 	bl	800014c <is_Button1_Pressed>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	f040 809a 	bne.w	8000f38 <fsm_automatic_run+0x328>
		{
			status = MAN_RED;
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <fsm_automatic_run+0x210>)
 8000e06:	220c      	movs	r2, #12
 8000e08:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000e0a:	2032      	movs	r0, #50	; 0x32
 8000e0c:	f000 fd3a 	bl	8001884 <setTimer2>
			index_led =0;
 8000e10:	4b05      	ldr	r3, [pc, #20]	; (8000e28 <fsm_automatic_run+0x218>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
			index_led2 =2;
 8000e16:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <fsm_automatic_run+0x238>)
 8000e18:	2202      	movs	r2, #2
 8000e1a:	601a      	str	r2, [r3, #0]
		}
		break;
 8000e1c:	e08c      	b.n	8000f38 <fsm_automatic_run+0x328>
 8000e1e:	bf00      	nop
 8000e20:	20000098 	.word	0x20000098
 8000e24:	20000034 	.word	0x20000034
 8000e28:	200000b8 	.word	0x200000b8
 8000e2c:	200000a0 	.word	0x200000a0
 8000e30:	200000d8 	.word	0x200000d8
 8000e34:	200000e0 	.word	0x200000e0
 8000e38:	40010800 	.word	0x40010800
 8000e3c:	200000d4 	.word	0x200000d4
 8000e40:	20000038 	.word	0x20000038
 8000e44:	200000a4 	.word	0x200000a4
 8000e48:	2000004c 	.word	0x2000004c
 8000e4c:	200000a8 	.word	0x200000a8
 8000e50:	2000003c 	.word	0x2000003c
	case AUTO_YELLOW:
		if(num_yellow == 0) num_yellow = MAX_YELLOW;
 8000e54:	4b3b      	ldr	r3, [pc, #236]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d103      	bne.n	8000e64 <fsm_automatic_run+0x254>
 8000e5c:	4b3a      	ldr	r3, [pc, #232]	; (8000f48 <fsm_automatic_run+0x338>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a38      	ldr	r2, [pc, #224]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e62:	6013      	str	r3, [r2, #0]
		if(index_led > 1) index_led =0;
 8000e64:	4b39      	ldr	r3, [pc, #228]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	dd02      	ble.n	8000e72 <fsm_automatic_run+0x262>
 8000e6c:	4b37      	ldr	r3, [pc, #220]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	601a      	str	r2, [r3, #0]
		Increase_time(num_yellow);
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	4618      	mov	r0, r3
 8000e78:	f7ff fe82 	bl	8000b80 <Increase_time>
		update7SEG(index_led);
 8000e7c:	4b33      	ldr	r3, [pc, #204]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff fe05 	bl	8000a90 <update7SEG>
		if(timer2_flag == 1){
 8000e86:	4b32      	ldr	r3, [pc, #200]	; (8000f50 <fsm_automatic_run+0x340>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	2b01      	cmp	r3, #1
 8000e8c:	d107      	bne.n	8000e9e <fsm_automatic_run+0x28e>
			num_yellow--;
 8000e8e:	4b2d      	ldr	r3, [pc, #180]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	4a2b      	ldr	r2, [pc, #172]	; (8000f44 <fsm_automatic_run+0x334>)
 8000e96:	6013      	str	r3, [r2, #0]
			setTimer2(100);
 8000e98:	2064      	movs	r0, #100	; 0x64
 8000e9a:	f000 fcf3 	bl	8001884 <setTimer2>
		}
		if(timer4_flag == 1)
 8000e9e:	4b2d      	ldr	r3, [pc, #180]	; (8000f54 <fsm_automatic_run+0x344>)
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	2b01      	cmp	r3, #1
 8000ea4:	d107      	bne.n	8000eb6 <fsm_automatic_run+0x2a6>
		{
			index_led++;
 8000ea6:	4b29      	ldr	r3, [pc, #164]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	4a27      	ldr	r2, [pc, #156]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000eae:	6013      	str	r3, [r2, #0]
			setTimer4(50);
 8000eb0:	2032      	movs	r0, #50	; 0x32
 8000eb2:	f000 fd1b 	bl	80018ec <setTimer4>
		}
		HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	2140      	movs	r1, #64	; 0x40
 8000eba:	4827      	ldr	r0, [pc, #156]	; (8000f58 <fsm_automatic_run+0x348>)
 8000ebc:	f001 f997 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 8000ec0:	2201      	movs	r2, #1
 8000ec2:	2180      	movs	r1, #128	; 0x80
 8000ec4:	4824      	ldr	r0, [pc, #144]	; (8000f58 <fsm_automatic_run+0x348>)
 8000ec6:	f001 f992 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, RESET);
 8000eca:	2200      	movs	r2, #0
 8000ecc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ed0:	4821      	ldr	r0, [pc, #132]	; (8000f58 <fsm_automatic_run+0x348>)
 8000ed2:	f001 f98c 	bl	80021ee <HAL_GPIO_WritePin>
		if(timer1_flag == 1){
 8000ed6:	4b21      	ldr	r3, [pc, #132]	; (8000f5c <fsm_automatic_run+0x34c>)
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	d116      	bne.n	8000f0c <fsm_automatic_run+0x2fc>
			status = AUTO_RED;
 8000ede:	4b20      	ldr	r3, [pc, #128]	; (8000f60 <fsm_automatic_run+0x350>)
 8000ee0:	2202      	movs	r2, #2
 8000ee2:	601a      	str	r2, [r3, #0]
			num_red=0;
 8000ee4:	4b1f      	ldr	r3, [pc, #124]	; (8000f64 <fsm_automatic_run+0x354>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	601a      	str	r2, [r3, #0]
			setTimer1(MAX_RED*100);
 8000eea:	4b1f      	ldr	r3, [pc, #124]	; (8000f68 <fsm_automatic_run+0x358>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	2264      	movs	r2, #100	; 0x64
 8000ef0:	fb02 f303 	mul.w	r3, r2, r3
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f000 fcab 	bl	8001850 <setTimer1>
			setTimer2(100);
 8000efa:	2064      	movs	r0, #100	; 0x64
 8000efc:	f000 fcc2 	bl	8001884 <setTimer2>
			setTimer4(50);
 8000f00:	2032      	movs	r0, #50	; 0x32
 8000f02:	f000 fcf3 	bl	80018ec <setTimer4>
			index_led = 0;
 8000f06:	4b11      	ldr	r3, [pc, #68]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	601a      	str	r2, [r3, #0]
		}
		if(is_Button1_Pressed() == 1)
 8000f0c:	f7ff f91e 	bl	800014c <is_Button1_Pressed>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d112      	bne.n	8000f3c <fsm_automatic_run+0x32c>
		{
			status = MAN_RED;
 8000f16:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <fsm_automatic_run+0x350>)
 8000f18:	220c      	movs	r2, #12
 8000f1a:	601a      	str	r2, [r3, #0]
			setTimer2(50);
 8000f1c:	2032      	movs	r0, #50	; 0x32
 8000f1e:	f000 fcb1 	bl	8001884 <setTimer2>
			index_led =0;
 8000f22:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <fsm_automatic_run+0x33c>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
			index_led2 =2;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <fsm_automatic_run+0x35c>)
 8000f2a:	2202      	movs	r2, #2
 8000f2c:	601a      	str	r2, [r3, #0]
		}
		break;
 8000f2e:	e005      	b.n	8000f3c <fsm_automatic_run+0x32c>
	default:
		break;
 8000f30:	bf00      	nop
 8000f32:	e004      	b.n	8000f3e <fsm_automatic_run+0x32e>
		break;
 8000f34:	bf00      	nop
 8000f36:	e002      	b.n	8000f3e <fsm_automatic_run+0x32e>
		break;
 8000f38:	bf00      	nop
 8000f3a:	e000      	b.n	8000f3e <fsm_automatic_run+0x32e>
		break;
 8000f3c:	bf00      	nop
	}
}
 8000f3e:	bf00      	nop
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200000a8 	.word	0x200000a8
 8000f48:	2000003c 	.word	0x2000003c
 8000f4c:	200000b8 	.word	0x200000b8
 8000f50:	200000d8 	.word	0x200000d8
 8000f54:	200000e0 	.word	0x200000e0
 8000f58:	40010800 	.word	0x40010800
 8000f5c:	200000d4 	.word	0x200000d4
 8000f60:	20000098 	.word	0x20000098
 8000f64:	200000a0 	.word	0x200000a0
 8000f68:	20000034 	.word	0x20000034
 8000f6c:	2000004c 	.word	0x2000004c

08000f70 <fsm_automatic_2_run>:
//---fsm_automatic_2-------
void fsm_automatic_2_run(){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
	switch(status_2){
 8000f74:	4ba9      	ldr	r3, [pc, #676]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	2b03      	cmp	r3, #3
 8000f7c:	f200 8145 	bhi.w	800120a <fsm_automatic_2_run+0x29a>
 8000f80:	a201      	add	r2, pc, #4	; (adr r2, 8000f88 <fsm_automatic_2_run+0x18>)
 8000f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f86:	bf00      	nop
 8000f88:	08000f99 	.word	0x08000f99
 8000f8c:	08000fc9 	.word	0x08000fc9
 8000f90:	0800108b 	.word	0x0800108b
 8000f94:	0800114b 	.word	0x0800114b
	case INIT:
		status_2 = AUTO_GREEN;
 8000f98:	4ba0      	ldr	r3, [pc, #640]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8000f9a:	2203      	movs	r2, #3
 8000f9c:	601a      	str	r2, [r3, #0]
		setTimer3(MAX_GREEN*100);
 8000f9e:	4ba0      	ldr	r3, [pc, #640]	; (8001220 <fsm_automatic_2_run+0x2b0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	2264      	movs	r2, #100	; 0x64
 8000fa4:	fb02 f303 	mul.w	r3, r2, r3
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f000 fc85 	bl	80018b8 <setTimer3>
		setTimer5(100);
 8000fae:	2064      	movs	r0, #100	; 0x64
 8000fb0:	f000 fcb6 	bl	8001920 <setTimer5>
		setTimer6(50);
 8000fb4:	2032      	movs	r0, #50	; 0x32
 8000fb6:	f000 fccd 	bl	8001954 <setTimer6>
		index_led2 =2;
 8000fba:	4b9a      	ldr	r3, [pc, #616]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8000fbc:	2202      	movs	r2, #2
 8000fbe:	601a      	str	r2, [r3, #0]
		num_green2 =0;
 8000fc0:	4b99      	ldr	r3, [pc, #612]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	601a      	str	r2, [r3, #0]
		break;
 8000fc6:	e127      	b.n	8001218 <fsm_automatic_2_run+0x2a8>
	case AUTO_RED:
		if(index_led2 >3 ) index_led2 = 2;
 8000fc8:	4b96      	ldr	r3, [pc, #600]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	2b03      	cmp	r3, #3
 8000fce:	dd02      	ble.n	8000fd6 <fsm_automatic_2_run+0x66>
 8000fd0:	4b94      	ldr	r3, [pc, #592]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8000fd2:	2202      	movs	r2, #2
 8000fd4:	601a      	str	r2, [r3, #0]
		if(num_red2 == 0) num_red2 = MAX_RED2;
 8000fd6:	4b95      	ldr	r3, [pc, #596]	; (800122c <fsm_automatic_2_run+0x2bc>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d103      	bne.n	8000fe6 <fsm_automatic_2_run+0x76>
 8000fde:	4b94      	ldr	r3, [pc, #592]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a92      	ldr	r2, [pc, #584]	; (800122c <fsm_automatic_2_run+0x2bc>)
 8000fe4:	6013      	str	r3, [r2, #0]
		Increase_time_2(num_red2);
 8000fe6:	4b91      	ldr	r3, [pc, #580]	; (800122c <fsm_automatic_2_run+0x2bc>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff fdec 	bl	8000bc8 <Increase_time_2>
		update7SEG_2(index_led2);
 8000ff0:	4b8c      	ldr	r3, [pc, #560]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fd87 	bl	8000b08 <update7SEG_2>
		if(timer5_flag == 1){
 8000ffa:	4b8e      	ldr	r3, [pc, #568]	; (8001234 <fsm_automatic_2_run+0x2c4>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	2b01      	cmp	r3, #1
 8001000:	d107      	bne.n	8001012 <fsm_automatic_2_run+0xa2>
			num_red2--;
 8001002:	4b8a      	ldr	r3, [pc, #552]	; (800122c <fsm_automatic_2_run+0x2bc>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	3b01      	subs	r3, #1
 8001008:	4a88      	ldr	r2, [pc, #544]	; (800122c <fsm_automatic_2_run+0x2bc>)
 800100a:	6013      	str	r3, [r2, #0]
			setTimer5(100);
 800100c:	2064      	movs	r0, #100	; 0x64
 800100e:	f000 fc87 	bl	8001920 <setTimer5>
		}
		if(timer6_flag == 1)
 8001012:	4b89      	ldr	r3, [pc, #548]	; (8001238 <fsm_automatic_2_run+0x2c8>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <fsm_automatic_2_run+0xba>
		{
			index_led2++;
 800101a:	4b82      	ldr	r3, [pc, #520]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	3301      	adds	r3, #1
 8001020:	4a80      	ldr	r2, [pc, #512]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8001022:	6013      	str	r3, [r2, #0]
			setTimer6(50);
 8001024:	2032      	movs	r0, #50	; 0x32
 8001026:	f000 fc95 	bl	8001954 <setTimer6>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, RESET);
 800102a:	2200      	movs	r2, #0
 800102c:	2104      	movs	r1, #4
 800102e:	4883      	ldr	r0, [pc, #524]	; (800123c <fsm_automatic_2_run+0x2cc>)
 8001030:	f001 f8dd 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 8001034:	2201      	movs	r2, #1
 8001036:	2108      	movs	r1, #8
 8001038:	4880      	ldr	r0, [pc, #512]	; (800123c <fsm_automatic_2_run+0x2cc>)
 800103a:	f001 f8d8 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 800103e:	2201      	movs	r2, #1
 8001040:	2110      	movs	r1, #16
 8001042:	487e      	ldr	r0, [pc, #504]	; (800123c <fsm_automatic_2_run+0x2cc>)
 8001044:	f001 f8d3 	bl	80021ee <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 8001048:	4b7d      	ldr	r3, [pc, #500]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d113      	bne.n	8001078 <fsm_automatic_2_run+0x108>
			status_2 = AUTO_GREEN;
 8001050:	4b72      	ldr	r3, [pc, #456]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8001052:	2203      	movs	r2, #3
 8001054:	601a      	str	r2, [r3, #0]
			setTimer3(MAX_GREEN2*100);
 8001056:	4b7b      	ldr	r3, [pc, #492]	; (8001244 <fsm_automatic_2_run+0x2d4>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	2264      	movs	r2, #100	; 0x64
 800105c:	fb02 f303 	mul.w	r3, r2, r3
 8001060:	4618      	mov	r0, r3
 8001062:	f000 fc29 	bl	80018b8 <setTimer3>
			setTimer5(100);
 8001066:	2064      	movs	r0, #100	; 0x64
 8001068:	f000 fc5a 	bl	8001920 <setTimer5>
			setTimer6(50);
 800106c:	2032      	movs	r0, #50	; 0x32
 800106e:	f000 fc71 	bl	8001954 <setTimer6>
			num_green2 =0;
 8001072:	4b6d      	ldr	r3, [pc, #436]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
		}
		if(status == MAN_RED)
 8001078:	4b73      	ldr	r3, [pc, #460]	; (8001248 <fsm_automatic_2_run+0x2d8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	2b0c      	cmp	r3, #12
 800107e:	f040 80c6 	bne.w	800120e <fsm_automatic_2_run+0x29e>
		{
			status_2 = 100;
 8001082:	4b66      	ldr	r3, [pc, #408]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8001084:	2264      	movs	r2, #100	; 0x64
 8001086:	601a      	str	r2, [r3, #0]
		}
		break;
 8001088:	e0c1      	b.n	800120e <fsm_automatic_2_run+0x29e>
	case AUTO_GREEN:
		if(index_led2 >3 ) index_led2 = 2;
 800108a:	4b66      	ldr	r3, [pc, #408]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	2b03      	cmp	r3, #3
 8001090:	dd02      	ble.n	8001098 <fsm_automatic_2_run+0x128>
 8001092:	4b64      	ldr	r3, [pc, #400]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8001094:	2202      	movs	r2, #2
 8001096:	601a      	str	r2, [r3, #0]
		if(num_green2 == 0) num_green2 = MAX_GREEN2;
 8001098:	4b63      	ldr	r3, [pc, #396]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d103      	bne.n	80010a8 <fsm_automatic_2_run+0x138>
 80010a0:	4b68      	ldr	r3, [pc, #416]	; (8001244 <fsm_automatic_2_run+0x2d4>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a60      	ldr	r2, [pc, #384]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 80010a6:	6013      	str	r3, [r2, #0]
		Increase_time_2(num_green2);
 80010a8:	4b5f      	ldr	r3, [pc, #380]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4618      	mov	r0, r3
 80010ae:	f7ff fd8b 	bl	8000bc8 <Increase_time_2>
		update7SEG_2(index_led2);
 80010b2:	4b5c      	ldr	r3, [pc, #368]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fd26 	bl	8000b08 <update7SEG_2>
		if(timer5_flag == 1){
 80010bc:	4b5d      	ldr	r3, [pc, #372]	; (8001234 <fsm_automatic_2_run+0x2c4>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d107      	bne.n	80010d4 <fsm_automatic_2_run+0x164>
			num_green2--;
 80010c4:	4b58      	ldr	r3, [pc, #352]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	4a57      	ldr	r2, [pc, #348]	; (8001228 <fsm_automatic_2_run+0x2b8>)
 80010cc:	6013      	str	r3, [r2, #0]
			setTimer5(100);
 80010ce:	2064      	movs	r0, #100	; 0x64
 80010d0:	f000 fc26 	bl	8001920 <setTimer5>
		}
		if(timer6_flag == 1)
 80010d4:	4b58      	ldr	r3, [pc, #352]	; (8001238 <fsm_automatic_2_run+0x2c8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d107      	bne.n	80010ec <fsm_automatic_2_run+0x17c>
		{
			index_led2++;
 80010dc:	4b51      	ldr	r3, [pc, #324]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	3301      	adds	r3, #1
 80010e2:	4a50      	ldr	r2, [pc, #320]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 80010e4:	6013      	str	r3, [r2, #0]
			setTimer6(50);
 80010e6:	2032      	movs	r0, #50	; 0x32
 80010e8:	f000 fc34 	bl	8001954 <setTimer6>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80010ec:	2201      	movs	r2, #1
 80010ee:	2104      	movs	r1, #4
 80010f0:	4852      	ldr	r0, [pc, #328]	; (800123c <fsm_automatic_2_run+0x2cc>)
 80010f2:	f001 f87c 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	2108      	movs	r1, #8
 80010fa:	4850      	ldr	r0, [pc, #320]	; (800123c <fsm_automatic_2_run+0x2cc>)
 80010fc:	f001 f877 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, SET);
 8001100:	2201      	movs	r2, #1
 8001102:	2110      	movs	r1, #16
 8001104:	484d      	ldr	r0, [pc, #308]	; (800123c <fsm_automatic_2_run+0x2cc>)
 8001106:	f001 f872 	bl	80021ee <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 800110a:	4b4d      	ldr	r3, [pc, #308]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2b01      	cmp	r3, #1
 8001110:	d113      	bne.n	800113a <fsm_automatic_2_run+0x1ca>
			status_2 = AUTO_YELLOW;
 8001112:	4b42      	ldr	r3, [pc, #264]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8001114:	2204      	movs	r2, #4
 8001116:	601a      	str	r2, [r3, #0]
			num_yellow2=0;
 8001118:	4b4c      	ldr	r3, [pc, #304]	; (800124c <fsm_automatic_2_run+0x2dc>)
 800111a:	2200      	movs	r2, #0
 800111c:	601a      	str	r2, [r3, #0]
			setTimer3(MAX_YELLOW2*100);
 800111e:	4b4c      	ldr	r3, [pc, #304]	; (8001250 <fsm_automatic_2_run+0x2e0>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2264      	movs	r2, #100	; 0x64
 8001124:	fb02 f303 	mul.w	r3, r2, r3
 8001128:	4618      	mov	r0, r3
 800112a:	f000 fbc5 	bl	80018b8 <setTimer3>
			setTimer5(100);
 800112e:	2064      	movs	r0, #100	; 0x64
 8001130:	f000 fbf6 	bl	8001920 <setTimer5>
			setTimer6(50);
 8001134:	2032      	movs	r0, #50	; 0x32
 8001136:	f000 fc0d 	bl	8001954 <setTimer6>
		}
		if(status == MAN_RED)
 800113a:	4b43      	ldr	r3, [pc, #268]	; (8001248 <fsm_automatic_2_run+0x2d8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b0c      	cmp	r3, #12
 8001140:	d167      	bne.n	8001212 <fsm_automatic_2_run+0x2a2>
		{
			status_2 = 100;
 8001142:	4b36      	ldr	r3, [pc, #216]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8001144:	2264      	movs	r2, #100	; 0x64
 8001146:	601a      	str	r2, [r3, #0]

		}
		break;
 8001148:	e063      	b.n	8001212 <fsm_automatic_2_run+0x2a2>
	case AUTO_YELLOW:
		if(index_led2 >3 ) index_led2 = 2;
 800114a:	4b36      	ldr	r3, [pc, #216]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b03      	cmp	r3, #3
 8001150:	dd02      	ble.n	8001158 <fsm_automatic_2_run+0x1e8>
 8001152:	4b34      	ldr	r3, [pc, #208]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8001154:	2202      	movs	r2, #2
 8001156:	601a      	str	r2, [r3, #0]
		if(num_yellow2 == 0) num_yellow2 = MAX_YELLOW2;
 8001158:	4b3c      	ldr	r3, [pc, #240]	; (800124c <fsm_automatic_2_run+0x2dc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d103      	bne.n	8001168 <fsm_automatic_2_run+0x1f8>
 8001160:	4b3b      	ldr	r3, [pc, #236]	; (8001250 <fsm_automatic_2_run+0x2e0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a39      	ldr	r2, [pc, #228]	; (800124c <fsm_automatic_2_run+0x2dc>)
 8001166:	6013      	str	r3, [r2, #0]
		Increase_time_2(num_yellow2);
 8001168:	4b38      	ldr	r3, [pc, #224]	; (800124c <fsm_automatic_2_run+0x2dc>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	4618      	mov	r0, r3
 800116e:	f7ff fd2b 	bl	8000bc8 <Increase_time_2>
		update7SEG_2(index_led2);
 8001172:	4b2c      	ldr	r3, [pc, #176]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4618      	mov	r0, r3
 8001178:	f7ff fcc6 	bl	8000b08 <update7SEG_2>
		if(timer5_flag == 1){
 800117c:	4b2d      	ldr	r3, [pc, #180]	; (8001234 <fsm_automatic_2_run+0x2c4>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	2b01      	cmp	r3, #1
 8001182:	d107      	bne.n	8001194 <fsm_automatic_2_run+0x224>
			num_yellow2--;
 8001184:	4b31      	ldr	r3, [pc, #196]	; (800124c <fsm_automatic_2_run+0x2dc>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	3b01      	subs	r3, #1
 800118a:	4a30      	ldr	r2, [pc, #192]	; (800124c <fsm_automatic_2_run+0x2dc>)
 800118c:	6013      	str	r3, [r2, #0]
			setTimer5(100);
 800118e:	2064      	movs	r0, #100	; 0x64
 8001190:	f000 fbc6 	bl	8001920 <setTimer5>
		}
		if(timer6_flag == 1)
 8001194:	4b28      	ldr	r3, [pc, #160]	; (8001238 <fsm_automatic_2_run+0x2c8>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2b01      	cmp	r3, #1
 800119a:	d107      	bne.n	80011ac <fsm_automatic_2_run+0x23c>
		{
			index_led2++;
 800119c:	4b21      	ldr	r3, [pc, #132]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	3301      	adds	r3, #1
 80011a2:	4a20      	ldr	r2, [pc, #128]	; (8001224 <fsm_automatic_2_run+0x2b4>)
 80011a4:	6013      	str	r3, [r2, #0]
			setTimer6(50);
 80011a6:	2032      	movs	r0, #50	; 0x32
 80011a8:	f000 fbd4 	bl	8001954 <setTimer6>
		}
		HAL_GPIO_WritePin(LED_RED2_GPIO_Port, LED_RED2_Pin, SET);
 80011ac:	2201      	movs	r2, #1
 80011ae:	2104      	movs	r1, #4
 80011b0:	4822      	ldr	r0, [pc, #136]	; (800123c <fsm_automatic_2_run+0x2cc>)
 80011b2:	f001 f81c 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin, SET);
 80011b6:	2201      	movs	r2, #1
 80011b8:	2108      	movs	r1, #8
 80011ba:	4820      	ldr	r0, [pc, #128]	; (800123c <fsm_automatic_2_run+0x2cc>)
 80011bc:	f001 f817 	bl	80021ee <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin, RESET);
 80011c0:	2200      	movs	r2, #0
 80011c2:	2110      	movs	r1, #16
 80011c4:	481d      	ldr	r0, [pc, #116]	; (800123c <fsm_automatic_2_run+0x2cc>)
 80011c6:	f001 f812 	bl	80021ee <HAL_GPIO_WritePin>
		if(timer3_flag == 1){
 80011ca:	4b1d      	ldr	r3, [pc, #116]	; (8001240 <fsm_automatic_2_run+0x2d0>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d113      	bne.n	80011fa <fsm_automatic_2_run+0x28a>
			status_2 = AUTO_RED;
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <fsm_automatic_2_run+0x2ac>)
 80011d4:	2202      	movs	r2, #2
 80011d6:	601a      	str	r2, [r3, #0]
			num_red2=0;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <fsm_automatic_2_run+0x2bc>)
 80011da:	2200      	movs	r2, #0
 80011dc:	601a      	str	r2, [r3, #0]
			setTimer3(MAX_RED2*100);
 80011de:	4b14      	ldr	r3, [pc, #80]	; (8001230 <fsm_automatic_2_run+0x2c0>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2264      	movs	r2, #100	; 0x64
 80011e4:	fb02 f303 	mul.w	r3, r2, r3
 80011e8:	4618      	mov	r0, r3
 80011ea:	f000 fb65 	bl	80018b8 <setTimer3>
			setTimer5(100);
 80011ee:	2064      	movs	r0, #100	; 0x64
 80011f0:	f000 fb96 	bl	8001920 <setTimer5>
			setTimer6(50);
 80011f4:	2032      	movs	r0, #50	; 0x32
 80011f6:	f000 fbad 	bl	8001954 <setTimer6>
		}
		if(status_2 == MAN_RED)
 80011fa:	4b08      	ldr	r3, [pc, #32]	; (800121c <fsm_automatic_2_run+0x2ac>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	d109      	bne.n	8001216 <fsm_automatic_2_run+0x2a6>
		{
			status_2 = 100;
 8001202:	4b06      	ldr	r3, [pc, #24]	; (800121c <fsm_automatic_2_run+0x2ac>)
 8001204:	2264      	movs	r2, #100	; 0x64
 8001206:	601a      	str	r2, [r3, #0]
		}
		break;
 8001208:	e005      	b.n	8001216 <fsm_automatic_2_run+0x2a6>
	default:
		break;
 800120a:	bf00      	nop
 800120c:	e004      	b.n	8001218 <fsm_automatic_2_run+0x2a8>
		break;
 800120e:	bf00      	nop
 8001210:	e002      	b.n	8001218 <fsm_automatic_2_run+0x2a8>
		break;
 8001212:	bf00      	nop
 8001214:	e000      	b.n	8001218 <fsm_automatic_2_run+0x2a8>
		break;
 8001216:	bf00      	nop
	}
}
 8001218:	bf00      	nop
 800121a:	bd80      	pop	{r7, pc}
 800121c:	2000009c 	.word	0x2000009c
 8001220:	20000038 	.word	0x20000038
 8001224:	2000004c 	.word	0x2000004c
 8001228:	200000b0 	.word	0x200000b0
 800122c:	200000ac 	.word	0x200000ac
 8001230:	20000040 	.word	0x20000040
 8001234:	200000e4 	.word	0x200000e4
 8001238:	200000e8 	.word	0x200000e8
 800123c:	40010800 	.word	0x40010800
 8001240:	200000dc 	.word	0x200000dc
 8001244:	20000044 	.word	0x20000044
 8001248:	20000098 	.word	0x20000098
 800124c:	200000b4 	.word	0x200000b4
 8001250:	20000048 	.word	0x20000048

08001254 <fsm_manual_run>:

#include "fsm_manual.h"
#include "display_led.h"
#include "main.h"

void fsm_manual_run(){
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
	switch(status){
 8001258:	4b89      	ldr	r3, [pc, #548]	; (8001480 <fsm_manual_run+0x22c>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	2b0e      	cmp	r3, #14
 800125e:	f000 8127 	beq.w	80014b0 <fsm_manual_run+0x25c>
 8001262:	2b0e      	cmp	r3, #14
 8001264:	f300 81a3 	bgt.w	80015ae <fsm_manual_run+0x35a>
 8001268:	2b0c      	cmp	r3, #12
 800126a:	d003      	beq.n	8001274 <fsm_manual_run+0x20>
 800126c:	2b0d      	cmp	r3, #13
 800126e:	f000 8084 	beq.w	800137a <fsm_manual_run+0x126>
				setTimer1(MAX_RED*100-100);
				setTimer3(MAX_GREEN2*100-100);
			}
			break;
		default:
			break;
 8001272:	e19c      	b.n	80015ae <fsm_manual_run+0x35a>
			if(index_led > 1) index_led = 0;
 8001274:	4b83      	ldr	r3, [pc, #524]	; (8001484 <fsm_manual_run+0x230>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b01      	cmp	r3, #1
 800127a:	dd02      	ble.n	8001282 <fsm_manual_run+0x2e>
 800127c:	4b81      	ldr	r3, [pc, #516]	; (8001484 <fsm_manual_run+0x230>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]
			if(index_led2 > 3) index_led2 = 2;
 8001282:	4b81      	ldr	r3, [pc, #516]	; (8001488 <fsm_manual_run+0x234>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	2b03      	cmp	r3, #3
 8001288:	dd02      	ble.n	8001290 <fsm_manual_run+0x3c>
 800128a:	4b7f      	ldr	r3, [pc, #508]	; (8001488 <fsm_manual_run+0x234>)
 800128c:	2202      	movs	r2, #2
 800128e:	601a      	str	r2, [r3, #0]
			Increase_time(MAX_RED);
 8001290:	4b7e      	ldr	r3, [pc, #504]	; (800148c <fsm_manual_run+0x238>)
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4618      	mov	r0, r3
 8001296:	f7ff fc73 	bl	8000b80 <Increase_time>
			Increase_time_2(2);
 800129a:	2002      	movs	r0, #2
 800129c:	f7ff fc94 	bl	8000bc8 <Increase_time_2>
			update7SEG_2(index_led2);
 80012a0:	4b79      	ldr	r3, [pc, #484]	; (8001488 <fsm_manual_run+0x234>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4618      	mov	r0, r3
 80012a6:	f7ff fc2f 	bl	8000b08 <update7SEG_2>
			update7SEG(index_led);
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <fsm_manual_run+0x230>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fbee 	bl	8000a90 <update7SEG>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80012b4:	2201      	movs	r2, #1
 80012b6:	2180      	movs	r1, #128	; 0x80
 80012b8:	4875      	ldr	r0, [pc, #468]	; (8001490 <fsm_manual_run+0x23c>)
 80012ba:	f000 ff98 	bl	80021ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80012be:	2201      	movs	r2, #1
 80012c0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012c4:	4872      	ldr	r0, [pc, #456]	; (8001490 <fsm_manual_run+0x23c>)
 80012c6:	f000 ff92 	bl	80021ee <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80012ca:	4b72      	ldr	r3, [pc, #456]	; (8001494 <fsm_manual_run+0x240>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2b01      	cmp	r3, #1
 80012d0:	d114      	bne.n	80012fc <fsm_manual_run+0xa8>
				HAL_GPIO_TogglePin(LED_RED_GPIO_Port, LED_RED_Pin);
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	486e      	ldr	r0, [pc, #440]	; (8001490 <fsm_manual_run+0x23c>)
 80012d6:	f000 ffa2 	bl	800221e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_RED2_GPIO_Port, LED_RED2_Pin);
 80012da:	2104      	movs	r1, #4
 80012dc:	486c      	ldr	r0, [pc, #432]	; (8001490 <fsm_manual_run+0x23c>)
 80012de:	f000 ff9e 	bl	800221e <HAL_GPIO_TogglePin>
				index_led++;
 80012e2:	4b68      	ldr	r3, [pc, #416]	; (8001484 <fsm_manual_run+0x230>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	3301      	adds	r3, #1
 80012e8:	4a66      	ldr	r2, [pc, #408]	; (8001484 <fsm_manual_run+0x230>)
 80012ea:	6013      	str	r3, [r2, #0]
				index_led2++;
 80012ec:	4b66      	ldr	r3, [pc, #408]	; (8001488 <fsm_manual_run+0x234>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	3301      	adds	r3, #1
 80012f2:	4a65      	ldr	r2, [pc, #404]	; (8001488 <fsm_manual_run+0x234>)
 80012f4:	6013      	str	r3, [r2, #0]
				setTimer2(50);
 80012f6:	2032      	movs	r0, #50	; 0x32
 80012f8:	f000 fac4 	bl	8001884 <setTimer2>
			if(is_Button1_Pressed() == 1)
 80012fc:	f7fe ff26 	bl	800014c <is_Button1_Pressed>
 8001300:	4603      	mov	r3, r0
 8001302:	2b01      	cmp	r3, #1
 8001304:	d105      	bne.n	8001312 <fsm_manual_run+0xbe>
				status = MAN_GREEN;
 8001306:	4b5e      	ldr	r3, [pc, #376]	; (8001480 <fsm_manual_run+0x22c>)
 8001308:	220d      	movs	r2, #13
 800130a:	601a      	str	r2, [r3, #0]
				setTimer2(50);
 800130c:	2032      	movs	r0, #50	; 0x32
 800130e:	f000 fab9 	bl	8001884 <setTimer2>
			if(is_Button2_Pressed() == 1)
 8001312:	f7fe ff2d 	bl	8000170 <is_Button2_Pressed>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d109      	bne.n	8001330 <fsm_manual_run+0xdc>
				MAX_RED++;
 800131c:	4b5b      	ldr	r3, [pc, #364]	; (800148c <fsm_manual_run+0x238>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	3301      	adds	r3, #1
 8001322:	4a5a      	ldr	r2, [pc, #360]	; (800148c <fsm_manual_run+0x238>)
 8001324:	6013      	str	r3, [r2, #0]
				MAX_RED2++;
 8001326:	4b5c      	ldr	r3, [pc, #368]	; (8001498 <fsm_manual_run+0x244>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	3301      	adds	r3, #1
 800132c:	4a5a      	ldr	r2, [pc, #360]	; (8001498 <fsm_manual_run+0x244>)
 800132e:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 8001330:	f7fe ff30 	bl	8000194 <is_Button3_Pressed>
 8001334:	4603      	mov	r3, r0
 8001336:	2b01      	cmp	r3, #1
 8001338:	f040 813b 	bne.w	80015b2 <fsm_manual_run+0x35e>
				status = AUTO_RED;
 800133c:	4b50      	ldr	r3, [pc, #320]	; (8001480 <fsm_manual_run+0x22c>)
 800133e:	2202      	movs	r2, #2
 8001340:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 8001342:	4b56      	ldr	r3, [pc, #344]	; (800149c <fsm_manual_run+0x248>)
 8001344:	2203      	movs	r2, #3
 8001346:	601a      	str	r2, [r3, #0]
				num_red = 0;
 8001348:	4b55      	ldr	r3, [pc, #340]	; (80014a0 <fsm_manual_run+0x24c>)
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
				num_green2 = 0;
 800134e:	4b55      	ldr	r3, [pc, #340]	; (80014a4 <fsm_manual_run+0x250>)
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
				setTimer1(MAX_RED*100-100);
 8001354:	4b4d      	ldr	r3, [pc, #308]	; (800148c <fsm_manual_run+0x238>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	3b01      	subs	r3, #1
 800135a:	2264      	movs	r2, #100	; 0x64
 800135c:	fb02 f303 	mul.w	r3, r2, r3
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fa75 	bl	8001850 <setTimer1>
				setTimer3(MAX_GREEN2*100-100);
 8001366:	4b50      	ldr	r3, [pc, #320]	; (80014a8 <fsm_manual_run+0x254>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	3b01      	subs	r3, #1
 800136c:	2264      	movs	r2, #100	; 0x64
 800136e:	fb02 f303 	mul.w	r3, r2, r3
 8001372:	4618      	mov	r0, r3
 8001374:	f000 faa0 	bl	80018b8 <setTimer3>
			break;
 8001378:	e11b      	b.n	80015b2 <fsm_manual_run+0x35e>
			if(index_led > 1) index_led = 0;
 800137a:	4b42      	ldr	r3, [pc, #264]	; (8001484 <fsm_manual_run+0x230>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	2b01      	cmp	r3, #1
 8001380:	dd02      	ble.n	8001388 <fsm_manual_run+0x134>
 8001382:	4b40      	ldr	r3, [pc, #256]	; (8001484 <fsm_manual_run+0x230>)
 8001384:	2200      	movs	r2, #0
 8001386:	601a      	str	r2, [r3, #0]
			if(index_led2 > 3) index_led2 = 2;
 8001388:	4b3f      	ldr	r3, [pc, #252]	; (8001488 <fsm_manual_run+0x234>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2b03      	cmp	r3, #3
 800138e:	dd02      	ble.n	8001396 <fsm_manual_run+0x142>
 8001390:	4b3d      	ldr	r3, [pc, #244]	; (8001488 <fsm_manual_run+0x234>)
 8001392:	2202      	movs	r2, #2
 8001394:	601a      	str	r2, [r3, #0]
			Increase_time(MAX_GREEN);
 8001396:	4b45      	ldr	r3, [pc, #276]	; (80014ac <fsm_manual_run+0x258>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4618      	mov	r0, r3
 800139c:	f7ff fbf0 	bl	8000b80 <Increase_time>
			Increase_time_2(3);
 80013a0:	2003      	movs	r0, #3
 80013a2:	f7ff fc11 	bl	8000bc8 <Increase_time_2>
			update7SEG_2(index_led2);
 80013a6:	4b38      	ldr	r3, [pc, #224]	; (8001488 <fsm_manual_run+0x234>)
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff fbac 	bl	8000b08 <update7SEG_2>
			update7SEG(index_led);
 80013b0:	4b34      	ldr	r3, [pc, #208]	; (8001484 <fsm_manual_run+0x230>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fb6b 	bl	8000a90 <update7SEG>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80013ba:	2201      	movs	r2, #1
 80013bc:	2140      	movs	r1, #64	; 0x40
 80013be:	4834      	ldr	r0, [pc, #208]	; (8001490 <fsm_manual_run+0x23c>)
 80013c0:	f000 ff15 	bl	80021ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, SET);
 80013c4:	2201      	movs	r2, #1
 80013c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013ca:	4831      	ldr	r0, [pc, #196]	; (8001490 <fsm_manual_run+0x23c>)
 80013cc:	f000 ff0f 	bl	80021ee <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 80013d0:	4b30      	ldr	r3, [pc, #192]	; (8001494 <fsm_manual_run+0x240>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2b01      	cmp	r3, #1
 80013d6:	d114      	bne.n	8001402 <fsm_manual_run+0x1ae>
				HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
 80013d8:	2180      	movs	r1, #128	; 0x80
 80013da:	482d      	ldr	r0, [pc, #180]	; (8001490 <fsm_manual_run+0x23c>)
 80013dc:	f000 ff1f 	bl	800221e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_GREEN2_GPIO_Port, LED_GREEN2_Pin);
 80013e0:	2108      	movs	r1, #8
 80013e2:	482b      	ldr	r0, [pc, #172]	; (8001490 <fsm_manual_run+0x23c>)
 80013e4:	f000 ff1b 	bl	800221e <HAL_GPIO_TogglePin>
				index_led++;
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <fsm_manual_run+0x230>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a25      	ldr	r2, [pc, #148]	; (8001484 <fsm_manual_run+0x230>)
 80013f0:	6013      	str	r3, [r2, #0]
				index_led2++;
 80013f2:	4b25      	ldr	r3, [pc, #148]	; (8001488 <fsm_manual_run+0x234>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	3301      	adds	r3, #1
 80013f8:	4a23      	ldr	r2, [pc, #140]	; (8001488 <fsm_manual_run+0x234>)
 80013fa:	6013      	str	r3, [r2, #0]
				setTimer2(50);
 80013fc:	2032      	movs	r0, #50	; 0x32
 80013fe:	f000 fa41 	bl	8001884 <setTimer2>
			if(is_Button1_Pressed() == 1)
 8001402:	f7fe fea3 	bl	800014c <is_Button1_Pressed>
 8001406:	4603      	mov	r3, r0
 8001408:	2b01      	cmp	r3, #1
 800140a:	d105      	bne.n	8001418 <fsm_manual_run+0x1c4>
				status = MAN_YELLOW;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <fsm_manual_run+0x22c>)
 800140e:	220e      	movs	r2, #14
 8001410:	601a      	str	r2, [r3, #0]
				setTimer2(50);
 8001412:	2032      	movs	r0, #50	; 0x32
 8001414:	f000 fa36 	bl	8001884 <setTimer2>
			if(is_Button2_Pressed() == 1)
 8001418:	f7fe feaa 	bl	8000170 <is_Button2_Pressed>
 800141c:	4603      	mov	r3, r0
 800141e:	2b01      	cmp	r3, #1
 8001420:	d109      	bne.n	8001436 <fsm_manual_run+0x1e2>
				MAX_GREEN++;
 8001422:	4b22      	ldr	r3, [pc, #136]	; (80014ac <fsm_manual_run+0x258>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	3301      	adds	r3, #1
 8001428:	4a20      	ldr	r2, [pc, #128]	; (80014ac <fsm_manual_run+0x258>)
 800142a:	6013      	str	r3, [r2, #0]
				MAX_GREEN2++;
 800142c:	4b1e      	ldr	r3, [pc, #120]	; (80014a8 <fsm_manual_run+0x254>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	3301      	adds	r3, #1
 8001432:	4a1d      	ldr	r2, [pc, #116]	; (80014a8 <fsm_manual_run+0x254>)
 8001434:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 8001436:	f7fe fead 	bl	8000194 <is_Button3_Pressed>
 800143a:	4603      	mov	r3, r0
 800143c:	2b01      	cmp	r3, #1
 800143e:	f040 80ba 	bne.w	80015b6 <fsm_manual_run+0x362>
				status = AUTO_RED;
 8001442:	4b0f      	ldr	r3, [pc, #60]	; (8001480 <fsm_manual_run+0x22c>)
 8001444:	2202      	movs	r2, #2
 8001446:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 8001448:	4b14      	ldr	r3, [pc, #80]	; (800149c <fsm_manual_run+0x248>)
 800144a:	2203      	movs	r2, #3
 800144c:	601a      	str	r2, [r3, #0]
				num_red = 0;
 800144e:	4b14      	ldr	r3, [pc, #80]	; (80014a0 <fsm_manual_run+0x24c>)
 8001450:	2200      	movs	r2, #0
 8001452:	601a      	str	r2, [r3, #0]
				num_green2 = 0;
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <fsm_manual_run+0x250>)
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
				setTimer1(MAX_RED*100-100);
 800145a:	4b0c      	ldr	r3, [pc, #48]	; (800148c <fsm_manual_run+0x238>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	3b01      	subs	r3, #1
 8001460:	2264      	movs	r2, #100	; 0x64
 8001462:	fb02 f303 	mul.w	r3, r2, r3
 8001466:	4618      	mov	r0, r3
 8001468:	f000 f9f2 	bl	8001850 <setTimer1>
				setTimer3(MAX_GREEN2*100-100);
 800146c:	4b0e      	ldr	r3, [pc, #56]	; (80014a8 <fsm_manual_run+0x254>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	3b01      	subs	r3, #1
 8001472:	2264      	movs	r2, #100	; 0x64
 8001474:	fb02 f303 	mul.w	r3, r2, r3
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fa1d 	bl	80018b8 <setTimer3>
			break;
 800147e:	e09a      	b.n	80015b6 <fsm_manual_run+0x362>
 8001480:	20000098 	.word	0x20000098
 8001484:	200000b8 	.word	0x200000b8
 8001488:	2000004c 	.word	0x2000004c
 800148c:	20000034 	.word	0x20000034
 8001490:	40010800 	.word	0x40010800
 8001494:	200000d8 	.word	0x200000d8
 8001498:	20000040 	.word	0x20000040
 800149c:	2000009c 	.word	0x2000009c
 80014a0:	200000a0 	.word	0x200000a0
 80014a4:	200000b0 	.word	0x200000b0
 80014a8:	20000044 	.word	0x20000044
 80014ac:	20000038 	.word	0x20000038
			if(index_led > 1) index_led = 0;
 80014b0:	4b43      	ldr	r3, [pc, #268]	; (80015c0 <fsm_manual_run+0x36c>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	2b01      	cmp	r3, #1
 80014b6:	dd02      	ble.n	80014be <fsm_manual_run+0x26a>
 80014b8:	4b41      	ldr	r3, [pc, #260]	; (80015c0 <fsm_manual_run+0x36c>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
			if(index_led2 > 3) index_led2 = 2;
 80014be:	4b41      	ldr	r3, [pc, #260]	; (80015c4 <fsm_manual_run+0x370>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	2b03      	cmp	r3, #3
 80014c4:	dd02      	ble.n	80014cc <fsm_manual_run+0x278>
 80014c6:	4b3f      	ldr	r3, [pc, #252]	; (80015c4 <fsm_manual_run+0x370>)
 80014c8:	2202      	movs	r2, #2
 80014ca:	601a      	str	r2, [r3, #0]
			Increase_time(MAX_YELLOW);
 80014cc:	4b3e      	ldr	r3, [pc, #248]	; (80015c8 <fsm_manual_run+0x374>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4618      	mov	r0, r3
 80014d2:	f7ff fb55 	bl	8000b80 <Increase_time>
			Increase_time_2(4);
 80014d6:	2004      	movs	r0, #4
 80014d8:	f7ff fb76 	bl	8000bc8 <Increase_time_2>
			update7SEG_2(index_led2);
 80014dc:	4b39      	ldr	r3, [pc, #228]	; (80015c4 <fsm_manual_run+0x370>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fb11 	bl	8000b08 <update7SEG_2>
			update7SEG(index_led);
 80014e6:	4b36      	ldr	r3, [pc, #216]	; (80015c0 <fsm_manual_run+0x36c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f7ff fad0 	bl	8000a90 <update7SEG>
			HAL_GPIO_WritePin(LED_RED_GPIO_Port, LED_RED_Pin, SET);
 80014f0:	2201      	movs	r2, #1
 80014f2:	2140      	movs	r1, #64	; 0x40
 80014f4:	4835      	ldr	r0, [pc, #212]	; (80015cc <fsm_manual_run+0x378>)
 80014f6:	f000 fe7a 	bl	80021ee <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, SET);
 80014fa:	2201      	movs	r2, #1
 80014fc:	2180      	movs	r1, #128	; 0x80
 80014fe:	4833      	ldr	r0, [pc, #204]	; (80015cc <fsm_manual_run+0x378>)
 8001500:	f000 fe75 	bl	80021ee <HAL_GPIO_WritePin>
			if(timer2_flag == 1){
 8001504:	4b32      	ldr	r3, [pc, #200]	; (80015d0 <fsm_manual_run+0x37c>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b01      	cmp	r3, #1
 800150a:	d115      	bne.n	8001538 <fsm_manual_run+0x2e4>
				HAL_GPIO_TogglePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin);
 800150c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001510:	482e      	ldr	r0, [pc, #184]	; (80015cc <fsm_manual_run+0x378>)
 8001512:	f000 fe84 	bl	800221e <HAL_GPIO_TogglePin>
				HAL_GPIO_TogglePin(LED_YELLOW2_GPIO_Port, LED_YELLOW2_Pin);
 8001516:	2110      	movs	r1, #16
 8001518:	482c      	ldr	r0, [pc, #176]	; (80015cc <fsm_manual_run+0x378>)
 800151a:	f000 fe80 	bl	800221e <HAL_GPIO_TogglePin>
				index_led++;
 800151e:	4b28      	ldr	r3, [pc, #160]	; (80015c0 <fsm_manual_run+0x36c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	3301      	adds	r3, #1
 8001524:	4a26      	ldr	r2, [pc, #152]	; (80015c0 <fsm_manual_run+0x36c>)
 8001526:	6013      	str	r3, [r2, #0]
				index_led2++;
 8001528:	4b26      	ldr	r3, [pc, #152]	; (80015c4 <fsm_manual_run+0x370>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	3301      	adds	r3, #1
 800152e:	4a25      	ldr	r2, [pc, #148]	; (80015c4 <fsm_manual_run+0x370>)
 8001530:	6013      	str	r3, [r2, #0]
				setTimer2(50);
 8001532:	2032      	movs	r0, #50	; 0x32
 8001534:	f000 f9a6 	bl	8001884 <setTimer2>
			if(is_Button1_Pressed() == 1)
 8001538:	f7fe fe08 	bl	800014c <is_Button1_Pressed>
 800153c:	4603      	mov	r3, r0
 800153e:	2b01      	cmp	r3, #1
 8001540:	d102      	bne.n	8001548 <fsm_manual_run+0x2f4>
				status = MAN_RED;
 8001542:	4b24      	ldr	r3, [pc, #144]	; (80015d4 <fsm_manual_run+0x380>)
 8001544:	220c      	movs	r2, #12
 8001546:	601a      	str	r2, [r3, #0]
			if(is_Button2_Pressed() == 1)
 8001548:	f7fe fe12 	bl	8000170 <is_Button2_Pressed>
 800154c:	4603      	mov	r3, r0
 800154e:	2b01      	cmp	r3, #1
 8001550:	d109      	bne.n	8001566 <fsm_manual_run+0x312>
				MAX_YELLOW++;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <fsm_manual_run+0x374>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	3301      	adds	r3, #1
 8001558:	4a1b      	ldr	r2, [pc, #108]	; (80015c8 <fsm_manual_run+0x374>)
 800155a:	6013      	str	r3, [r2, #0]
				MAX_YELLOW2++;
 800155c:	4b1e      	ldr	r3, [pc, #120]	; (80015d8 <fsm_manual_run+0x384>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	3301      	adds	r3, #1
 8001562:	4a1d      	ldr	r2, [pc, #116]	; (80015d8 <fsm_manual_run+0x384>)
 8001564:	6013      	str	r3, [r2, #0]
			if(is_Button3_Pressed() == 1)
 8001566:	f7fe fe15 	bl	8000194 <is_Button3_Pressed>
 800156a:	4603      	mov	r3, r0
 800156c:	2b01      	cmp	r3, #1
 800156e:	d124      	bne.n	80015ba <fsm_manual_run+0x366>
				status = AUTO_RED;
 8001570:	4b18      	ldr	r3, [pc, #96]	; (80015d4 <fsm_manual_run+0x380>)
 8001572:	2202      	movs	r2, #2
 8001574:	601a      	str	r2, [r3, #0]
				status_2 = AUTO_GREEN;
 8001576:	4b19      	ldr	r3, [pc, #100]	; (80015dc <fsm_manual_run+0x388>)
 8001578:	2203      	movs	r2, #3
 800157a:	601a      	str	r2, [r3, #0]
				num_red = 0;
 800157c:	4b18      	ldr	r3, [pc, #96]	; (80015e0 <fsm_manual_run+0x38c>)
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
				num_green2 = 0;
 8001582:	4b18      	ldr	r3, [pc, #96]	; (80015e4 <fsm_manual_run+0x390>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
				setTimer1(MAX_RED*100-100);
 8001588:	4b17      	ldr	r3, [pc, #92]	; (80015e8 <fsm_manual_run+0x394>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	3b01      	subs	r3, #1
 800158e:	2264      	movs	r2, #100	; 0x64
 8001590:	fb02 f303 	mul.w	r3, r2, r3
 8001594:	4618      	mov	r0, r3
 8001596:	f000 f95b 	bl	8001850 <setTimer1>
				setTimer3(MAX_GREEN2*100-100);
 800159a:	4b14      	ldr	r3, [pc, #80]	; (80015ec <fsm_manual_run+0x398>)
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	3b01      	subs	r3, #1
 80015a0:	2264      	movs	r2, #100	; 0x64
 80015a2:	fb02 f303 	mul.w	r3, r2, r3
 80015a6:	4618      	mov	r0, r3
 80015a8:	f000 f986 	bl	80018b8 <setTimer3>
			break;
 80015ac:	e005      	b.n	80015ba <fsm_manual_run+0x366>
			break;
 80015ae:	bf00      	nop
 80015b0:	e004      	b.n	80015bc <fsm_manual_run+0x368>
			break;
 80015b2:	bf00      	nop
 80015b4:	e002      	b.n	80015bc <fsm_manual_run+0x368>
			break;
 80015b6:	bf00      	nop
 80015b8:	e000      	b.n	80015bc <fsm_manual_run+0x368>
			break;
 80015ba:	bf00      	nop
		}
}
 80015bc:	bf00      	nop
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	200000b8 	.word	0x200000b8
 80015c4:	2000004c 	.word	0x2000004c
 80015c8:	2000003c 	.word	0x2000003c
 80015cc:	40010800 	.word	0x40010800
 80015d0:	200000d8 	.word	0x200000d8
 80015d4:	20000098 	.word	0x20000098
 80015d8:	20000048 	.word	0x20000048
 80015dc:	2000009c 	.word	0x2000009c
 80015e0:	200000a0 	.word	0x200000a0
 80015e4:	200000b0 	.word	0x200000b0
 80015e8:	20000034 	.word	0x20000034
 80015ec:	20000044 	.word	0x20000044

080015f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015f4:	f000 fafa 	bl	8001bec <HAL_Init>

  /* USER CODE BEGIN Init */
    status = INIT;
 80015f8:	4b0a      	ldr	r3, [pc, #40]	; (8001624 <main+0x34>)
 80015fa:	2201      	movs	r2, #1
 80015fc:	601a      	str	r2, [r3, #0]
    status_2 =INIT;
 80015fe:	4b0a      	ldr	r3, [pc, #40]	; (8001628 <main+0x38>)
 8001600:	2201      	movs	r2, #1
 8001602:	601a      	str	r2, [r3, #0]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001604:	f000 f814 	bl	8001630 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001608:	f000 f89a 	bl	8001740 <MX_GPIO_Init>
  MX_TIM2_Init();
 800160c:	f000 f84c 	bl	80016a8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT (& htim2 ) ;
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <main+0x3c>)
 8001612:	f001 fa55 	bl	8002ac0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  	  fsm_automatic_run();
 8001616:	f7ff fafb 	bl	8000c10 <fsm_automatic_run>
	 	  fsm_manual_run();
 800161a:	f7ff fe1b 	bl	8001254 <fsm_manual_run>
	 	  fsm_automatic_2_run();
 800161e:	f7ff fca7 	bl	8000f70 <fsm_automatic_2_run>
	  	  fsm_automatic_run();
 8001622:	e7f8      	b.n	8001616 <main+0x26>
 8001624:	20000098 	.word	0x20000098
 8001628:	2000009c 	.word	0x2000009c
 800162c:	200000ec 	.word	0x200000ec

08001630 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b090      	sub	sp, #64	; 0x40
 8001634:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001636:	f107 0318 	add.w	r3, r7, #24
 800163a:	2228      	movs	r2, #40	; 0x28
 800163c:	2100      	movs	r1, #0
 800163e:	4618      	mov	r0, r3
 8001640:	f001 fdf6 	bl	8003230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	2200      	movs	r2, #0
 8001648:	601a      	str	r2, [r3, #0]
 800164a:	605a      	str	r2, [r3, #4]
 800164c:	609a      	str	r2, [r3, #8]
 800164e:	60da      	str	r2, [r3, #12]
 8001650:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001652:	2302      	movs	r3, #2
 8001654:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001656:	2301      	movs	r3, #1
 8001658:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800165a:	2310      	movs	r3, #16
 800165c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800165e:	2300      	movs	r3, #0
 8001660:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0318 	add.w	r3, r7, #24
 8001666:	4618      	mov	r0, r3
 8001668:	f000 fdf2 	bl	8002250 <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x46>
  {
    Error_Handler();
 8001672:	f000 f8e7 	bl	8001844 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800167a:	2300      	movs	r3, #0
 800167c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800168a:	1d3b      	adds	r3, r7, #4
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f001 f85e 	bl	8002750 <HAL_RCC_ClockConfig>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d001      	beq.n	800169e <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800169a:	f000 f8d3 	bl	8001844 <Error_Handler>
  }
}
 800169e:	bf00      	nop
 80016a0:	3740      	adds	r7, #64	; 0x40
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016ae:	f107 0308 	add.w	r3, r7, #8
 80016b2:	2200      	movs	r2, #0
 80016b4:	601a      	str	r2, [r3, #0]
 80016b6:	605a      	str	r2, [r3, #4]
 80016b8:	609a      	str	r2, [r3, #8]
 80016ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016bc:	463b      	mov	r3, r7
 80016be:	2200      	movs	r2, #0
 80016c0:	601a      	str	r2, [r3, #0]
 80016c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80016c4:	4b1d      	ldr	r3, [pc, #116]	; (800173c <MX_TIM2_Init+0x94>)
 80016c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80016ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 80016cc:	4b1b      	ldr	r3, [pc, #108]	; (800173c <MX_TIM2_Init+0x94>)
 80016ce:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80016d2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <MX_TIM2_Init+0x94>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80016da:	4b18      	ldr	r3, [pc, #96]	; (800173c <MX_TIM2_Init+0x94>)
 80016dc:	2209      	movs	r2, #9
 80016de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016e0:	4b16      	ldr	r3, [pc, #88]	; (800173c <MX_TIM2_Init+0x94>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <MX_TIM2_Init+0x94>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80016ec:	4813      	ldr	r0, [pc, #76]	; (800173c <MX_TIM2_Init+0x94>)
 80016ee:	f001 f997 	bl	8002a20 <HAL_TIM_Base_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80016f8:	f000 f8a4 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001700:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001702:	f107 0308 	add.w	r3, r7, #8
 8001706:	4619      	mov	r1, r3
 8001708:	480c      	ldr	r0, [pc, #48]	; (800173c <MX_TIM2_Init+0x94>)
 800170a:	f001 fb2d 	bl	8002d68 <HAL_TIM_ConfigClockSource>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d001      	beq.n	8001718 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001714:	f000 f896 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001718:	2300      	movs	r3, #0
 800171a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800171c:	2300      	movs	r3, #0
 800171e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001720:	463b      	mov	r3, r7
 8001722:	4619      	mov	r1, r3
 8001724:	4805      	ldr	r0, [pc, #20]	; (800173c <MX_TIM2_Init+0x94>)
 8001726:	f001 fcf5 	bl	8003114 <HAL_TIMEx_MasterConfigSynchronization>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001730:	f000 f888 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001734:	bf00      	nop
 8001736:	3718      	adds	r7, #24
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	200000ec 	.word	0x200000ec

08001740 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	f107 0310 	add.w	r3, r7, #16
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001754:	4b2f      	ldr	r3, [pc, #188]	; (8001814 <MX_GPIO_Init+0xd4>)
 8001756:	699b      	ldr	r3, [r3, #24]
 8001758:	4a2e      	ldr	r2, [pc, #184]	; (8001814 <MX_GPIO_Init+0xd4>)
 800175a:	f043 0310 	orr.w	r3, r3, #16
 800175e:	6193      	str	r3, [r2, #24]
 8001760:	4b2c      	ldr	r3, [pc, #176]	; (8001814 <MX_GPIO_Init+0xd4>)
 8001762:	699b      	ldr	r3, [r3, #24]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	60fb      	str	r3, [r7, #12]
 800176a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800176c:	4b29      	ldr	r3, [pc, #164]	; (8001814 <MX_GPIO_Init+0xd4>)
 800176e:	699b      	ldr	r3, [r3, #24]
 8001770:	4a28      	ldr	r2, [pc, #160]	; (8001814 <MX_GPIO_Init+0xd4>)
 8001772:	f043 0304 	orr.w	r3, r3, #4
 8001776:	6193      	str	r3, [r2, #24]
 8001778:	4b26      	ldr	r3, [pc, #152]	; (8001814 <MX_GPIO_Init+0xd4>)
 800177a:	699b      	ldr	r3, [r3, #24]
 800177c:	f003 0304 	and.w	r3, r3, #4
 8001780:	60bb      	str	r3, [r7, #8]
 8001782:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001784:	4b23      	ldr	r3, [pc, #140]	; (8001814 <MX_GPIO_Init+0xd4>)
 8001786:	699b      	ldr	r3, [r3, #24]
 8001788:	4a22      	ldr	r2, [pc, #136]	; (8001814 <MX_GPIO_Init+0xd4>)
 800178a:	f043 0308 	orr.w	r3, r3, #8
 800178e:	6193      	str	r3, [r2, #24]
 8001790:	4b20      	ldr	r3, [pc, #128]	; (8001814 <MX_GPIO_Init+0xd4>)
 8001792:	699b      	ldr	r3, [r3, #24]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	607b      	str	r3, [r7, #4]
 800179a:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|LED_RED_Pin
 800179c:	2200      	movs	r2, #0
 800179e:	f243 11dc 	movw	r1, #12764	; 0x31dc
 80017a2:	481d      	ldr	r0, [pc, #116]	; (8001818 <MX_GPIO_Init+0xd8>)
 80017a4:	f000 fd23 	bl	80021ee <HAL_GPIO_WritePin>
                          |LED_GREEN_Pin|LED_YELLOW_Pin|EN3_Pin|EN4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEGA1_Pin|SEGA2_Pin|SEGA3_Pin|SEGB4_Pin
 80017a8:	2200      	movs	r2, #0
 80017aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80017ae:	481b      	ldr	r0, [pc, #108]	; (800181c <MX_GPIO_Init+0xdc>)
 80017b0:	f000 fd1d 	bl	80021ee <HAL_GPIO_WritePin>
                          |SEGB5_Pin|SEGB6_Pin|SEGB7_Pin|EN1_Pin
                          |EN2_Pin|SEGA4_Pin|SEGA5_Pin|SEGA6_Pin
                          |SEGA7_Pin|SEGB1_Pin|SEGB2_Pin|SEGB3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 80017b4:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 80017b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017be:	2301      	movs	r3, #1
 80017c0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	4815      	ldr	r0, [pc, #84]	; (8001820 <MX_GPIO_Init+0xe0>)
 80017ca:	f000 fb7f 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_RED2_Pin LED_GREEN2_Pin LED_YELLOW2_Pin LED_RED_Pin
                           LED_GREEN_Pin LED_YELLOW_Pin EN3_Pin EN4_Pin */
  GPIO_InitStruct.Pin = LED_RED2_Pin|LED_GREEN2_Pin|LED_YELLOW2_Pin|LED_RED_Pin
 80017ce:	f243 13dc 	movw	r3, #12764	; 0x31dc
 80017d2:	613b      	str	r3, [r7, #16]
                          |LED_GREEN_Pin|LED_YELLOW_Pin|EN3_Pin|EN4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2302      	movs	r3, #2
 80017de:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0310 	add.w	r3, r7, #16
 80017e4:	4619      	mov	r1, r3
 80017e6:	480c      	ldr	r0, [pc, #48]	; (8001818 <MX_GPIO_Init+0xd8>)
 80017e8:	f000 fb70 	bl	8001ecc <HAL_GPIO_Init>

  /*Configure GPIO pins : SEGA1_Pin SEGA2_Pin SEGA3_Pin SEGB4_Pin
                           SEGB5_Pin SEGB6_Pin SEGB7_Pin EN1_Pin
                           EN2_Pin SEGA4_Pin SEGA5_Pin SEGA6_Pin
                           SEGA7_Pin SEGB1_Pin SEGB2_Pin SEGB3_Pin */
  GPIO_InitStruct.Pin = SEGA1_Pin|SEGA2_Pin|SEGA3_Pin|SEGB4_Pin
 80017ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017f0:	613b      	str	r3, [r7, #16]
                          |SEGB5_Pin|SEGB6_Pin|SEGB7_Pin|EN1_Pin
                          |EN2_Pin|SEGA4_Pin|SEGA5_Pin|SEGA6_Pin
                          |SEGA7_Pin|SEGB1_Pin|SEGB2_Pin|SEGB3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2302      	movs	r3, #2
 80017fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017fe:	f107 0310 	add.w	r3, r7, #16
 8001802:	4619      	mov	r1, r3
 8001804:	4805      	ldr	r0, [pc, #20]	; (800181c <MX_GPIO_Init+0xdc>)
 8001806:	f000 fb61 	bl	8001ecc <HAL_GPIO_Init>

}
 800180a:	bf00      	nop
 800180c:	3720      	adds	r7, #32
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40021000 	.word	0x40021000
 8001818:	40010800 	.word	0x40010800
 800181c:	40010c00 	.word	0x40010c00
 8001820:	40011000 	.word	0x40011000

08001824 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
 {
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
	timerRun();
 800182c:	f000 f8ac 	bl	8001988 <timerRun>
	getKeyInput1();
 8001830:	f7fe fce6 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 8001834:	f7fe fd8c 	bl	8000350 <getKeyInput2>
	getKeyInput3();
 8001838:	f7fe fd36 	bl	80002a8 <getKeyInput3>
 }
 800183c:	bf00      	nop
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <setTimer1>:
int timer3_flag =0;
int timer4_flag =0;
int timer5_flag =0;
int timer6_flag =0;

void setTimer1(int duration){
 8001850:	b480      	push	{r7}
 8001852:	b083      	sub	sp, #12
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	timer1_counter = duration/Timer_cycle;
 8001858:	4b07      	ldr	r3, [pc, #28]	; (8001878 <setTimer1+0x28>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001862:	4a06      	ldr	r2, [pc, #24]	; (800187c <setTimer1+0x2c>)
 8001864:	6013      	str	r3, [r2, #0]
	timer1_flag =0;
 8001866:	4b06      	ldr	r3, [pc, #24]	; (8001880 <setTimer1+0x30>)
 8001868:	2200      	movs	r2, #0
 800186a:	601a      	str	r2, [r3, #0]
}
 800186c:	bf00      	nop
 800186e:	370c      	adds	r7, #12
 8001870:	46bd      	mov	sp, r7
 8001872:	bc80      	pop	{r7}
 8001874:	4770      	bx	lr
 8001876:	bf00      	nop
 8001878:	20000060 	.word	0x20000060
 800187c:	200000d0 	.word	0x200000d0
 8001880:	200000d4 	.word	0x200000d4

08001884 <setTimer2>:
void setTimer2(int duration){
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
	timer2_counter = duration/Timer_cycle;
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <setTimer2+0x28>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	687a      	ldr	r2, [r7, #4]
 8001892:	fb92 f3f3 	sdiv	r3, r2, r3
 8001896:	4a06      	ldr	r2, [pc, #24]	; (80018b0 <setTimer2+0x2c>)
 8001898:	6013      	str	r3, [r2, #0]
	timer2_flag =0;
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <setTimer2+0x30>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bc80      	pop	{r7}
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	20000060 	.word	0x20000060
 80018b0:	200000cc 	.word	0x200000cc
 80018b4:	200000d8 	.word	0x200000d8

080018b8 <setTimer3>:
void setTimer3(int duration){
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
	timer3_counter = duration/Timer_cycle;
 80018c0:	4b07      	ldr	r3, [pc, #28]	; (80018e0 <setTimer3+0x28>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	fb92 f3f3 	sdiv	r3, r2, r3
 80018ca:	4a06      	ldr	r2, [pc, #24]	; (80018e4 <setTimer3+0x2c>)
 80018cc:	6013      	str	r3, [r2, #0]
	timer3_flag =0;
 80018ce:	4b06      	ldr	r3, [pc, #24]	; (80018e8 <setTimer3+0x30>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	601a      	str	r2, [r3, #0]
}
 80018d4:	bf00      	nop
 80018d6:	370c      	adds	r7, #12
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc80      	pop	{r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	20000060 	.word	0x20000060
 80018e4:	200000c8 	.word	0x200000c8
 80018e8:	200000dc 	.word	0x200000dc

080018ec <setTimer4>:
void setTimer4(int duration){
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
	timer4_counter = duration/Timer_cycle;
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <setTimer4+0x28>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	687a      	ldr	r2, [r7, #4]
 80018fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fe:	4a06      	ldr	r2, [pc, #24]	; (8001918 <setTimer4+0x2c>)
 8001900:	6013      	str	r3, [r2, #0]
	timer4_flag =0;
 8001902:	4b06      	ldr	r3, [pc, #24]	; (800191c <setTimer4+0x30>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
}
 8001908:	bf00      	nop
 800190a:	370c      	adds	r7, #12
 800190c:	46bd      	mov	sp, r7
 800190e:	bc80      	pop	{r7}
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	20000060 	.word	0x20000060
 8001918:	200000c4 	.word	0x200000c4
 800191c:	200000e0 	.word	0x200000e0

08001920 <setTimer5>:
void setTimer5(int duration){
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
	timer5_counter = duration/Timer_cycle;
 8001928:	4b07      	ldr	r3, [pc, #28]	; (8001948 <setTimer5+0x28>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	687a      	ldr	r2, [r7, #4]
 800192e:	fb92 f3f3 	sdiv	r3, r2, r3
 8001932:	4a06      	ldr	r2, [pc, #24]	; (800194c <setTimer5+0x2c>)
 8001934:	6013      	str	r3, [r2, #0]
	timer5_flag =0;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <setTimer5+0x30>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	bc80      	pop	{r7}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20000060 	.word	0x20000060
 800194c:	200000c0 	.word	0x200000c0
 8001950:	200000e4 	.word	0x200000e4

08001954 <setTimer6>:
void setTimer6(int duration){
 8001954:	b480      	push	{r7}
 8001956:	b083      	sub	sp, #12
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
	timer6_counter = duration/Timer_cycle;
 800195c:	4b07      	ldr	r3, [pc, #28]	; (800197c <setTimer6+0x28>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	fb92 f3f3 	sdiv	r3, r2, r3
 8001966:	4a06      	ldr	r2, [pc, #24]	; (8001980 <setTimer6+0x2c>)
 8001968:	6013      	str	r3, [r2, #0]
	timer6_flag =0;
 800196a:	4b06      	ldr	r3, [pc, #24]	; (8001984 <setTimer6+0x30>)
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	bf00      	nop
 8001972:	370c      	adds	r7, #12
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	20000060 	.word	0x20000060
 8001980:	200000bc 	.word	0x200000bc
 8001984:	200000e8 	.word	0x200000e8

08001988 <timerRun>:
void timerRun(){
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
	if(timer1_counter > 0){
 800198c:	4b31      	ldr	r3, [pc, #196]	; (8001a54 <timerRun+0xcc>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2b00      	cmp	r3, #0
 8001992:	dd0b      	ble.n	80019ac <timerRun+0x24>
		timer1_counter--;
 8001994:	4b2f      	ldr	r3, [pc, #188]	; (8001a54 <timerRun+0xcc>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	3b01      	subs	r3, #1
 800199a:	4a2e      	ldr	r2, [pc, #184]	; (8001a54 <timerRun+0xcc>)
 800199c:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0)
 800199e:	4b2d      	ldr	r3, [pc, #180]	; (8001a54 <timerRun+0xcc>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dc02      	bgt.n	80019ac <timerRun+0x24>
		{
			timer1_flag =1;
 80019a6:	4b2c      	ldr	r3, [pc, #176]	; (8001a58 <timerRun+0xd0>)
 80019a8:	2201      	movs	r2, #1
 80019aa:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter > 0){
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <timerRun+0xd4>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	dd0b      	ble.n	80019cc <timerRun+0x44>
			timer2_counter--;
 80019b4:	4b29      	ldr	r3, [pc, #164]	; (8001a5c <timerRun+0xd4>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	3b01      	subs	r3, #1
 80019ba:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <timerRun+0xd4>)
 80019bc:	6013      	str	r3, [r2, #0]
			if(timer2_counter<=0)
 80019be:	4b27      	ldr	r3, [pc, #156]	; (8001a5c <timerRun+0xd4>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	dc02      	bgt.n	80019cc <timerRun+0x44>
			{
				timer2_flag =1;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <timerRun+0xd8>)
 80019c8:	2201      	movs	r2, #1
 80019ca:	601a      	str	r2, [r3, #0]
			}
		}
	if(timer3_counter > 0){
 80019cc:	4b25      	ldr	r3, [pc, #148]	; (8001a64 <timerRun+0xdc>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	dd0b      	ble.n	80019ec <timerRun+0x64>
		timer3_counter--;
 80019d4:	4b23      	ldr	r3, [pc, #140]	; (8001a64 <timerRun+0xdc>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	3b01      	subs	r3, #1
 80019da:	4a22      	ldr	r2, [pc, #136]	; (8001a64 <timerRun+0xdc>)
 80019dc:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0)
 80019de:	4b21      	ldr	r3, [pc, #132]	; (8001a64 <timerRun+0xdc>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	dc02      	bgt.n	80019ec <timerRun+0x64>
		{
			timer3_flag =1;
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <timerRun+0xe0>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer4_counter > 0){
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <timerRun+0xe4>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	dd0b      	ble.n	8001a0c <timerRun+0x84>
		timer4_counter--;
 80019f4:	4b1d      	ldr	r3, [pc, #116]	; (8001a6c <timerRun+0xe4>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	3b01      	subs	r3, #1
 80019fa:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <timerRun+0xe4>)
 80019fc:	6013      	str	r3, [r2, #0]
		if(timer4_counter<=0)
 80019fe:	4b1b      	ldr	r3, [pc, #108]	; (8001a6c <timerRun+0xe4>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	dc02      	bgt.n	8001a0c <timerRun+0x84>
		{
			timer4_flag =1;
 8001a06:	4b1a      	ldr	r3, [pc, #104]	; (8001a70 <timerRun+0xe8>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer5_counter > 0){
 8001a0c:	4b19      	ldr	r3, [pc, #100]	; (8001a74 <timerRun+0xec>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	dd0b      	ble.n	8001a2c <timerRun+0xa4>
		timer5_counter--;
 8001a14:	4b17      	ldr	r3, [pc, #92]	; (8001a74 <timerRun+0xec>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	3b01      	subs	r3, #1
 8001a1a:	4a16      	ldr	r2, [pc, #88]	; (8001a74 <timerRun+0xec>)
 8001a1c:	6013      	str	r3, [r2, #0]
		if(timer5_counter<=0)
 8001a1e:	4b15      	ldr	r3, [pc, #84]	; (8001a74 <timerRun+0xec>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	dc02      	bgt.n	8001a2c <timerRun+0xa4>
		{
			timer5_flag =1;
 8001a26:	4b14      	ldr	r3, [pc, #80]	; (8001a78 <timerRun+0xf0>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer6_counter > 0){
 8001a2c:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <timerRun+0xf4>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	dd0b      	ble.n	8001a4c <timerRun+0xc4>
		timer6_counter--;
 8001a34:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <timerRun+0xf4>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <timerRun+0xf4>)
 8001a3c:	6013      	str	r3, [r2, #0]
		if(timer6_counter<=0)
 8001a3e:	4b0f      	ldr	r3, [pc, #60]	; (8001a7c <timerRun+0xf4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	dc02      	bgt.n	8001a4c <timerRun+0xc4>
		{
			timer6_flag =1;
 8001a46:	4b0e      	ldr	r3, [pc, #56]	; (8001a80 <timerRun+0xf8>)
 8001a48:	2201      	movs	r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001a4c:	bf00      	nop
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr
 8001a54:	200000d0 	.word	0x200000d0
 8001a58:	200000d4 	.word	0x200000d4
 8001a5c:	200000cc 	.word	0x200000cc
 8001a60:	200000d8 	.word	0x200000d8
 8001a64:	200000c8 	.word	0x200000c8
 8001a68:	200000dc 	.word	0x200000dc
 8001a6c:	200000c4 	.word	0x200000c4
 8001a70:	200000e0 	.word	0x200000e0
 8001a74:	200000c0 	.word	0x200000c0
 8001a78:	200000e4 	.word	0x200000e4
 8001a7c:	200000bc 	.word	0x200000bc
 8001a80:	200000e8 	.word	0x200000e8

08001a84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a8a:	4b15      	ldr	r3, [pc, #84]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001a8c:	699b      	ldr	r3, [r3, #24]
 8001a8e:	4a14      	ldr	r2, [pc, #80]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	6193      	str	r3, [r2, #24]
 8001a96:	4b12      	ldr	r3, [pc, #72]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001a98:	699b      	ldr	r3, [r3, #24]
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	60bb      	str	r3, [r7, #8]
 8001aa0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001aa2:	4b0f      	ldr	r3, [pc, #60]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	4a0e      	ldr	r2, [pc, #56]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001aa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001aac:	61d3      	str	r3, [r2, #28]
 8001aae:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <HAL_MspInit+0x5c>)
 8001ab0:	69db      	ldr	r3, [r3, #28]
 8001ab2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ab6:	607b      	str	r3, [r7, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001aba:	4b0a      	ldr	r3, [pc, #40]	; (8001ae4 <HAL_MspInit+0x60>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	60fb      	str	r3, [r7, #12]
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4a04      	ldr	r2, [pc, #16]	; (8001ae4 <HAL_MspInit+0x60>)
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bc80      	pop	{r7}
 8001ade:	4770      	bx	lr
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	40010000 	.word	0x40010000

08001ae8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b084      	sub	sp, #16
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001af8:	d113      	bne.n	8001b22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001afa:	4b0c      	ldr	r3, [pc, #48]	; (8001b2c <HAL_TIM_Base_MspInit+0x44>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	4a0b      	ldr	r2, [pc, #44]	; (8001b2c <HAL_TIM_Base_MspInit+0x44>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	61d3      	str	r3, [r2, #28]
 8001b06:	4b09      	ldr	r3, [pc, #36]	; (8001b2c <HAL_TIM_Base_MspInit+0x44>)
 8001b08:	69db      	ldr	r3, [r3, #28]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b12:	2200      	movs	r2, #0
 8001b14:	2100      	movs	r1, #0
 8001b16:	201c      	movs	r0, #28
 8001b18:	f000 f9a1 	bl	8001e5e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b1c:	201c      	movs	r0, #28
 8001b1e:	f000 f9ba 	bl	8001e96 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001b22:	bf00      	nop
 8001b24:	3710      	adds	r7, #16
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40021000 	.word	0x40021000

08001b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b34:	e7fe      	b.n	8001b34 <NMI_Handler+0x4>

08001b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b36:	b480      	push	{r7}
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <HardFault_Handler+0x4>

08001b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <MemManage_Handler+0x4>

08001b42 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <BusFault_Handler+0x4>

08001b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <UsageFault_Handler+0x4>

08001b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b52:	bf00      	nop
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bc80      	pop	{r7}
 8001b58:	4770      	bx	lr

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bc80      	pop	{r7}
 8001b64:	4770      	bx	lr

08001b66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b66:	b480      	push	{r7}
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	bc80      	pop	{r7}
 8001b70:	4770      	bx	lr

08001b72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b76:	f000 f87f 	bl	8001c78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b7a:	bf00      	nop
 8001b7c:	bd80      	pop	{r7, pc}
	...

08001b80 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <TIM2_IRQHandler+0x10>)
 8001b86:	f000 ffe7 	bl	8002b58 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200000ec 	.word	0x200000ec

08001b94 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bc80      	pop	{r7}
 8001b9e:	4770      	bx	lr

08001ba0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001ba0:	480c      	ldr	r0, [pc, #48]	; (8001bd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ba2:	490d      	ldr	r1, [pc, #52]	; (8001bd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001ba4:	4a0d      	ldr	r2, [pc, #52]	; (8001bdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ba6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba8:	e002      	b.n	8001bb0 <LoopCopyDataInit>

08001baa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001baa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bae:	3304      	adds	r3, #4

08001bb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bb4:	d3f9      	bcc.n	8001baa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bb6:	4a0a      	ldr	r2, [pc, #40]	; (8001be0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bb8:	4c0a      	ldr	r4, [pc, #40]	; (8001be4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bbc:	e001      	b.n	8001bc2 <LoopFillZerobss>

08001bbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bc0:	3204      	adds	r2, #4

08001bc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bc4:	d3fb      	bcc.n	8001bbe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001bc6:	f7ff ffe5 	bl	8001b94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001bca:	f001 fb0d 	bl	80031e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bce:	f7ff fd0f 	bl	80015f0 <main>
  bx lr
 8001bd2:	4770      	bx	lr
  ldr r0, =_sdata
 8001bd4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bd8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001bdc:	08003280 	.word	0x08003280
  ldr r2, =_sbss
 8001be0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001be4:	20000138 	.word	0x20000138

08001be8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001be8:	e7fe      	b.n	8001be8 <ADC1_2_IRQHandler>
	...

08001bec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bf0:	4b08      	ldr	r3, [pc, #32]	; (8001c14 <HAL_Init+0x28>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a07      	ldr	r2, [pc, #28]	; (8001c14 <HAL_Init+0x28>)
 8001bf6:	f043 0310 	orr.w	r3, r3, #16
 8001bfa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bfc:	2003      	movs	r0, #3
 8001bfe:	f000 f923 	bl	8001e48 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c02:	200f      	movs	r0, #15
 8001c04:	f000 f808 	bl	8001c18 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c08:	f7ff ff3c 	bl	8001a84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c0c:	2300      	movs	r3, #0
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	bd80      	pop	{r7, pc}
 8001c12:	bf00      	nop
 8001c14:	40022000 	.word	0x40022000

08001c18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_InitTick+0x54>)
 8001c22:	681a      	ldr	r2, [r3, #0]
 8001c24:	4b12      	ldr	r3, [pc, #72]	; (8001c70 <HAL_InitTick+0x58>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c2e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c32:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c36:	4618      	mov	r0, r3
 8001c38:	f000 f93b 	bl	8001eb2 <HAL_SYSTICK_Config>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d001      	beq.n	8001c46 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e00e      	b.n	8001c64 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2b0f      	cmp	r3, #15
 8001c4a:	d80a      	bhi.n	8001c62 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	6879      	ldr	r1, [r7, #4]
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f000 f903 	bl	8001e5e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c58:	4a06      	ldr	r2, [pc, #24]	; (8001c74 <HAL_InitTick+0x5c>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	e000      	b.n	8001c64 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3708      	adds	r7, #8
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	20000064 	.word	0x20000064
 8001c70:	2000006c 	.word	0x2000006c
 8001c74:	20000068 	.word	0x20000068

08001c78 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <HAL_IncTick+0x1c>)
 8001c7e:	781b      	ldrb	r3, [r3, #0]
 8001c80:	461a      	mov	r2, r3
 8001c82:	4b05      	ldr	r3, [pc, #20]	; (8001c98 <HAL_IncTick+0x20>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4413      	add	r3, r2
 8001c88:	4a03      	ldr	r2, [pc, #12]	; (8001c98 <HAL_IncTick+0x20>)
 8001c8a:	6013      	str	r3, [r2, #0]
}
 8001c8c:	bf00      	nop
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bc80      	pop	{r7}
 8001c92:	4770      	bx	lr
 8001c94:	2000006c 	.word	0x2000006c
 8001c98:	20000134 	.word	0x20000134

08001c9c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8001ca0:	4b02      	ldr	r3, [pc, #8]	; (8001cac <HAL_GetTick+0x10>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
}
 8001ca4:	4618      	mov	r0, r3
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bc80      	pop	{r7}
 8001caa:	4770      	bx	lr
 8001cac:	20000134 	.word	0x20000134

08001cb0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b085      	sub	sp, #20
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cc0:	4b0c      	ldr	r3, [pc, #48]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001cc6:	68ba      	ldr	r2, [r7, #8]
 8001cc8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ccc:	4013      	ands	r3, r2
 8001cce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001cd8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001cdc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ce2:	4a04      	ldr	r2, [pc, #16]	; (8001cf4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	60d3      	str	r3, [r2, #12]
}
 8001ce8:	bf00      	nop
 8001cea:	3714      	adds	r7, #20
 8001cec:	46bd      	mov	sp, r7
 8001cee:	bc80      	pop	{r7}
 8001cf0:	4770      	bx	lr
 8001cf2:	bf00      	nop
 8001cf4:	e000ed00 	.word	0xe000ed00

08001cf8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <__NVIC_GetPriorityGrouping+0x18>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	0a1b      	lsrs	r3, r3, #8
 8001d02:	f003 0307 	and.w	r3, r3, #7
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bc80      	pop	{r7}
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000ed00 	.word	0xe000ed00

08001d14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	db0b      	blt.n	8001d3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	f003 021f 	and.w	r2, r3, #31
 8001d2c:	4906      	ldr	r1, [pc, #24]	; (8001d48 <__NVIC_EnableIRQ+0x34>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	095b      	lsrs	r3, r3, #5
 8001d34:	2001      	movs	r0, #1
 8001d36:	fa00 f202 	lsl.w	r2, r0, r2
 8001d3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100

08001d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	6039      	str	r1, [r7, #0]
 8001d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db0a      	blt.n	8001d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	b2da      	uxtb	r2, r3
 8001d64:	490c      	ldr	r1, [pc, #48]	; (8001d98 <__NVIC_SetPriority+0x4c>)
 8001d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6a:	0112      	lsls	r2, r2, #4
 8001d6c:	b2d2      	uxtb	r2, r2
 8001d6e:	440b      	add	r3, r1
 8001d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d74:	e00a      	b.n	8001d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	b2da      	uxtb	r2, r3
 8001d7a:	4908      	ldr	r1, [pc, #32]	; (8001d9c <__NVIC_SetPriority+0x50>)
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	3b04      	subs	r3, #4
 8001d84:	0112      	lsls	r2, r2, #4
 8001d86:	b2d2      	uxtb	r2, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	761a      	strb	r2, [r3, #24]
}
 8001d8c:	bf00      	nop
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bc80      	pop	{r7}
 8001d94:	4770      	bx	lr
 8001d96:	bf00      	nop
 8001d98:	e000e100 	.word	0xe000e100
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b089      	sub	sp, #36	; 0x24
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60f8      	str	r0, [r7, #12]
 8001da8:	60b9      	str	r1, [r7, #8]
 8001daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0307 	and.w	r3, r3, #7
 8001db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f1c3 0307 	rsb	r3, r3, #7
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	bf28      	it	cs
 8001dbe:	2304      	movcs	r3, #4
 8001dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001dc2:	69fb      	ldr	r3, [r7, #28]
 8001dc4:	3304      	adds	r3, #4
 8001dc6:	2b06      	cmp	r3, #6
 8001dc8:	d902      	bls.n	8001dd0 <NVIC_EncodePriority+0x30>
 8001dca:	69fb      	ldr	r3, [r7, #28]
 8001dcc:	3b03      	subs	r3, #3
 8001dce:	e000      	b.n	8001dd2 <NVIC_EncodePriority+0x32>
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8001dd8:	69bb      	ldr	r3, [r7, #24]
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43da      	mvns	r2, r3
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	401a      	ands	r2, r3
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001de8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dec:	697b      	ldr	r3, [r7, #20]
 8001dee:	fa01 f303 	lsl.w	r3, r1, r3
 8001df2:	43d9      	mvns	r1, r3
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001df8:	4313      	orrs	r3, r2
         );
}
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bc80      	pop	{r7}
 8001e02:	4770      	bx	lr

08001e04 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e14:	d301      	bcc.n	8001e1a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e16:	2301      	movs	r3, #1
 8001e18:	e00f      	b.n	8001e3a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e1a:	4a0a      	ldr	r2, [pc, #40]	; (8001e44 <SysTick_Config+0x40>)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e22:	210f      	movs	r1, #15
 8001e24:	f04f 30ff 	mov.w	r0, #4294967295
 8001e28:	f7ff ff90 	bl	8001d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e2c:	4b05      	ldr	r3, [pc, #20]	; (8001e44 <SysTick_Config+0x40>)
 8001e2e:	2200      	movs	r2, #0
 8001e30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e32:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <SysTick_Config+0x40>)
 8001e34:	2207      	movs	r2, #7
 8001e36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e38:	2300      	movs	r3, #0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	e000e010 	.word	0xe000e010

08001e48 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff ff2d 	bl	8001cb0 <__NVIC_SetPriorityGrouping>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}

08001e5e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e5e:	b580      	push	{r7, lr}
 8001e60:	b086      	sub	sp, #24
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	4603      	mov	r3, r0
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e70:	f7ff ff42 	bl	8001cf8 <__NVIC_GetPriorityGrouping>
 8001e74:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	68b9      	ldr	r1, [r7, #8]
 8001e7a:	6978      	ldr	r0, [r7, #20]
 8001e7c:	f7ff ff90 	bl	8001da0 <NVIC_EncodePriority>
 8001e80:	4602      	mov	r2, r0
 8001e82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e86:	4611      	mov	r1, r2
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff ff5f 	bl	8001d4c <__NVIC_SetPriority>
}
 8001e8e:	bf00      	nop
 8001e90:	3718      	adds	r7, #24
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b082      	sub	sp, #8
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	f7ff ff35 	bl	8001d14 <__NVIC_EnableIRQ>
}
 8001eaa:	bf00      	nop
 8001eac:	3708      	adds	r7, #8
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001eb2:	b580      	push	{r7, lr}
 8001eb4:	b082      	sub	sp, #8
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff ffa2 	bl	8001e04 <SysTick_Config>
 8001ec0:	4603      	mov	r3, r0
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b08b      	sub	sp, #44	; 0x2c
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001eda:	2300      	movs	r3, #0
 8001edc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ede:	e148      	b.n	8002172 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	69fa      	ldr	r2, [r7, #28]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	f040 8137 	bne.w	800216c <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	4aa3      	ldr	r2, [pc, #652]	; (8002190 <HAL_GPIO_Init+0x2c4>)
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d05e      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f08:	4aa1      	ldr	r2, [pc, #644]	; (8002190 <HAL_GPIO_Init+0x2c4>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d875      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f0e:	4aa1      	ldr	r2, [pc, #644]	; (8002194 <HAL_GPIO_Init+0x2c8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d058      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f14:	4a9f      	ldr	r2, [pc, #636]	; (8002194 <HAL_GPIO_Init+0x2c8>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d86f      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f1a:	4a9f      	ldr	r2, [pc, #636]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d052      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f20:	4a9d      	ldr	r2, [pc, #628]	; (8002198 <HAL_GPIO_Init+0x2cc>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d869      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f26:	4a9d      	ldr	r2, [pc, #628]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d04c      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f2c:	4a9b      	ldr	r2, [pc, #620]	; (800219c <HAL_GPIO_Init+0x2d0>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d863      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f32:	4a9b      	ldr	r2, [pc, #620]	; (80021a0 <HAL_GPIO_Init+0x2d4>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d046      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
 8001f38:	4a99      	ldr	r2, [pc, #612]	; (80021a0 <HAL_GPIO_Init+0x2d4>)
 8001f3a:	4293      	cmp	r3, r2
 8001f3c:	d85d      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f3e:	2b12      	cmp	r3, #18
 8001f40:	d82a      	bhi.n	8001f98 <HAL_GPIO_Init+0xcc>
 8001f42:	2b12      	cmp	r3, #18
 8001f44:	d859      	bhi.n	8001ffa <HAL_GPIO_Init+0x12e>
 8001f46:	a201      	add	r2, pc, #4	; (adr r2, 8001f4c <HAL_GPIO_Init+0x80>)
 8001f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f4c:	08001fc7 	.word	0x08001fc7
 8001f50:	08001fa1 	.word	0x08001fa1
 8001f54:	08001fb3 	.word	0x08001fb3
 8001f58:	08001ff5 	.word	0x08001ff5
 8001f5c:	08001ffb 	.word	0x08001ffb
 8001f60:	08001ffb 	.word	0x08001ffb
 8001f64:	08001ffb 	.word	0x08001ffb
 8001f68:	08001ffb 	.word	0x08001ffb
 8001f6c:	08001ffb 	.word	0x08001ffb
 8001f70:	08001ffb 	.word	0x08001ffb
 8001f74:	08001ffb 	.word	0x08001ffb
 8001f78:	08001ffb 	.word	0x08001ffb
 8001f7c:	08001ffb 	.word	0x08001ffb
 8001f80:	08001ffb 	.word	0x08001ffb
 8001f84:	08001ffb 	.word	0x08001ffb
 8001f88:	08001ffb 	.word	0x08001ffb
 8001f8c:	08001ffb 	.word	0x08001ffb
 8001f90:	08001fa9 	.word	0x08001fa9
 8001f94:	08001fbd 	.word	0x08001fbd
 8001f98:	4a82      	ldr	r2, [pc, #520]	; (80021a4 <HAL_GPIO_Init+0x2d8>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d013      	beq.n	8001fc6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001f9e:	e02c      	b.n	8001ffa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	623b      	str	r3, [r7, #32]
          break;
 8001fa6:	e029      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	3304      	adds	r3, #4
 8001fae:	623b      	str	r3, [r7, #32]
          break;
 8001fb0:	e024      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	3308      	adds	r3, #8
 8001fb8:	623b      	str	r3, [r7, #32]
          break;
 8001fba:	e01f      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	68db      	ldr	r3, [r3, #12]
 8001fc0:	330c      	adds	r3, #12
 8001fc2:	623b      	str	r3, [r7, #32]
          break;
 8001fc4:	e01a      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d102      	bne.n	8001fd4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001fce:	2304      	movs	r3, #4
 8001fd0:	623b      	str	r3, [r7, #32]
          break;
 8001fd2:	e013      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	689b      	ldr	r3, [r3, #8]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d105      	bne.n	8001fe8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fdc:	2308      	movs	r3, #8
 8001fde:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	69fa      	ldr	r2, [r7, #28]
 8001fe4:	611a      	str	r2, [r3, #16]
          break;
 8001fe6:	e009      	b.n	8001ffc <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001fe8:	2308      	movs	r3, #8
 8001fea:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	69fa      	ldr	r2, [r7, #28]
 8001ff0:	615a      	str	r2, [r3, #20]
          break;
 8001ff2:	e003      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	623b      	str	r3, [r7, #32]
          break;
 8001ff8:	e000      	b.n	8001ffc <HAL_GPIO_Init+0x130>
          break;
 8001ffa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ffc:	69bb      	ldr	r3, [r7, #24]
 8001ffe:	2bff      	cmp	r3, #255	; 0xff
 8002000:	d801      	bhi.n	8002006 <HAL_GPIO_Init+0x13a>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	e001      	b.n	800200a <HAL_GPIO_Init+0x13e>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3304      	adds	r3, #4
 800200a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2bff      	cmp	r3, #255	; 0xff
 8002010:	d802      	bhi.n	8002018 <HAL_GPIO_Init+0x14c>
 8002012:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	e002      	b.n	800201e <HAL_GPIO_Init+0x152>
 8002018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800201a:	3b08      	subs	r3, #8
 800201c:	009b      	lsls	r3, r3, #2
 800201e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002020:	697b      	ldr	r3, [r7, #20]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	210f      	movs	r1, #15
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	fa01 f303 	lsl.w	r3, r1, r3
 800202c:	43db      	mvns	r3, r3
 800202e:	401a      	ands	r2, r3
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	fa01 f303 	lsl.w	r3, r1, r3
 8002038:	431a      	orrs	r2, r3
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8090 	beq.w	800216c <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800204c:	4b56      	ldr	r3, [pc, #344]	; (80021a8 <HAL_GPIO_Init+0x2dc>)
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	4a55      	ldr	r2, [pc, #340]	; (80021a8 <HAL_GPIO_Init+0x2dc>)
 8002052:	f043 0301 	orr.w	r3, r3, #1
 8002056:	6193      	str	r3, [r2, #24]
 8002058:	4b53      	ldr	r3, [pc, #332]	; (80021a8 <HAL_GPIO_Init+0x2dc>)
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	f003 0301 	and.w	r3, r3, #1
 8002060:	60bb      	str	r3, [r7, #8]
 8002062:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002064:	4a51      	ldr	r2, [pc, #324]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 8002066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002068:	089b      	lsrs	r3, r3, #2
 800206a:	3302      	adds	r3, #2
 800206c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002070:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	f003 0303 	and.w	r3, r3, #3
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	4013      	ands	r3, r2
 8002086:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	4a49      	ldr	r2, [pc, #292]	; (80021b0 <HAL_GPIO_Init+0x2e4>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d00d      	beq.n	80020ac <HAL_GPIO_Init+0x1e0>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	4a48      	ldr	r2, [pc, #288]	; (80021b4 <HAL_GPIO_Init+0x2e8>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d007      	beq.n	80020a8 <HAL_GPIO_Init+0x1dc>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	4a47      	ldr	r2, [pc, #284]	; (80021b8 <HAL_GPIO_Init+0x2ec>)
 800209c:	4293      	cmp	r3, r2
 800209e:	d101      	bne.n	80020a4 <HAL_GPIO_Init+0x1d8>
 80020a0:	2302      	movs	r3, #2
 80020a2:	e004      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020a4:	2303      	movs	r3, #3
 80020a6:	e002      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020a8:	2301      	movs	r3, #1
 80020aa:	e000      	b.n	80020ae <HAL_GPIO_Init+0x1e2>
 80020ac:	2300      	movs	r3, #0
 80020ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020b0:	f002 0203 	and.w	r2, r2, #3
 80020b4:	0092      	lsls	r2, r2, #2
 80020b6:	4093      	lsls	r3, r2
 80020b8:	68fa      	ldr	r2, [r7, #12]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80020be:	493b      	ldr	r1, [pc, #236]	; (80021ac <HAL_GPIO_Init+0x2e0>)
 80020c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c2:	089b      	lsrs	r3, r3, #2
 80020c4:	3302      	adds	r3, #2
 80020c6:	68fa      	ldr	r2, [r7, #12]
 80020c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d006      	beq.n	80020e6 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80020d8:	4b38      	ldr	r3, [pc, #224]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	4937      	ldr	r1, [pc, #220]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 80020de:	69bb      	ldr	r3, [r7, #24]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	600b      	str	r3, [r1, #0]
 80020e4:	e006      	b.n	80020f4 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020e6:	4b35      	ldr	r3, [pc, #212]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 80020e8:	681a      	ldr	r2, [r3, #0]
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	43db      	mvns	r3, r3
 80020ee:	4933      	ldr	r1, [pc, #204]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 80020f0:	4013      	ands	r3, r2
 80020f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d006      	beq.n	800210e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002100:	4b2e      	ldr	r3, [pc, #184]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002102:	685a      	ldr	r2, [r3, #4]
 8002104:	492d      	ldr	r1, [pc, #180]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	4313      	orrs	r3, r2
 800210a:	604b      	str	r3, [r1, #4]
 800210c:	e006      	b.n	800211c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800210e:	4b2b      	ldr	r3, [pc, #172]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	43db      	mvns	r3, r3
 8002116:	4929      	ldr	r1, [pc, #164]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002118:	4013      	ands	r3, r2
 800211a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d006      	beq.n	8002136 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002128:	4b24      	ldr	r3, [pc, #144]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4923      	ldr	r1, [pc, #140]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	4313      	orrs	r3, r2
 8002132:	608b      	str	r3, [r1, #8]
 8002134:	e006      	b.n	8002144 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002136:	4b21      	ldr	r3, [pc, #132]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002138:	689a      	ldr	r2, [r3, #8]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	43db      	mvns	r3, r3
 800213e:	491f      	ldr	r1, [pc, #124]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002140:	4013      	ands	r3, r2
 8002142:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800214c:	2b00      	cmp	r3, #0
 800214e:	d006      	beq.n	800215e <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002150:	4b1a      	ldr	r3, [pc, #104]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002152:	68da      	ldr	r2, [r3, #12]
 8002154:	4919      	ldr	r1, [pc, #100]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002156:	69bb      	ldr	r3, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	60cb      	str	r3, [r1, #12]
 800215c:	e006      	b.n	800216c <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800215e:	4b17      	ldr	r3, [pc, #92]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002160:	68da      	ldr	r2, [r3, #12]
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	43db      	mvns	r3, r3
 8002166:	4915      	ldr	r1, [pc, #84]	; (80021bc <HAL_GPIO_Init+0x2f0>)
 8002168:	4013      	ands	r3, r2
 800216a:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	3301      	adds	r3, #1
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002178:	fa22 f303 	lsr.w	r3, r2, r3
 800217c:	2b00      	cmp	r3, #0
 800217e:	f47f aeaf 	bne.w	8001ee0 <HAL_GPIO_Init+0x14>
  }
}
 8002182:	bf00      	nop
 8002184:	bf00      	nop
 8002186:	372c      	adds	r7, #44	; 0x2c
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	10320000 	.word	0x10320000
 8002194:	10310000 	.word	0x10310000
 8002198:	10220000 	.word	0x10220000
 800219c:	10210000 	.word	0x10210000
 80021a0:	10120000 	.word	0x10120000
 80021a4:	10110000 	.word	0x10110000
 80021a8:	40021000 	.word	0x40021000
 80021ac:	40010000 	.word	0x40010000
 80021b0:	40010800 	.word	0x40010800
 80021b4:	40010c00 	.word	0x40010c00
 80021b8:	40011000 	.word	0x40011000
 80021bc:	40010400 	.word	0x40010400

080021c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b085      	sub	sp, #20
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	460b      	mov	r3, r1
 80021ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689a      	ldr	r2, [r3, #8]
 80021d0:	887b      	ldrh	r3, [r7, #2]
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80021d8:	2301      	movs	r3, #1
 80021da:	73fb      	strb	r3, [r7, #15]
 80021dc:	e001      	b.n	80021e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80021de:	2300      	movs	r3, #0
 80021e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80021e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e4:	4618      	mov	r0, r3
 80021e6:	3714      	adds	r7, #20
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bc80      	pop	{r7}
 80021ec:	4770      	bx	lr

080021ee <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80021ee:	b480      	push	{r7}
 80021f0:	b083      	sub	sp, #12
 80021f2:	af00      	add	r7, sp, #0
 80021f4:	6078      	str	r0, [r7, #4]
 80021f6:	460b      	mov	r3, r1
 80021f8:	807b      	strh	r3, [r7, #2]
 80021fa:	4613      	mov	r3, r2
 80021fc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80021fe:	787b      	ldrb	r3, [r7, #1]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d003      	beq.n	800220c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002204:	887a      	ldrh	r2, [r7, #2]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800220a:	e003      	b.n	8002214 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800220c:	887b      	ldrh	r3, [r7, #2]
 800220e:	041a      	lsls	r2, r3, #16
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	611a      	str	r2, [r3, #16]
}
 8002214:	bf00      	nop
 8002216:	370c      	adds	r7, #12
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr

0800221e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800221e:	b480      	push	{r7}
 8002220:	b085      	sub	sp, #20
 8002222:	af00      	add	r7, sp, #0
 8002224:	6078      	str	r0, [r7, #4]
 8002226:	460b      	mov	r3, r1
 8002228:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002230:	887a      	ldrh	r2, [r7, #2]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	041a      	lsls	r2, r3, #16
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	43d9      	mvns	r1, r3
 800223c:	887b      	ldrh	r3, [r7, #2]
 800223e:	400b      	ands	r3, r1
 8002240:	431a      	orrs	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	611a      	str	r2, [r3, #16]
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr

08002250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e26c      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002270:	4b92      	ldr	r3, [pc, #584]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b04      	cmp	r3, #4
 800227a:	d00c      	beq.n	8002296 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800227c:	4b8f      	ldr	r3, [pc, #572]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d112      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
 8002288:	4b8c      	ldr	r3, [pc, #560]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b89      	ldr	r3, [pc, #548]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d06c      	beq.n	800237c <HAL_RCC_OscConfig+0x12c>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d168      	bne.n	800237c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e246      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x76>
 80022b8:	4b80      	ldr	r3, [pc, #512]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e02e      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x98>
 80022ce:	4b7b      	ldr	r3, [pc, #492]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7a      	ldr	r2, [pc, #488]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b78      	ldr	r3, [pc, #480]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a77      	ldr	r2, [pc, #476]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0xbc>
 80022f2:	4b72      	ldr	r3, [pc, #456]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a71      	ldr	r2, [pc, #452]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b6f      	ldr	r3, [pc, #444]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a6e      	ldr	r2, [pc, #440]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xd4>
 800230c:	4b6b      	ldr	r3, [pc, #428]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6a      	ldr	r2, [pc, #424]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b68      	ldr	r3, [pc, #416]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a67      	ldr	r2, [pc, #412]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800232c:	f7ff fcb6 	bl	8001c9c <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7ff fcb2 	bl	8001c9c <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e1fa      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b5d      	ldr	r3, [pc, #372]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xe4>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002354:	f7ff fca2 	bl	8001c9c <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7ff fc9e 	bl	8001c9c <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e1e6      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	4b53      	ldr	r3, [pc, #332]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x10c>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d063      	beq.n	8002452 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238a:	4b4c      	ldr	r3, [pc, #304]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002396:	4b49      	ldr	r3, [pc, #292]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x18c>
 80023a2:	4b46      	ldr	r3, [pc, #280]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	4b43      	ldr	r3, [pc, #268]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x176>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	691b      	ldr	r3, [r3, #16]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e1ba      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b3d      	ldr	r3, [pc, #244]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	4939      	ldr	r1, [pc, #228]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e03a      	b.n	8002452 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	691b      	ldr	r3, [r3, #16]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d020      	beq.n	8002426 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b36      	ldr	r3, [pc, #216]	; (80024c0 <HAL_RCC_OscConfig+0x270>)
 80023e6:	2201      	movs	r2, #1
 80023e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ea:	f7ff fc57 	bl	8001c9c <HAL_GetTick>
 80023ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	e008      	b.n	8002404 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f2:	f7ff fc53 	bl	8001c9c <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	1ad3      	subs	r3, r2, r3
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d901      	bls.n	8002404 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002400:	2303      	movs	r3, #3
 8002402:	e19b      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002404:	4b2d      	ldr	r3, [pc, #180]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0302 	and.w	r3, r3, #2
 800240c:	2b00      	cmp	r3, #0
 800240e:	d0f0      	beq.n	80023f2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b2a      	ldr	r3, [pc, #168]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	695b      	ldr	r3, [r3, #20]
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	4927      	ldr	r1, [pc, #156]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002420:	4313      	orrs	r3, r2
 8002422:	600b      	str	r3, [r1, #0]
 8002424:	e015      	b.n	8002452 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002426:	4b26      	ldr	r3, [pc, #152]	; (80024c0 <HAL_RCC_OscConfig+0x270>)
 8002428:	2200      	movs	r2, #0
 800242a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fc36 	bl	8001c9c <HAL_GetTick>
 8002430:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002432:	e008      	b.n	8002446 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002434:	f7ff fc32 	bl	8001c9c <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	2b02      	cmp	r3, #2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e17a      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002446:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1f0      	bne.n	8002434 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0308 	and.w	r3, r3, #8
 800245a:	2b00      	cmp	r3, #0
 800245c:	d03a      	beq.n	80024d4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d019      	beq.n	800249a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002466:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 8002468:	2201      	movs	r2, #1
 800246a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800246c:	f7ff fc16 	bl	8001c9c <HAL_GetTick>
 8002470:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002472:	e008      	b.n	8002486 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002474:	f7ff fc12 	bl	8001c9c <HAL_GetTick>
 8002478:	4602      	mov	r2, r0
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	1ad3      	subs	r3, r2, r3
 800247e:	2b02      	cmp	r3, #2
 8002480:	d901      	bls.n	8002486 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e15a      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002486:	4b0d      	ldr	r3, [pc, #52]	; (80024bc <HAL_RCC_OscConfig+0x26c>)
 8002488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0f0      	beq.n	8002474 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002492:	2001      	movs	r0, #1
 8002494:	f000 faa6 	bl	80029e4 <RCC_Delay>
 8002498:	e01c      	b.n	80024d4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <HAL_RCC_OscConfig+0x274>)
 800249c:	2200      	movs	r2, #0
 800249e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a0:	f7ff fbfc 	bl	8001c9c <HAL_GetTick>
 80024a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024a6:	e00f      	b.n	80024c8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024a8:	f7ff fbf8 	bl	8001c9c <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d908      	bls.n	80024c8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e140      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	42420000 	.word	0x42420000
 80024c4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024c8:	4b9e      	ldr	r3, [pc, #632]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80024ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d1e9      	bne.n	80024a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	f000 80a6 	beq.w	800262e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024e2:	2300      	movs	r3, #0
 80024e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024e6:	4b97      	ldr	r3, [pc, #604]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d10d      	bne.n	800250e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f2:	4b94      	ldr	r3, [pc, #592]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	4a93      	ldr	r2, [pc, #588]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80024f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024fc:	61d3      	str	r3, [r2, #28]
 80024fe:	4b91      	ldr	r3, [pc, #580]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250a:	2301      	movs	r3, #1
 800250c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800250e:	4b8e      	ldr	r3, [pc, #568]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002516:	2b00      	cmp	r3, #0
 8002518:	d118      	bne.n	800254c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800251a:	4b8b      	ldr	r3, [pc, #556]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a8a      	ldr	r2, [pc, #552]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002524:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002526:	f7ff fbb9 	bl	8001c9c <HAL_GetTick>
 800252a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800252c:	e008      	b.n	8002540 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252e:	f7ff fbb5 	bl	8001c9c <HAL_GetTick>
 8002532:	4602      	mov	r2, r0
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	2b64      	cmp	r3, #100	; 0x64
 800253a:	d901      	bls.n	8002540 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e0fd      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002540:	4b81      	ldr	r3, [pc, #516]	; (8002748 <HAL_RCC_OscConfig+0x4f8>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002548:	2b00      	cmp	r3, #0
 800254a:	d0f0      	beq.n	800252e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <HAL_RCC_OscConfig+0x312>
 8002554:	4b7b      	ldr	r3, [pc, #492]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	4a7a      	ldr	r2, [pc, #488]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6213      	str	r3, [r2, #32]
 8002560:	e02d      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10c      	bne.n	8002584 <HAL_RCC_OscConfig+0x334>
 800256a:	4b76      	ldr	r3, [pc, #472]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800256c:	6a1b      	ldr	r3, [r3, #32]
 800256e:	4a75      	ldr	r2, [pc, #468]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002570:	f023 0301 	bic.w	r3, r3, #1
 8002574:	6213      	str	r3, [r2, #32]
 8002576:	4b73      	ldr	r3, [pc, #460]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002578:	6a1b      	ldr	r3, [r3, #32]
 800257a:	4a72      	ldr	r2, [pc, #456]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800257c:	f023 0304 	bic.w	r3, r3, #4
 8002580:	6213      	str	r3, [r2, #32]
 8002582:	e01c      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	2b05      	cmp	r3, #5
 800258a:	d10c      	bne.n	80025a6 <HAL_RCC_OscConfig+0x356>
 800258c:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800258e:	6a1b      	ldr	r3, [r3, #32]
 8002590:	4a6c      	ldr	r2, [pc, #432]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002592:	f043 0304 	orr.w	r3, r3, #4
 8002596:	6213      	str	r3, [r2, #32]
 8002598:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800259a:	6a1b      	ldr	r3, [r3, #32]
 800259c:	4a69      	ldr	r2, [pc, #420]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800259e:	f043 0301 	orr.w	r3, r3, #1
 80025a2:	6213      	str	r3, [r2, #32]
 80025a4:	e00b      	b.n	80025be <HAL_RCC_OscConfig+0x36e>
 80025a6:	4b67      	ldr	r3, [pc, #412]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a66      	ldr	r2, [pc, #408]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80025ac:	f023 0301 	bic.w	r3, r3, #1
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	4b64      	ldr	r3, [pc, #400]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80025b4:	6a1b      	ldr	r3, [r3, #32]
 80025b6:	4a63      	ldr	r2, [pc, #396]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80025b8:	f023 0304 	bic.w	r3, r3, #4
 80025bc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	68db      	ldr	r3, [r3, #12]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d015      	beq.n	80025f2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025c6:	f7ff fb69 	bl	8001c9c <HAL_GetTick>
 80025ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff fb65 	bl	8001c9c <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e0ab      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	4b57      	ldr	r3, [pc, #348]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ee      	beq.n	80025ce <HAL_RCC_OscConfig+0x37e>
 80025f0:	e014      	b.n	800261c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025f2:	f7ff fb53 	bl	8001c9c <HAL_GetTick>
 80025f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025f8:	e00a      	b.n	8002610 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fa:	f7ff fb4f 	bl	8001c9c <HAL_GetTick>
 80025fe:	4602      	mov	r2, r0
 8002600:	693b      	ldr	r3, [r7, #16]
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	f241 3288 	movw	r2, #5000	; 0x1388
 8002608:	4293      	cmp	r3, r2
 800260a:	d901      	bls.n	8002610 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800260c:	2303      	movs	r3, #3
 800260e:	e095      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002610:	4b4c      	ldr	r3, [pc, #304]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d1ee      	bne.n	80025fa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800261c:	7dfb      	ldrb	r3, [r7, #23]
 800261e:	2b01      	cmp	r3, #1
 8002620:	d105      	bne.n	800262e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002622:	4b48      	ldr	r3, [pc, #288]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a47      	ldr	r2, [pc, #284]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002628:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800262c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	2b00      	cmp	r3, #0
 8002634:	f000 8081 	beq.w	800273a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002638:	4b42      	ldr	r3, [pc, #264]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f003 030c 	and.w	r3, r3, #12
 8002640:	2b08      	cmp	r3, #8
 8002642:	d061      	beq.n	8002708 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	69db      	ldr	r3, [r3, #28]
 8002648:	2b02      	cmp	r3, #2
 800264a:	d146      	bne.n	80026da <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264c:	4b3f      	ldr	r3, [pc, #252]	; (800274c <HAL_RCC_OscConfig+0x4fc>)
 800264e:	2200      	movs	r2, #0
 8002650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002652:	f7ff fb23 	bl	8001c9c <HAL_GetTick>
 8002656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002658:	e008      	b.n	800266c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265a:	f7ff fb1f 	bl	8001c9c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	693b      	ldr	r3, [r7, #16]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e067      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800266c:	4b35      	ldr	r3, [pc, #212]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002674:	2b00      	cmp	r3, #0
 8002676:	d1f0      	bne.n	800265a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6a1b      	ldr	r3, [r3, #32]
 800267c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002680:	d108      	bne.n	8002694 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002682:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	492d      	ldr	r1, [pc, #180]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002690:	4313      	orrs	r3, r2
 8002692:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002694:	4b2b      	ldr	r3, [pc, #172]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a19      	ldr	r1, [r3, #32]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026a4:	430b      	orrs	r3, r1
 80026a6:	4927      	ldr	r1, [pc, #156]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026ac:	4b27      	ldr	r3, [pc, #156]	; (800274c <HAL_RCC_OscConfig+0x4fc>)
 80026ae:	2201      	movs	r2, #1
 80026b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026b2:	f7ff faf3 	bl	8001c9c <HAL_GetTick>
 80026b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026b8:	e008      	b.n	80026cc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ba:	f7ff faef 	bl	8001c9c <HAL_GetTick>
 80026be:	4602      	mov	r2, r0
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	1ad3      	subs	r3, r2, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d901      	bls.n	80026cc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80026c8:	2303      	movs	r3, #3
 80026ca:	e037      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80026cc:	4b1d      	ldr	r3, [pc, #116]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0f0      	beq.n	80026ba <HAL_RCC_OscConfig+0x46a>
 80026d8:	e02f      	b.n	800273a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b1c      	ldr	r3, [pc, #112]	; (800274c <HAL_RCC_OscConfig+0x4fc>)
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026e0:	f7ff fadc 	bl	8001c9c <HAL_GetTick>
 80026e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026e6:	e008      	b.n	80026fa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e8:	f7ff fad8 	bl	8001c9c <HAL_GetTick>
 80026ec:	4602      	mov	r2, r0
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1ad3      	subs	r3, r2, r3
 80026f2:	2b02      	cmp	r3, #2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e020      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026fa:	4b12      	ldr	r3, [pc, #72]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1f0      	bne.n	80026e8 <HAL_RCC_OscConfig+0x498>
 8002706:	e018      	b.n	800273a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69db      	ldr	r3, [r3, #28]
 800270c:	2b01      	cmp	r3, #1
 800270e:	d101      	bne.n	8002714 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e013      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_OscConfig+0x4f4>)
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	429a      	cmp	r2, r3
 8002726:	d106      	bne.n	8002736 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	429a      	cmp	r2, r3
 8002734:	d001      	beq.n	800273a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002736:	2301      	movs	r3, #1
 8002738:	e000      	b.n	800273c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}
 8002744:	40021000 	.word	0x40021000
 8002748:	40007000 	.word	0x40007000
 800274c:	42420060 	.word	0x42420060

08002750 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
 8002758:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0d0      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002764:	4b6a      	ldr	r3, [pc, #424]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d910      	bls.n	8002794 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002772:	4b67      	ldr	r3, [pc, #412]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f023 0207 	bic.w	r2, r3, #7
 800277a:	4965      	ldr	r1, [pc, #404]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	4313      	orrs	r3, r2
 8002780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002782:	4b63      	ldr	r3, [pc, #396]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	683a      	ldr	r2, [r7, #0]
 800278c:	429a      	cmp	r2, r3
 800278e:	d001      	beq.n	8002794 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e0b8      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f003 0302 	and.w	r3, r3, #2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d020      	beq.n	80027e2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0304 	and.w	r3, r3, #4
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80027ac:	4b59      	ldr	r3, [pc, #356]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	4a58      	ldr	r2, [pc, #352]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027b2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80027b6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f003 0308 	and.w	r3, r3, #8
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d005      	beq.n	80027d0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027c4:	4b53      	ldr	r3, [pc, #332]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027ca:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80027ce:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027d0:	4b50      	ldr	r3, [pc, #320]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027d2:	685b      	ldr	r3, [r3, #4]
 80027d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	494d      	ldr	r1, [pc, #308]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0301 	and.w	r3, r3, #1
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d040      	beq.n	8002870 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d107      	bne.n	8002806 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027f6:	4b47      	ldr	r3, [pc, #284]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d115      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e07f      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d107      	bne.n	800281e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280e:	4b41      	ldr	r3, [pc, #260]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d109      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e073      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281e:	4b3d      	ldr	r3, [pc, #244]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 0302 	and.w	r3, r3, #2
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e06b      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800282e:	4b39      	ldr	r3, [pc, #228]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	f023 0203 	bic.w	r2, r3, #3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	4936      	ldr	r1, [pc, #216]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 800283c:	4313      	orrs	r3, r2
 800283e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002840:	f7ff fa2c 	bl	8001c9c <HAL_GetTick>
 8002844:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002846:	e00a      	b.n	800285e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002848:	f7ff fa28 	bl	8001c9c <HAL_GetTick>
 800284c:	4602      	mov	r2, r0
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	1ad3      	subs	r3, r2, r3
 8002852:	f241 3288 	movw	r2, #5000	; 0x1388
 8002856:	4293      	cmp	r3, r2
 8002858:	d901      	bls.n	800285e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e053      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800285e:	4b2d      	ldr	r3, [pc, #180]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f003 020c 	and.w	r2, r3, #12
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	429a      	cmp	r2, r3
 800286e:	d1eb      	bne.n	8002848 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002870:	4b27      	ldr	r3, [pc, #156]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	429a      	cmp	r2, r3
 800287c:	d210      	bcs.n	80028a0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800287e:	4b24      	ldr	r3, [pc, #144]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f023 0207 	bic.w	r2, r3, #7
 8002886:	4922      	ldr	r1, [pc, #136]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	4313      	orrs	r3, r2
 800288c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800288e:	4b20      	ldr	r3, [pc, #128]	; (8002910 <HAL_RCC_ClockConfig+0x1c0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0307 	and.w	r3, r3, #7
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	429a      	cmp	r2, r3
 800289a:	d001      	beq.n	80028a0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800289c:	2301      	movs	r3, #1
 800289e:	e032      	b.n	8002906 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f003 0304 	and.w	r3, r3, #4
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d008      	beq.n	80028be <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028ac:	4b19      	ldr	r3, [pc, #100]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4916      	ldr	r1, [pc, #88]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028ba:	4313      	orrs	r3, r2
 80028bc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f003 0308 	and.w	r3, r3, #8
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d009      	beq.n	80028de <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80028ca:	4b12      	ldr	r3, [pc, #72]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	00db      	lsls	r3, r3, #3
 80028d8:	490e      	ldr	r1, [pc, #56]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028da:	4313      	orrs	r3, r2
 80028dc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028de:	f000 f821 	bl	8002924 <HAL_RCC_GetSysClockFreq>
 80028e2:	4602      	mov	r2, r0
 80028e4:	4b0b      	ldr	r3, [pc, #44]	; (8002914 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	091b      	lsrs	r3, r3, #4
 80028ea:	f003 030f 	and.w	r3, r3, #15
 80028ee:	490a      	ldr	r1, [pc, #40]	; (8002918 <HAL_RCC_ClockConfig+0x1c8>)
 80028f0:	5ccb      	ldrb	r3, [r1, r3]
 80028f2:	fa22 f303 	lsr.w	r3, r2, r3
 80028f6:	4a09      	ldr	r2, [pc, #36]	; (800291c <HAL_RCC_ClockConfig+0x1cc>)
 80028f8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <HAL_RCC_ClockConfig+0x1d0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff f98a 	bl	8001c18 <HAL_InitTick>

  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	40022000 	.word	0x40022000
 8002914:	40021000 	.word	0x40021000
 8002918:	08003268 	.word	0x08003268
 800291c:	20000064 	.word	0x20000064
 8002920:	20000068 	.word	0x20000068

08002924 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002924:	b490      	push	{r4, r7}
 8002926:	b08a      	sub	sp, #40	; 0x28
 8002928:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800292a:	4b2a      	ldr	r3, [pc, #168]	; (80029d4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800292c:	1d3c      	adds	r4, r7, #4
 800292e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002930:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002934:	f240 2301 	movw	r3, #513	; 0x201
 8002938:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800293a:	2300      	movs	r3, #0
 800293c:	61fb      	str	r3, [r7, #28]
 800293e:	2300      	movs	r3, #0
 8002940:	61bb      	str	r3, [r7, #24]
 8002942:	2300      	movs	r3, #0
 8002944:	627b      	str	r3, [r7, #36]	; 0x24
 8002946:	2300      	movs	r3, #0
 8002948:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800294e:	4b22      	ldr	r3, [pc, #136]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	f003 030c 	and.w	r3, r3, #12
 800295a:	2b04      	cmp	r3, #4
 800295c:	d002      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x40>
 800295e:	2b08      	cmp	r3, #8
 8002960:	d003      	beq.n	800296a <HAL_RCC_GetSysClockFreq+0x46>
 8002962:	e02d      	b.n	80029c0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002964:	4b1d      	ldr	r3, [pc, #116]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002966:	623b      	str	r3, [r7, #32]
      break;
 8002968:	e02d      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	0c9b      	lsrs	r3, r3, #18
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002976:	4413      	add	r3, r2
 8002978:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800297c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d013      	beq.n	80029b0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002988:	4b13      	ldr	r3, [pc, #76]	; (80029d8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	0c5b      	lsrs	r3, r3, #17
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002996:	4413      	add	r3, r2
 8002998:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800299c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a2:	fb02 f203 	mul.w	r2, r2, r3
 80029a6:	69bb      	ldr	r3, [r7, #24]
 80029a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ac:	627b      	str	r3, [r7, #36]	; 0x24
 80029ae:	e004      	b.n	80029ba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	4a0b      	ldr	r2, [pc, #44]	; (80029e0 <HAL_RCC_GetSysClockFreq+0xbc>)
 80029b4:	fb02 f303 	mul.w	r3, r2, r3
 80029b8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80029ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029bc:	623b      	str	r3, [r7, #32]
      break;
 80029be:	e002      	b.n	80029c6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <HAL_RCC_GetSysClockFreq+0xb8>)
 80029c2:	623b      	str	r3, [r7, #32]
      break;
 80029c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029c6:	6a3b      	ldr	r3, [r7, #32]
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	3728      	adds	r7, #40	; 0x28
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bc90      	pop	{r4, r7}
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	08003258 	.word	0x08003258
 80029d8:	40021000 	.word	0x40021000
 80029dc:	007a1200 	.word	0x007a1200
 80029e0:	003d0900 	.word	0x003d0900

080029e4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80029ec:	4b0a      	ldr	r3, [pc, #40]	; (8002a18 <RCC_Delay+0x34>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a0a      	ldr	r2, [pc, #40]	; (8002a1c <RCC_Delay+0x38>)
 80029f2:	fba2 2303 	umull	r2, r3, r2, r3
 80029f6:	0a5b      	lsrs	r3, r3, #9
 80029f8:	687a      	ldr	r2, [r7, #4]
 80029fa:	fb02 f303 	mul.w	r3, r2, r3
 80029fe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002a00:	bf00      	nop
  }
  while (Delay --);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	1e5a      	subs	r2, r3, #1
 8002a06:	60fa      	str	r2, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1f9      	bne.n	8002a00 <RCC_Delay+0x1c>
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	20000064 	.word	0x20000064
 8002a1c:	10624dd3 	.word	0x10624dd3

08002a20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b082      	sub	sp, #8
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d101      	bne.n	8002a32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e041      	b.n	8002ab6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a38:	b2db      	uxtb	r3, r3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d106      	bne.n	8002a4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	f7ff f84e 	bl	8001ae8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2202      	movs	r2, #2
 8002a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3304      	adds	r3, #4
 8002a5c:	4619      	mov	r1, r3
 8002a5e:	4610      	mov	r0, r2
 8002a60:	f000 fa6a 	bl	8002f38 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2201      	movs	r2, #1
 8002ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ab4:	2300      	movs	r3, #0
}
 8002ab6:	4618      	mov	r0, r3
 8002ab8:	3708      	adds	r7, #8
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}
	...

08002ac0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d001      	beq.n	8002ad8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ad4:	2301      	movs	r3, #1
 8002ad6:	e035      	b.n	8002b44 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2202      	movs	r2, #2
 8002adc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f042 0201 	orr.w	r2, r2, #1
 8002aee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a16      	ldr	r2, [pc, #88]	; (8002b50 <HAL_TIM_Base_Start_IT+0x90>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d009      	beq.n	8002b0e <HAL_TIM_Base_Start_IT+0x4e>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b02:	d004      	beq.n	8002b0e <HAL_TIM_Base_Start_IT+0x4e>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4a12      	ldr	r2, [pc, #72]	; (8002b54 <HAL_TIM_Base_Start_IT+0x94>)
 8002b0a:	4293      	cmp	r3, r2
 8002b0c:	d111      	bne.n	8002b32 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0307 	and.w	r3, r3, #7
 8002b18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2b06      	cmp	r3, #6
 8002b1e:	d010      	beq.n	8002b42 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b30:	e007      	b.n	8002b42 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b42:	2300      	movs	r3, #0
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bc80      	pop	{r7}
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop
 8002b50:	40012c00 	.word	0x40012c00
 8002b54:	40000400 	.word	0x40000400

08002b58 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0302 	and.w	r3, r3, #2
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0202 	mvn.w	r2, #2
 8002b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f9b1 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f9a4 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f9b3 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0304 	and.w	r3, r3, #4
 8002bbe:	2b04      	cmp	r3, #4
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0204 	mvn.w	r2, #4
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2202      	movs	r2, #2
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	699b      	ldr	r3, [r3, #24]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f987 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f97a 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f989 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0308 	and.w	r3, r3, #8
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d122      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0308 	and.w	r3, r3, #8
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d11b      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0208 	mvn.w	r2, #8
 8002c2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2204      	movs	r2, #4
 8002c32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	f003 0303 	and.w	r3, r3, #3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d003      	beq.n	8002c4a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 f95d 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002c48:	e005      	b.n	8002c56 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f950 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f95f 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0310 	and.w	r3, r3, #16
 8002c66:	2b10      	cmp	r3, #16
 8002c68:	d122      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b10      	cmp	r3, #16
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0210 	mvn.w	r2, #16
 8002c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2208      	movs	r2, #8
 8002c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d003      	beq.n	8002c9e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f000 f933 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002c9c:	e005      	b.n	8002caa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f926 	bl	8002ef0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f000 f935 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	f003 0301 	and.w	r3, r3, #1
 8002cba:	2b01      	cmp	r3, #1
 8002cbc:	d10e      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	68db      	ldr	r3, [r3, #12]
 8002cc4:	f003 0301 	and.w	r3, r3, #1
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d107      	bne.n	8002cdc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f06f 0201 	mvn.w	r2, #1
 8002cd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f7fe fda4 	bl	8001824 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	691b      	ldr	r3, [r3, #16]
 8002ce2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce6:	2b80      	cmp	r3, #128	; 0x80
 8002ce8:	d10e      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	68db      	ldr	r3, [r3, #12]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d107      	bne.n	8002d08 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa67 	bl	80031d6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d12:	2b40      	cmp	r3, #64	; 0x40
 8002d14:	d10e      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68db      	ldr	r3, [r3, #12]
 8002d1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d20:	2b40      	cmp	r3, #64	; 0x40
 8002d22:	d107      	bne.n	8002d34 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d2e:	6878      	ldr	r0, [r7, #4]
 8002d30:	f000 f8f9 	bl	8002f26 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d10e      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	f003 0320 	and.w	r3, r3, #32
 8002d4c:	2b20      	cmp	r3, #32
 8002d4e:	d107      	bne.n	8002d60 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f06f 0220 	mvn.w	r2, #32
 8002d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 fa32 	bl	80031c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d60:	bf00      	nop
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b084      	sub	sp, #16
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_TIM_ConfigClockSource+0x18>
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e0b3      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x180>
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002da6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	68fa      	ldr	r2, [r7, #12]
 8002dae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002db8:	d03e      	beq.n	8002e38 <HAL_TIM_ConfigClockSource+0xd0>
 8002dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dbe:	f200 8087 	bhi.w	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc6:	f000 8085 	beq.w	8002ed4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dce:	d87f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002dd0:	2b70      	cmp	r3, #112	; 0x70
 8002dd2:	d01a      	beq.n	8002e0a <HAL_TIM_ConfigClockSource+0xa2>
 8002dd4:	2b70      	cmp	r3, #112	; 0x70
 8002dd6:	d87b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002dd8:	2b60      	cmp	r3, #96	; 0x60
 8002dda:	d050      	beq.n	8002e7e <HAL_TIM_ConfigClockSource+0x116>
 8002ddc:	2b60      	cmp	r3, #96	; 0x60
 8002dde:	d877      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002de0:	2b50      	cmp	r3, #80	; 0x50
 8002de2:	d03c      	beq.n	8002e5e <HAL_TIM_ConfigClockSource+0xf6>
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d873      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002de8:	2b40      	cmp	r3, #64	; 0x40
 8002dea:	d058      	beq.n	8002e9e <HAL_TIM_ConfigClockSource+0x136>
 8002dec:	2b40      	cmp	r3, #64	; 0x40
 8002dee:	d86f      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002df0:	2b30      	cmp	r3, #48	; 0x30
 8002df2:	d064      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d86b      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002df8:	2b20      	cmp	r3, #32
 8002dfa:	d060      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
 8002dfc:	2b20      	cmp	r3, #32
 8002dfe:	d867      	bhi.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d05c      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
 8002e04:	2b10      	cmp	r3, #16
 8002e06:	d05a      	beq.n	8002ebe <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e08:	e062      	b.n	8002ed0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6818      	ldr	r0, [r3, #0]
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	6899      	ldr	r1, [r3, #8]
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	685a      	ldr	r2, [r3, #4]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	f000 f95c 	bl	80030d6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e2c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	68fa      	ldr	r2, [r7, #12]
 8002e34:	609a      	str	r2, [r3, #8]
      break;
 8002e36:	e04e      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6899      	ldr	r1, [r3, #8]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	685a      	ldr	r2, [r3, #4]
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	68db      	ldr	r3, [r3, #12]
 8002e48:	f000 f945 	bl	80030d6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	689a      	ldr	r2, [r3, #8]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e5a:	609a      	str	r2, [r3, #8]
      break;
 8002e5c:	e03b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	6859      	ldr	r1, [r3, #4]
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f000 f8bc 	bl	8002fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2150      	movs	r1, #80	; 0x50
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f913 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e7c:	e02b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6818      	ldr	r0, [r3, #0]
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	6859      	ldr	r1, [r3, #4]
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	68db      	ldr	r3, [r3, #12]
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	f000 f8da 	bl	8003044 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	2160      	movs	r1, #96	; 0x60
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f903 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e9c:	e01b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6818      	ldr	r0, [r3, #0]
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	461a      	mov	r2, r3
 8002eac:	f000 f89c 	bl	8002fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	2140      	movs	r1, #64	; 0x40
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f8f3 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002ebc:	e00b      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	4610      	mov	r0, r2
 8002eca:	f000 f8ea 	bl	80030a2 <TIM_ITRx_SetConfig>
        break;
 8002ece:	e002      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed0:	bf00      	nop
 8002ed2:	e000      	b.n	8002ed6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ed4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bd80      	pop	{r7, pc}

08002ef0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bc80      	pop	{r7}
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bc80      	pop	{r7}
 8002f24:	4770      	bx	lr

08002f26 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f26:	b480      	push	{r7}
 8002f28:	b083      	sub	sp, #12
 8002f2a:	af00      	add	r7, sp, #0
 8002f2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bc80      	pop	{r7}
 8002f36:	4770      	bx	lr

08002f38 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	4a25      	ldr	r2, [pc, #148]	; (8002fe0 <TIM_Base_SetConfig+0xa8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d007      	beq.n	8002f60 <TIM_Base_SetConfig+0x28>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f56:	d003      	beq.n	8002f60 <TIM_Base_SetConfig+0x28>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	4a22      	ldr	r2, [pc, #136]	; (8002fe4 <TIM_Base_SetConfig+0xac>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d108      	bne.n	8002f72 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a1a      	ldr	r2, [pc, #104]	; (8002fe0 <TIM_Base_SetConfig+0xa8>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d007      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f80:	d003      	beq.n	8002f8a <TIM_Base_SetConfig+0x52>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	4a17      	ldr	r2, [pc, #92]	; (8002fe4 <TIM_Base_SetConfig+0xac>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d108      	bne.n	8002f9c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	68db      	ldr	r3, [r3, #12]
 8002f96:	68fa      	ldr	r2, [r7, #12]
 8002f98:	4313      	orrs	r3, r2
 8002f9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	695b      	ldr	r3, [r3, #20]
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68fa      	ldr	r2, [r7, #12]
 8002fae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	689a      	ldr	r2, [r3, #8]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	681a      	ldr	r2, [r3, #0]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a07      	ldr	r2, [pc, #28]	; (8002fe0 <TIM_Base_SetConfig+0xa8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d103      	bne.n	8002fd0 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	615a      	str	r2, [r3, #20]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr
 8002fe0:	40012c00 	.word	0x40012c00
 8002fe4:	40000400 	.word	0x40000400

08002fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b087      	sub	sp, #28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1b      	ldr	r3, [r3, #32]
 8002ffe:	f023 0201 	bic.w	r2, r3, #1
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	f023 030a 	bic.w	r3, r3, #10
 8003024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003026:	697a      	ldr	r2, [r7, #20]
 8003028:	68bb      	ldr	r3, [r7, #8]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	621a      	str	r2, [r3, #32]
}
 800303a:	bf00      	nop
 800303c:	371c      	adds	r7, #28
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr

08003044 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	6a1b      	ldr	r3, [r3, #32]
 8003054:	f023 0210 	bic.w	r2, r3, #16
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6a1b      	ldr	r3, [r3, #32]
 8003066:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800306e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	031b      	lsls	r3, r3, #12
 8003074:	697a      	ldr	r2, [r7, #20]
 8003076:	4313      	orrs	r3, r2
 8003078:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800307a:	693b      	ldr	r3, [r7, #16]
 800307c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003080:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003082:	68bb      	ldr	r3, [r7, #8]
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4313      	orrs	r3, r2
 800308a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	697a      	ldr	r2, [r7, #20]
 8003090:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	693a      	ldr	r2, [r7, #16]
 8003096:	621a      	str	r2, [r3, #32]
}
 8003098:	bf00      	nop
 800309a:	371c      	adds	r7, #28
 800309c:	46bd      	mov	sp, r7
 800309e:	bc80      	pop	{r7}
 80030a0:	4770      	bx	lr

080030a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 0307 	orr.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bc80      	pop	{r7}
 80030d4:	4770      	bx	lr

080030d6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b087      	sub	sp, #28
 80030da:	af00      	add	r7, sp, #0
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	60b9      	str	r1, [r7, #8]
 80030e0:	607a      	str	r2, [r7, #4]
 80030e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	689b      	ldr	r3, [r3, #8]
 80030e8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ea:	697b      	ldr	r3, [r7, #20]
 80030ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	021a      	lsls	r2, r3, #8
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	431a      	orrs	r2, r3
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	609a      	str	r2, [r3, #8]
}
 800310a:	bf00      	nop
 800310c:	371c      	adds	r7, #28
 800310e:	46bd      	mov	sp, r7
 8003110:	bc80      	pop	{r7}
 8003112:	4770      	bx	lr

08003114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
 800311c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003124:	2b01      	cmp	r3, #1
 8003126:	d101      	bne.n	800312c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003128:	2302      	movs	r3, #2
 800312a:	e041      	b.n	80031b0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	68fa      	ldr	r2, [r7, #12]
 800315a:	4313      	orrs	r3, r2
 800315c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	68fa      	ldr	r2, [r7, #12]
 8003164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a14      	ldr	r2, [pc, #80]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d009      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003178:	d004      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a10      	ldr	r2, [pc, #64]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d10c      	bne.n	800319e <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800318a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68ba      	ldr	r2, [r7, #8]
 8003192:	4313      	orrs	r3, r2
 8003194:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2201      	movs	r2, #1
 80031a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3714      	adds	r7, #20
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bc80      	pop	{r7}
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40012c00 	.word	0x40012c00
 80031c0:	40000400 	.word	0x40000400

080031c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bc80      	pop	{r7}
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b083      	sub	sp, #12
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031de:	bf00      	nop
 80031e0:	370c      	adds	r7, #12
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bc80      	pop	{r7}
 80031e6:	4770      	bx	lr

080031e8 <__libc_init_array>:
 80031e8:	b570      	push	{r4, r5, r6, lr}
 80031ea:	2600      	movs	r6, #0
 80031ec:	4d0c      	ldr	r5, [pc, #48]	; (8003220 <__libc_init_array+0x38>)
 80031ee:	4c0d      	ldr	r4, [pc, #52]	; (8003224 <__libc_init_array+0x3c>)
 80031f0:	1b64      	subs	r4, r4, r5
 80031f2:	10a4      	asrs	r4, r4, #2
 80031f4:	42a6      	cmp	r6, r4
 80031f6:	d109      	bne.n	800320c <__libc_init_array+0x24>
 80031f8:	f000 f822 	bl	8003240 <_init>
 80031fc:	2600      	movs	r6, #0
 80031fe:	4d0a      	ldr	r5, [pc, #40]	; (8003228 <__libc_init_array+0x40>)
 8003200:	4c0a      	ldr	r4, [pc, #40]	; (800322c <__libc_init_array+0x44>)
 8003202:	1b64      	subs	r4, r4, r5
 8003204:	10a4      	asrs	r4, r4, #2
 8003206:	42a6      	cmp	r6, r4
 8003208:	d105      	bne.n	8003216 <__libc_init_array+0x2e>
 800320a:	bd70      	pop	{r4, r5, r6, pc}
 800320c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003210:	4798      	blx	r3
 8003212:	3601      	adds	r6, #1
 8003214:	e7ee      	b.n	80031f4 <__libc_init_array+0xc>
 8003216:	f855 3b04 	ldr.w	r3, [r5], #4
 800321a:	4798      	blx	r3
 800321c:	3601      	adds	r6, #1
 800321e:	e7f2      	b.n	8003206 <__libc_init_array+0x1e>
 8003220:	08003278 	.word	0x08003278
 8003224:	08003278 	.word	0x08003278
 8003228:	08003278 	.word	0x08003278
 800322c:	0800327c 	.word	0x0800327c

08003230 <memset>:
 8003230:	4603      	mov	r3, r0
 8003232:	4402      	add	r2, r0
 8003234:	4293      	cmp	r3, r2
 8003236:	d100      	bne.n	800323a <memset+0xa>
 8003238:	4770      	bx	lr
 800323a:	f803 1b01 	strb.w	r1, [r3], #1
 800323e:	e7f9      	b.n	8003234 <memset+0x4>

08003240 <_init>:
 8003240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003242:	bf00      	nop
 8003244:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003246:	bc08      	pop	{r3}
 8003248:	469e      	mov	lr, r3
 800324a:	4770      	bx	lr

0800324c <_fini>:
 800324c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800324e:	bf00      	nop
 8003250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003252:	bc08      	pop	{r3}
 8003254:	469e      	mov	lr, r3
 8003256:	4770      	bx	lr
